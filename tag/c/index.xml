<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# | kleban.page</title>
    <link>/tag/c/</link>
      <atom:link href="/tag/c/index.xml" rel="self" type="application/rss+xml" />
    <description>C#</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>uk</language><copyright>© 2021 Yurii Kleban</copyright><lastBuildDate>Sun, 18 Apr 2021 00:00:00 +0100</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>C#</title>
      <link>/tag/c/</link>
    </image>
    
    <item>
      <title>Лекція 1. Вступ до основ програмування на платформі .NET</title>
      <link>/courses/csharp-basics/lecture1/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture1/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter11&#34;&gt;1.1.	Загальні категорії та поняття програмування&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter12&#34;&gt;1.2.	Коротка історія програмування та виникнення мови C#&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter121&#34;&gt;1.2.1.	Парадигми програмування&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter122&#34;&gt;1.2.2. Процедурне програмування&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter123&#34;&gt;1.2.3. Об’єктне (модульне) програмування&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter124&#34;&gt;1.2.4. Об’єктно-орієнтовне програмування&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter13&#34;&gt;1.3	Еволюція мови програмування C#&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter131&#34;&gt;1.3.1	Створення ООП та C++&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter132&#34;&gt;1.3.2	Internet та поява мови Java&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter133&#34;&gt;1.3.3.	Виникнення C#&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter14&#34;&gt;1.4	.NET Framework: поняття та структура&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter1c&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter1s&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter1a&#34;&gt;Додаткові матеріали для завнатаження &lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;hr&gt;
&lt;h2 id=&#34;chapter11&#34;&gt;1.1.	Загальні категорії та поняття програмування&lt;/h2&gt;
&lt;p&gt;Перед початком вивчення програмування варто розглянути та розібрати базові поняття та категорії. Дамо визначення понять: алгоритм, задача, програмування, мова програмування, програма, програмне забезпечення, розробка програмного забезпечення.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Програмування&lt;/strong&gt; – розробка програм за допомогою мов програмування.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Мова програмування&lt;/strong&gt; – це формальна система знаків, що призначена для написання програм, зрозуміла для виконавця (комп’ютера).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Програма&lt;/strong&gt; (&lt;code&gt;program&lt;/code&gt;, &lt;code&gt;routine&lt;/code&gt;) — впорядкована послідовність команд (інструкцій) комп&amp;rsquo;ютера для розв&amp;rsquo;язання задачі.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Програмне забезпечення&lt;/strong&gt; (&lt;code&gt;software&lt;/code&gt;) — сукупність програм обробки даних та необхідних для їх експлуатації документів. Програми призначені для машинної реалізації завдань (Задач). Терміни завдання і застосування (програма) мають дуже широке вживання в контексті інформатики і програмного забезпечення.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Завдання&lt;/strong&gt; або &lt;strong&gt;задача&lt;/strong&gt; (&lt;code&gt;problem&lt;/code&gt;, &lt;code&gt;task&lt;/code&gt;) — проблема, що підлягає вирішенню.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Застосування&lt;/strong&gt; або &lt;strong&gt;програма&lt;/strong&gt; (&lt;code&gt;application&lt;/code&gt;) — програмна реалізація на комп&amp;rsquo;ютері рішення задачі.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Розробка програмного забезпечення&lt;/strong&gt; (англ. &lt;code&gt;software engineering&lt;/code&gt;, &lt;code&gt;software development&lt;/code&gt;) — це рід діяльності (професія) і процес, спрямований на створення і підтримку працездатності, якості та надійності програмного забезпечення, використовуючи технології, методологію та практики з інформатики, управління проектами, математики, інженерії та інших сфер знань.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Алгоритм&lt;/strong&gt; (&lt;code&gt;Algorithmi&lt;/code&gt;, від імені перського математика IX ст. аль-Хорезмі) — система правил виконання обчислювального процесу, що обов&amp;rsquo;язково приводить до розв&amp;rsquo;язання певного класу задач після скінченного числа операцій. При написанні комп&amp;rsquo;ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми. Засоби швидкої розробки додатків (RAD) дозволяють створити програмний продукт, що складається з ряду застосувань, що дозволяють користувачам вводити дані в таблиці або редагувати вже існуючі дані, аналізувати введені дані і представляти їх у більш зручному для сприйняття вигляді - графіків, зведених таблиць або звітів (у тому числі у вигляді &amp;ldquo;паперових&amp;rdquo; документів).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter12&#34;&gt;1.2.	Коротка історія програмування та виникнення мови C#&lt;/h2&gt;
&lt;h3 id=&#34;chapter121&#34;&gt;1.2.1.	Парадигми програмування&lt;/h3&gt;
&lt;p&gt;Усе програмування прийнято поділяти на два основних види:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Декларативне.&lt;/li&gt;
&lt;li&gt;Імперативне.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Декларативне програмування&lt;/strong&gt; — термін з двома різними значеннями. Згідно першому визначенню, програма «декларативна», якщо вона описує щось, а не як його створити. Наприклад, веб-сторінки на HTML декларативні, оскільки вони описують що повинна містити сторінка, а не як відображати сторінку на екрані. Цей підхід відрізняється від мов імперативного програмування, що вимагають від програміста вказувати алгоритм для виконання.&lt;/p&gt;
&lt;p&gt;Згідно другому визначенню, програма «декларативна», якщо вона написана на виключно функціональній, логічній або константній мові програмування.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Імперативне програмування&lt;/strong&gt; — парадигма програмування, згідно з якою описується процес отримання результатів як послідовність інструкцій зміни стану програми. Подібно до того, як з допомогою наказового способу в мовознавстві перелічується послідовність дій, що необхідно виконати, імперативні програми є послідовністю операцій комп&amp;rsquo;ютеру для виконання.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Парадигма програмування&lt;/strong&gt; — це спосіб мислення розробника програми. Мова програмування може підтримувати або не підтримувати ту чи іншу парадигму. В першому випадку застосування парадигми стає зручним, тобто простим, безпечним і ефективним. Ми розглянемо три основних наказових парадигми — процедурне, об’єктне (модульне) і об’єктно-орієнтовне (ієрархічне) програмування.&lt;/p&gt;
&lt;h3 id=&#34;chapter122&#34;&gt;1.2.2. Процедурне програмування&lt;/h3&gt;
&lt;p&gt;Процедурне програмування подає програму у вигляді набору алгоритмів, для оформлення яких можуть застосовуватися іменовані програмні блоки — процедури і функції. В останньому випадку передбачається наявність механізмів передачі параметрів і поверненні результату.&lt;/p&gt;
&lt;p&gt;Спочатку процедурне програмування користувалося довільними засобами керування, в тому числі, переходом за міткою — одним з найбільш вживаних операторів керування в Фортрані.&lt;/p&gt;
&lt;p&gt;До мов процедурного програмування відносяться Fortran, Cobol, Pascal, Basic, та інші.&lt;/p&gt;
&lt;p&gt;В 1968 році голландський вчений Е. Дейкстра вперше звернув увагу на проблеми, що виникають у програмах з неконтрольованими переходами, в 1970 році проголосив новий напрямок, який він назвав структур(ова)ним програмуванням.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Структурне програмування&lt;/strong&gt; — це варіант процедурного, що вживає три типи структур керування: послідовне виконання дій, розгалуження і цикл. Не дивно, що Фортран не підтримував цю парадигму — в наборі його засобів не було циклів за умовами. Починаючи з Алголу, а особливо в Паскалі, цикли стають основним засобом організації обчислень в програмі.&lt;/p&gt;
&lt;p&gt;Автор Паскалю, професор Н. Вірт, відібрав до створюваної ним мови програмування лише прості в поясненні і легкі в реалізації конструкції. Завдяки сильній типізації програми в Паскалі відзначаються високою надійністю, вони мобільні завдяки закладеній в них концепції Паскаль-машини, їх легко читати і розуміти завдяки дисципліні програмування, продиктованої вжитою парадигмою.&lt;/p&gt;
&lt;p&gt;Але разом з цим застосування Паскалю гальмувалося саме складністю виходу за межі віртуальної машини, потребою ефективного використання наявної апаратури. Головним критерієм, вжитим Б.Керніганом і Д.Річі до створеної ними мови С, стала саме гнучкість використання особливостей конкретної апаратури і ефективність виконання програм.&lt;/p&gt;
&lt;h3 id=&#34;chapter123&#34;&gt;1.2.3. Об’єктне (модульне) програмування&lt;/h3&gt;
&lt;p&gt;Процедурна парадигма віддала належне алгоритмічній компоненті програмування. Але з ростом обсягу програм і складності даних з&amp;rsquo;явилася нова проблема структурної організації даних, найбільш ємко висловлена Віртовською формулою &lt;strong&gt;&lt;code&gt;алгоритми + структури даних = програми&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Поняття модуля як абстракції даних було вперше запропоноване Парнасом у 
1972 році, правда на той час уже існувала мова програмування Симула 67, в якій використовувалася парадигма об&amp;rsquo;єктів. У найбільш повному виді поняття абстракції даних було реалізоване в мові програмування Модула-2.&lt;/p&gt;
&lt;p&gt;Головна ідея полягає в забезпеченні доступу до даних, не залежному від їх конкретного представлення. Самі дані і програми їх обробки вбудовуються (інкапсулюються) в окремій одиниці програми.&lt;/p&gt;
&lt;h3 id=&#34;chapter124&#34;&gt;1.2.4. Об’єктно-орієнтовне програмування&lt;/h3&gt;
&lt;p&gt;Об&amp;rsquo;єктно-орієнтована парадигма наділила класи ієрархією.&lt;/p&gt;
&lt;p&gt;Об&amp;rsquo;єктно-орієнтоване програмування за метафорою Б.Страуструпа, автора &lt;code&gt;С++&lt;/code&gt; — однієї з найпопулярніших мов об&amp;rsquo;єктно-орієнтованого програмування, — це високоінтелектуальний синонім доброго програмування. Дійсно, нові парадигми програмування з&amp;rsquo;являються не так часто, не частіше однієї в десятиліття. Той факт, що об&amp;rsquo;єктно-орієнтована парадигма успішно використовується протягом 20 років, сам по собі служить вагомим підтвердженням її життєздатності.&lt;/p&gt;
&lt;p&gt;Алгоритми, реалізовані в процедурному програмуванні, надто конкретні. Будь-яка модифікація — це вже новий алгоритм і таким чином кількість процедур і функцій, що знаходяться у використанні, надмірно зростає. Модульне програмування групує алгоритми в модулі, одночасно інкапсулюючи структури даних. Тепер залишається зробити наступний крок — побудувати ієрархію модулів або класів.&lt;/p&gt;
&lt;p&gt;Таких ієрархій може бути дві. Перша з них — бути частиною чогось. Наприклад, грань є частиною многогранника, ребро — частиною грані, вершина — частиною ребра. Інша ієрархія — бути узагальненням або конкретизацією.&lt;/p&gt;
&lt;p&gt;Наприклад, овал і многокутник служать конкретизацією плоскої фігури, коло — конкретизацією овалу, чотирикутник — конкретизацією многокутника, подальшими конкретизаціями чотирикутника можуть служити паралелограм, прямокутник, ромб, квадрат. Той факт, що квадрат, ромб, прямокутник є повноцінними паралелограмами дозволяє їм користуватися усіма програмними засобами, створеними для паралелограма, паралелограм в свою чергу є повноцінним чотирикутником і так далі. Цей принцип, відомий під назвою &lt;code&gt;reusable&lt;/code&gt; — знову вживаний — став одним з найважливіших досягнень об&amp;rsquo;єктно-орієнтованої парадигми. Знову вживаючи вже існуюче програмне забезпечення в більш конкретизованих умовах, ми дописуємо лише ту його частину, яка стосується особливостей наявної конкретизації. Цей принцип дістав назву &lt;code&gt;programming by difference&lt;/code&gt; або дописування програм.&lt;/p&gt;
&lt;p&gt;І, нарешті, об&amp;rsquo;єктно-орієнтована парадигма доводить до логічної завершеності принцип моделювання реального світу, а точніше тієї його частини, абстракцією якої служить програма. При цьому підході програма складається з об&amp;rsquo;єктів, що відповідають реальним поняттям або предметам. Виконання програми зводиться до взаємодії об&amp;rsquo;єктів, яке служить абстракцією реальної взаємодії їх прототипів. Все це разом забезпечило об&amp;rsquo;єктно-орієнтованому підходу беззаперечне лідерство в галузі розробки програм.&lt;/p&gt;
&lt;p&gt;Сьогодні в сімействі мов об&amp;rsquo;єктно-орієнтованого програмування три найбільш відомих представника: &lt;code&gt;С++&lt;/code&gt;, &lt;code&gt;Java&lt;/code&gt; і &lt;code&gt;C#&lt;/code&gt; ( читається Сі шарп ). &lt;code&gt;С++&lt;/code&gt; і сьогодні залишається визнаним лідерів в розробці великих і складних програмних систем. &lt;code&gt;Java&lt;/code&gt; і &lt;code&gt;C#&lt;/code&gt; виросли з &lt;code&gt;С++&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter13&#34;&gt;1.3	Еволюція мови програмування C#&lt;/h2&gt;
&lt;h3 id=&#34;chapter131&#34;&gt;1.3.1	Створення ООП та C++&lt;/h3&gt;
&lt;p&gt;До кінця 1970-х розмір проектів став наближатися до критичного, при перевищенні якого методика структурного програмування і мова &lt;code&gt;С&lt;/code&gt; &amp;ldquo;опускали руки&amp;rdquo;. Тому стали з&amp;rsquo;являтися нові підходи до програмування, що дозволяють вирішити цю проблему. Один з них отримав назву об&amp;rsquo;єктно-орієнтованого програмування (ООП). Використовуючи ООП, програміст міг справлятися з програмами набагато більшого розміру, ніж раніше. Але проблема полягала у тому, що &lt;code&gt;С&lt;/code&gt;, найпопулярніша на той час мова, не підтримувала ООП. Бажання працювати з об&amp;rsquo;єктно-орієнтованою версією мови С врешті-решт і привело до створення &lt;code&gt;C++&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Мова &lt;code&gt;C++&lt;/code&gt; була розроблена Бьорном Страуструпом (&lt;code&gt;Bjarne Stroustrup&lt;/code&gt;) в компанії Bell Laboratories (Нью-Джерсі), роком створення вважається 1979-й. Спочатку творець нової мови назвав її &amp;ldquo;С з класами&amp;rdquo;, але в 1983 році це ім&amp;rsquo;я було змінене на &lt;code&gt;C++&lt;/code&gt;. &lt;code&gt;C++&lt;/code&gt; повністю включає елементи мови &lt;code&gt;С&lt;/code&gt;. Таким чином, С можна вважати фундаментом, на якому побудований &lt;code&gt;C++&lt;/code&gt;. Більшість доповнень, які Страуструп вніс до &lt;code&gt;С&lt;/code&gt;, були призначені для підтримки об&amp;rsquo;єктно-орієнтованого програмування. По суті, C++ - це об&amp;rsquo;єктно-орієнтована версія мови С. Створюючи &lt;code&gt;С++&lt;/code&gt; на основі С Страуструп забезпечив плавний перехід багатьох програмістів на ООП.&lt;/p&gt;
&lt;p&gt;Замість необхідності вивчати абсолютно нову мову, &lt;code&gt;С&lt;/code&gt;-програмістові досить було освоїти лише нові засоби, що дозволяють використовувати переваги об&amp;rsquo;єктно-орієнтованої методики.&lt;/p&gt;
&lt;p&gt;Впродовж 1980-х років &lt;code&gt;C++&lt;/code&gt; інтенсивно розвивалася і на початок 1990-х вже була готовп для широкого використання. Зростання її популярності носило вибухоподібний характер, і до кінця цього десятиліття вона стала найбільш використовуваною мовою програмування. В наші дні мова &lt;code&gt;C++&lt;/code&gt; як і раніше має безперечну перевагу при розробці високопродуктивних програм системного рівня.&lt;/p&gt;
&lt;h3 id=&#34;chapter132&#34;&gt;1.3.2	Internet та поява мови Java&lt;/h3&gt;
&lt;p&gt;Наступним рівнем на сходах прогресу мов програмування стала мова Java, яка спочатку називалася Oak (у перекладі з англ. &amp;ldquo;дуб&amp;rdquo;). Робота над її створенням почалася в 1991 році в компанії Sun Microsystems. Основною рушійною силою розробки Java був Джеймс Гослінг (James Gosling).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt; - це структурна об&amp;rsquo;єктно-орієнтована мова програмування, синтаксис і принципи якої &amp;ldquo;родом&amp;rdquo; з &lt;code&gt;C++&lt;/code&gt;. Своїми новаторськими аспектами &lt;code&gt;Java&lt;/code&gt; зобов&amp;rsquo;язана не стільки прогресу в мистецтві програмування (хоча і це мало місце), скільки змінам в комп&amp;rsquo;ютерному середовищі. Ще до настання ери Internet більшість програм писалися, компілювалися і призначалися для виконання з використанням певного процесора і під управлінням конкретної операційної системи. Не дивлячись на те що програмісти завжди прагнули робити свої програми так, щоб їх можна було застосовувати неодноразово, можливість легко переносити програму з одного середовища в іншу не була ще досягнута, до того ж проблема переносимості постійно вікладалися, вирішувалися ж більш насущні проблеми. Проте з появою всесвітньої мережі Internet, в якій виявилися зв&amp;rsquo;язаними різні типи процесорів і операційних систем, стара проблема портативності заявила про себе вже в повний голос. Для її вирішення знадобилася нова мова програмування, і нею стала &lt;code&gt;Java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Цікаво відзначити, що, хоча єдиним найбільш важливим аспектом &lt;code&gt;Java&lt;/code&gt; (і причиною швидкого визнання) є можливість створювати на ній кросплатформений (сумісний з декількома операційними середовищами) переносимий програмний код, вихідним імпульсом для виникнення &lt;code&gt;Java&lt;/code&gt; стала не мережа Internet, а наполеглива потреба у незалежній від платформи мові, яку можна було б використовувати в процесі створення програмного забезпечення для вбудованих контролерів. У 1993 році стало очевидним, що проблеми міжплатформеної переносимості, що чітко виявилися при створенні коду в вбудованих контролерів, також виявилися актуальними при спробі написати код для Internet. Адже Internet - це величезне комп&amp;rsquo;ютерне середовище, в якому &amp;ldquo;мешкає&amp;rdquo; безліч комп&amp;rsquo;ютерів різних типів. І виявилось, що одні і ті ж методи вирішення проблеми переносимості в малих масштабах можна успішно застосувати і до набагато більших, тобто в Internet У Java переносимість досягається за допомогою перетворення вихідного коду програми в проміжний код, що іменується байт-кодом), тобто машинно-незалежний код, що генерується Java-компілятором. Байт-код виконується віртуальною машиною &lt;code&gt;Java&lt;/code&gt; (&lt;code&gt;Java Virtual Machine - JVM&lt;/code&gt;) - спеціальною операційною системою. Отже, Java-программа могла б працювати в будь-якому середовищі, де доступна JVM. А оскільки JVM відносно проста для реалізації, вона швидко стала доступною для великої кількості середовищ.&lt;/p&gt;
&lt;p&gt;Використання Java-програмами байт-коду радикально відрізняло їх від &lt;code&gt;С&lt;/code&gt;- і &lt;code&gt;С++&lt;/code&gt;-програм. Якщо &lt;code&gt;С/С++&lt;/code&gt;-программу потрібно виконати в іншій системі, її необхідно перекомпілювати в машинний код, відповідний цьому середовищу. Отже, аби створити С/С++-програму, призначену для виконання в різних середовищах, необхідно мати декілька різних виконуваних (машинних) версій цієї програми. Це було непрактично і дорого. І навпаки, використання для виконання &lt;code&gt;Java&lt;/code&gt;-программ проміжної мови було елегантним і рентабельним рішенням. Саме це рішення було адаптоване для мови &lt;code&gt;С#&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter133&#34;&gt;1.3.3.	Виникнення C#&lt;/h3&gt;
&lt;p&gt;Розробники &lt;code&gt;Java&lt;/code&gt; успішно вирішили багато проблем, пов&amp;rsquo;язаних з переносимістю в середовищі Internet, але далеко не всі. Одна з них - міжмовна можливість взаємодії (&lt;code&gt;cross-language interoperability&lt;/code&gt;) програмних і апаратних виробів різних постачальників, або багатомовне програмування (mixed-language programming). В разі вирішення цієї проблеми програми, написані на різних мовах, могли б успішно працювати одна з іншою. Така взаємодія необхідна для створення великих систем з розподіленим програмним забезпеченням (ПЗ), а також для програмування компонентів ПЗ, оскільки найціннішим є компонент, який можна використовувати у широкому діапазоні комп&amp;rsquo;ютерних мов і операційних середовищ.&lt;/p&gt;
&lt;p&gt;Крім того, в &lt;code&gt;Java&lt;/code&gt; не досягнута повна інтеграція з платформою &lt;code&gt;Windows&lt;/code&gt;. Хоча &lt;code&gt;Java&lt;/code&gt;-програми можуть виконуватися в середовищі Windows (за умови встанолення віртуальної машини &lt;code&gt;Java&lt;/code&gt;), &lt;code&gt;Java&lt;/code&gt; і &lt;code&gt;Windows&lt;/code&gt; не є міцно зв&amp;rsquo;язаними середовищами. А оскільки Windows - це найбільш широко використовувана операційна система в світі, відсутність прямої підтримки &lt;code&gt;Windows&lt;/code&gt; - серйозний недолік &lt;code&gt;Java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Аби задовольнити ці потреби, &lt;code&gt;Microsoft&lt;/code&gt; розробила мову &lt;code&gt;С#&lt;/code&gt;, &lt;code&gt;С#&lt;/code&gt; була створена в кінці 1990-х років і стала частиною спільної &lt;code&gt;.NET&lt;/code&gt;-стратегії &lt;code&gt;Microsoft&lt;/code&gt;. Вперше вона побачила світло як альфа-версія в середині 2000 року. Головним архітектором С# був Андерс Хейлсберг (&lt;code&gt;Anders Hejlsberg&lt;/code&gt;) - один з провідних фахівців в області мов програмування, що отримав визнання у всьому світі. Досить сказати, що в 1980-х він був автором успішного продукту &lt;code&gt;Turbo Pascal&lt;/code&gt;, витончена реалізація якого встановила стандарт для всіх майбутніх компіляторів.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
graph TD;
  C--&gt;C++;
  C++--&gt;Java;
  C++--&gt;C#;
&lt;/div&gt;
&lt;center&gt;&lt;i&gt;Рис. 1.1. Розвиток мов програмування C/C++/Java/C#&lt;/i&gt;&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;&lt;code&gt;С#&lt;/code&gt; безпосередньо пов&amp;rsquo;язаний із &lt;code&gt;С&lt;/code&gt;, &lt;code&gt;C++&lt;/code&gt; і &lt;code&gt;Java&lt;/code&gt;. І це не випадково. Ці три мови - найпопулярніші і найулюбленіші мови програмування в світі. Більш того, майже всі професійні програмісти сьогодні знають &lt;code&gt;С&lt;/code&gt; і &lt;code&gt;C++&lt;/code&gt;, і більшість знає &lt;code&gt;Java&lt;/code&gt;. Оскільки &lt;code&gt;С#&lt;/code&gt; побудований на міцному, зрозумілому фундаменті, то перехід від цих &amp;ldquo;фундаментальних&amp;rdquo; мов до &amp;ldquo;надбудови&amp;rdquo; відбувається без особливих зусиль з боку програмістів. Оскільки Андерс Хейлсберг не збирався винаходити нову мову, він зосередився на введенні удосконалень.&lt;/p&gt;
&lt;p&gt;Прамовою &lt;code&gt;С#&lt;/code&gt; є мова &lt;code&gt;С&lt;/code&gt;. Від С мова С# успадкувала синтаксис, багато ключових слів і оператори. Крім того, &lt;code&gt;С#&lt;/code&gt; побудований на покращеній об&amp;rsquo;єктній моделі, визначеній в &lt;code&gt;C++&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;С#&lt;/code&gt; і &lt;code&gt;Java&lt;/code&gt; зв&amp;rsquo;язані між собою дещо складніше. Як згадувалося вищим, Java також є нащадком С і C++. У неї теж загальний з нею синтаксис і схожа об&amp;rsquo;єктна модель. Подібно &lt;code&gt;Java&lt;/code&gt; &lt;code&gt;C#&lt;/code&gt; призначений для створення переносимого коду. Проте &lt;code&gt;С#&lt;/code&gt; - не нащадок &lt;code&gt;Java&lt;/code&gt;. Швидше &lt;code&gt;С#&lt;/code&gt; і &lt;code&gt;Java&lt;/code&gt; можна вважати двоюрідними братами, що мають загальних предків, але що отримали від батьків різні набори &amp;ldquo;генів&amp;rdquo;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter14&#34;&gt;1.4	.NET Framework: поняття та структура&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Платформа&lt;/strong&gt; — у контексті інформаційних технологій - середовище, що забезпечує виконання програмного коду. Платформа визначається характеристиками процесорів, особливостями операційних систем.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Framework&lt;/code&gt;&lt;/strong&gt; — це інфраструктура середовища виконання програм, щось, що визначає особливості розробки і виконання програмного коду на даній платформі. Передбачає засоби організації взаємодії з операційною системою і прикладними програмами, методи доступу до баз даних, засоби підтримки розподілених (мережевих) додатків, мови програмування, безліч базових класів, уніфіковані інтерфейси користувача, парадигми програмування.
&lt;code&gt;Microsoft .NET&lt;/code&gt; — платформа.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.NET Framework&lt;/code&gt;&lt;/strong&gt; — інфраструктура платформи Microsoft .NET. Включає наступні основні компоненти: &lt;code&gt;Common Language Runtime&lt;/code&gt; (&lt;code&gt;CLR&lt;/code&gt;) і &lt;code&gt;.NET Framework Class Library&lt;/code&gt; (&lt;code&gt;.NET FCL&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CLS&lt;/code&gt; (&lt;code&gt;Common Language Specification&lt;/code&gt;)&lt;/strong&gt; — загальна специфікація мов програмування. Це набір конструкцій і обмежень, які є інструкцією для розробників бібліотек і компіляторів в середовищі &lt;code&gt;.NET Framework&lt;/code&gt;. Бібліотеки, побудовані відповідно до &lt;code&gt;CLS&lt;/code&gt;, можуть бути використані у будь-якій мові програмування, що підтримує &lt;code&gt;CLS&lt;/code&gt;.
Мови, відповідні &lt;code&gt;CLS&lt;/code&gt; (до їх числа відносяться мови &lt;code&gt;Visual C#&lt;/code&gt;, &lt;code&gt;Visual Basic&lt;/code&gt;, &lt;code&gt;Visual C++&lt;/code&gt;), можуть інтегруватися один з одним. &lt;code&gt;CLS&lt;/code&gt; - це основа міжмовної взаємодії в рамках платформи &lt;code&gt;Microsoft .NET&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CLR&lt;/code&gt; (&lt;code&gt;Common Language Runtime&lt;/code&gt;)&lt;/strong&gt; — Середовище Часу Виконання або Віртуальна Машина. Забезпечує виконання збірки. Основний компонент &lt;code&gt;.NET Framework&lt;/code&gt;. Під Віртуальною Машиною розуміють абстракцію інкапсульованої (відособленої) керованої операційної системи високого рівня, яка забезпечує виконання (керованого) програмного коду.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Керований код&lt;/strong&gt; — програмний код, який під час виконання здатний використовувати служби, що надаються &lt;code&gt;CLR&lt;/code&gt;. Відповідно, некерований код подібною здатністю не володіє.&lt;/p&gt;
&lt;p&gt;Тобто, &lt;code&gt;CLR&lt;/code&gt; - це набір служб, необхідних для виконання керованого коду. Сама &lt;code&gt;CLR&lt;/code&gt; складається з двох головних компонентів: ядра (&lt;code&gt;mscoree.dll&lt;/code&gt;) і бібліотеки базових класів (&lt;code&gt;mscorlib.dll&lt;/code&gt;). Наявність цих файлів на диску - ознака того, що на комп&amp;rsquo;ютері, принаймні, була зроблена спроба встановлення платформи &lt;code&gt;.NET&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;FCL&lt;/code&gt; (&lt;code&gt;.NET Framework Class Library&lt;/code&gt;)&lt;/strong&gt; — відповідна &lt;code&gt;CLS&lt;/code&gt;-спеціфікаціії об&amp;rsquo;єктно-орієнтована бібліотека класів, інтерфейсів і системи типів (типів-значень), які включаються до складу платформи Microsoft &lt;code&gt;.NET&lt;/code&gt;. Ця бібліотека забезпечує доступ до функціональних можливостей системи і призначена служити основою при розробці &lt;code&gt;.NET&lt;/code&gt;-додатків, компонент, елементів управління.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.NET&lt;/code&gt; бібліотека класів є другим компонентом &lt;code&gt;CLR&lt;/code&gt;. &lt;code&gt;.NET FCL&lt;/code&gt; можуть використовувати усі&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.NET&lt;/code&gt;-додатки, незалежно від призначення архітектури використовуваного при розробці мови програмування, і зокрема:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;вбудовані (елементарні) типи, представлені у вигляді класів (на платформі .NET все побудовано на структурах або класах);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;класи для розробки графічного користувацького інтерфейсу (&lt;code&gt;Windows Forms&lt;/code&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;класи для розробки &lt;code&gt;web&lt;/code&gt;-додатків і &lt;code&gt;web&lt;/code&gt;-служб на основі технології &lt;code&gt;ASP.NET&lt;/code&gt; (&lt;code&gt;Web Forms&lt;/code&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;класи для розробки &lt;code&gt;XML&lt;/code&gt; і Internet-протоколів (&lt;code&gt;FTP&lt;/code&gt;, &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;SMTP&lt;/code&gt;, &lt;code&gt;SOAP&lt;/code&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;класи для розробки додатків, що працюють з базами даних (&lt;code&gt;ADO .NET&lt;/code&gt;) і багато що інших.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.NET&lt;/code&gt;-застосування&lt;/strong&gt; — програма, розроблена для виконання на платформі &lt;code&gt;Microsoft .NET&lt;/code&gt;. Реалізується на мовах програмування, відповідних &lt;code&gt;CLS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;MSIL&lt;/code&gt; (&lt;code&gt;Microsoft Intermediate Language&lt;/code&gt;)&lt;/strong&gt; — проміжна мова платформи &lt;code&gt;Microsoft .NET&lt;/code&gt;. Вихідні тексти програм для &lt;code&gt;.NET&lt;/code&gt;-додатків пишуться на мовах програмування, відповідних специфікації &lt;code&gt;CLS&lt;/code&gt;. Для таких мов може бути побудований перетворювач в &lt;code&gt;MSIL&lt;/code&gt;. Таким чином, програми на цих мовах можуть транслюватися в проміжний код на &lt;code&gt;MSIL&lt;/code&gt;. Завдяки відповідності &lt;code&gt;CLS&lt;/code&gt;, в результаті трансляції програмного коду, написаного на різних мовах, виходить сумісний &lt;code&gt;IL&lt;/code&gt;-код.&lt;/p&gt;
&lt;p&gt;Схема виконання .NET додатків у середовищі CLR:&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-12-процес-запуску-net-програми&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-1-dotnet-code-run.svg&#34; data-caption=&#34;1.2. Процес запуску .NET-програми&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-1-dotnet-code-run.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    1.2. Процес запуску .NET-програми
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Усі блок-схеми створено у &lt;em&gt;draw.io&lt;/em&gt;.&lt;br&gt; Файли можна знайти &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/blob/master/diagrams&#34;&gt;у github репозиторії курсу&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;У середовищі &lt;code&gt;CLR&lt;/code&gt; допускається спільна робота і взаємодія компонентів програмного забезпечення, реалізованих на різних мовах програмування. CLR бере на себе вирішення багатьох проблем, які традиційно знаходилися в зоні особливої уваги розробників програмного забезпечення.&lt;/p&gt;
&lt;p&gt;До функцій, виконуваних &lt;code&gt;CLR&lt;/code&gt;, відносяться:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Перевірка і динамічна (&lt;code&gt;JIT&lt;/code&gt;) компіляція &lt;code&gt;MSIL&lt;/code&gt;-коду у команди процесора.&lt;/li&gt;
&lt;li&gt;Управління пам&amp;rsquo;яттю, процесами і потоками.&lt;/li&gt;
&lt;li&gt;Організація взаємодії процесів.&lt;/li&gt;
&lt;li&gt;Вирішення проблем безпеки (в рамках безпеки, що існує в системі політики).&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter1c&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Дати визначення поняття алгоритм?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дати визначення поняття програма?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дати визначення поняття задача?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дати визначення поняття програмне забезпечення?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дати визначення поняття розробка програмного забезпечення?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Яка відмінність між програмою та програмним забезпеченням?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter1s&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;!--
---


  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
## Задачі
--&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter1a&#34;&gt;Додаткові матеріали для завнатаження &lt;/h2&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 2. Основи алгоритмізації</title>
      <link>/courses/csharp-basics/lecture2/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture2/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter21&#34;&gt;2.1.	Поняття та характеристики алгоритмів&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter22&#34;&gt;2.2. Побудова алгоритмів з використанням блок-схем &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter23&#34;&gt;2.3.	Ствоерення блок-схем з використанням Diagramm Designer &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter24&#34;&gt;2.4.	Ствоерення блок-схем з використанням draw.io &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter2c&#34;&gt;Контрольні запитання &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter2s&#34;&gt;Список використаних джерел &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter2a&#34;&gt;Додаткові матеріали для завнатаження &lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter21&#34;&gt;2.1.	Поняття та характеристики алгоритмів&lt;/h2&gt;
&lt;p&gt;Слово алгоритм походить від імені перського вченого, астронома та математика Аль-Хорезмі. Близько 825 до н. е. він написав трактат, в якому описав придуману в Індії позиційну десяткову систему числення. В першій половині XII століття книжка потрапила до Європи в перекладі латинською мовою під назвою Algoritmi de numero Indorum. Вважається, що перше слово в перекладі відповідає невдалій латинізації імені Аль-Хорезмі, а назва перекладу звучить як «Алгорітмі про індійську лічбу».&lt;/p&gt;
&lt;p&gt;Перший алгоритм, призначений для виконання на автоматичному обчислювальному пристрої (комп&amp;rsquo;ютері), описала Ада Лавлейс в 1843 році. Алгоритм мав обчислювати числа Бернуллі й працювати на аналітичній машині Беббіджа. Цей алгоритм вважається першою комп&amp;rsquo;ютерною програмою, а його розробниця, Ада Лавлейс — першим програмістом.&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-21-баронеса-ада-лавлейс-яку-вважають-першим-програмістом-джерело-wikipedia&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/334px-Ada_Lovelace_portrait.jpg&#34; data-caption=&#34;Рис. 2.1. Баронеса Ада Лавлейс, яку вважають першим програмістом. Джерело: Wikipedia&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/334px-Ada_Lovelace_portrait.jpg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.1. Баронеса Ада Лавлейс, яку вважають першим програмістом. Джерело: Wikipedia
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Розглянемо визначення поняття алгоритм.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Алгоритм&lt;/strong&gt; являє собою послідовність розпоряджень виконавцю. Виконавець повинен неухильно виконувати ці розпорядження. Число таких розпоряджень не є обов&amp;rsquo;язковим: воно може складати кілька тисяч, мільйонів і навіть трильйонів, але воно не може бути нескінченним. І коли виконавець виконає всі розпорядження, задача, для якої був створений алгоритм, буде вирішена.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Алгоритм&lt;/strong&gt; — система правил виконання обчислювального процесу, що обов&amp;rsquo;язково приводить до розв&amp;rsquo;язання певного класу задач після скінченного числа операцій. При написанні комп&amp;rsquo;ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми.&lt;/p&gt;
&lt;p&gt;Кожен алгоритм є списком точно визначених інструкцій для розв&amp;rsquo;язання задачі. Починаючи з початкового стану, інструкції алгоритму описують процес обчислення, які відбуваються через послідовність станів, які, зрештою, завершуються кінцевим станом. Перехід з одного стану до наступного не обов&amp;rsquo;язково детермінований — деякі алгоритми містять елементи випадковості.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Алгоритм&lt;/strong&gt; — це опис процесу вирішення того чи іншого завдання. Алгоритмом називається кінцевий набір правил, розташованих у певному логічному порядку, що дозволяє виконавцю вирішувати будь-яку конкретну задачу з деякого класу однотипних задач.&lt;/p&gt;
&lt;p&gt;Алгоритми мають ряд важливих властивостей:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;Скінченність&lt;/strong&gt;. Алгоритм має завжди завершуватись після виконання скінченної кількості кроків. Процедуру, яка має решту характеристик алгоритму, без, можливо, скінченності, називають методом обчислень.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;Дискретність&lt;/strong&gt;. Процес, що визначається алгоритмом, можна розчленувати (розділити) на окремі елементарні етапи (кроки), кожен з яких називається кроком алгоритмічного процесу чи алгоритму.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;Визначеність&lt;/strong&gt;. Кожен крок алгоритму має бути точно визначений. Дії, які необхідно здійснити, повинні бути чітко та недвозначно визначені для кожного можливого випадку.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;Вхідні дані&lt;/strong&gt;. Алгоритм має деяку кількість (можливо, нульову) вхідних даних, тобто, величин, заданих до початку його роботи або значення яких визначають під час роботи алгоритму.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;Вихідні дані&lt;/strong&gt;. Алгоритм має одне або декілька вихідних даних, тобто, величин, що мають досить визначений зв&amp;rsquo;язок із вхідними даними.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;Ефективність&lt;/strong&gt;. Алгоритм вважають ефективним, якщо всі його оператори досить прості для того, аби їх можна було точно виконати за скінченний проміжок часу з допомогою олівця та аркушу паперу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Виділяють наступні основні способи запису алгоритмів:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;вербальний&lt;/strong&gt;&lt;/em&gt; - алгоритм описується на природній мові;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;символьний&lt;/strong&gt;&lt;/em&gt; - алгоритм описується за допомогою набору символів;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;графічний&lt;/strong&gt;&lt;/em&gt; - алгоритм описується за допомогою набору графічних зображень.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Розглянемо приклад розв&amp;rsquo;язання задачі.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 1.&lt;/strong&gt; Скласти алгоритм ров’язання квадратного рівняння на комп’ютері та записати його вербальним способом (описати словами). Нагадаємо, квадратне рівняння має вигляд: $ {ax^2 + bx + c = 0} $.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Етапи розв&amp;rsquo;язання задачі:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Вводимо значення $ a $, $ b $, $ c $.&lt;/li&gt;
&lt;li&gt;Обчислюємо дискримінант за фрмулою $ d = b^2 - 4ac $.&lt;/li&gt;
&lt;li&gt;Якщо $ d &amp;gt; 0 $ обчислити корені $ x_1 $, $ x_2 $ за формулою $ x=\frac {b ± \sqrt{d}}{2a} $ та вивести їх значення на екран.
Інакше, якщо $ d = 0 $ – обчислити $ x_1=-\frac{b}{2a} $ і вивести на екран.
Інакше вивести на екран «Коренів немає».&lt;/li&gt;
&lt;li&gt;Вийти з програми.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ця ж задача на мові програмування C# має вигляд (символьний запис):&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 2.1. Розв’язання квадратного рівняння.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)
{
    //Оголошуємо змінні
    double a, b, c, d, x1, x2;

    //Вводимо значення змінних з клавіатури
    Console.WriteLine(&amp;quot;Введіть a:&amp;quot;);
    a = Convert.ToDouble(Console.ReadLine());
    Console.WriteLine(&amp;quot;Введіть b:&amp;quot;);
    b = Convert.ToDouble(Console.ReadLine());
    Console.WriteLine(&amp;quot;Введіть c:&amp;quot;);
    c = Convert.ToDouble(Console.ReadLine());

    //Знаходимо дискримінант
    d = b * b - 4 * a * c;

    if (d &amp;gt; 0)
    {
        x1 = (-b + Math.Sqrt(d)) / (2 * a);
        x2 = (-b - Math.Sqrt(d)) / (2 * a);
        Console.WriteLine(&amp;quot;x1 = {0}, x2 = {1}&amp;quot;, x1, x2);
    }
    else if (d == 0)
    {
        x1 = -b / (2 * a);
        Console.WriteLine(&amp;quot;x = {0}&amp;quot;, x1);
    }
    else
        Console.WriteLine(&amp;quot;Коренів не існує.&amp;quot;);
    //Вихід з програми
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter22&#34;&gt;2.2. Побудова алгоритмів з використанням блок-схем &lt;/h2&gt;
&lt;p&gt;Для зображення алгоритмів використовуватимемо блок-схеми, що формуються з типових блоків:&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-22-типові-блоки-для-формування-блок-схем-алгоритмів&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-algorithm-blocks-blocks.svg&#34; data-caption=&#34;Рис. 2.2. Типові блоки для формування блок-схем алгоритмів.&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-algorithm-blocks-blocks.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.2. Типові блоки для формування блок-схем алгоритмів.
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Усі блок-схеми створено у &lt;em&gt;draw.io&lt;/em&gt;.&lt;br&gt; Файли можна знайти &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/blob/master/diagrams&#34;&gt;у github репозиторії курсу&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;У теорії алгоритмів доведено, що будь-який, скільки завгодно складний алгоритм може бути складений з трьох основних алгоритмічних структур: лінійної, розгалуження і циклу, показаних, відповідно на &lt;code&gt;рис. 2.3&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-23-основні-алгоритмічні-структури&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-algorithm-blocks-structures.svg&#34; data-caption=&#34;Рис. 2.3. Основні алгоритмічні структури&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-algorithm-blocks-structures.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.3. Основні алгоритмічні структури
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Лінійна структура передбачає послідовне виконання дій, без їх повторення або пропуску деяких дій. Зазвичай програмісти прагнуть до того, аби алгоритм мав лінійну структуру.&lt;/p&gt;
&lt;p&gt;Структура &amp;ldquo;розгалуження&amp;rdquo; передбачає виконання однієї з двох груп дій залежно від виконання умови у блоці розгалуження. На рис. 3 знаком &amp;ldquo;+&amp;rdquo; показано виконання умови, а знаком &amp;ldquo;-&amp;rdquo; - його невиконання. Часто використовується неповна команда розгалуження, коли один з блоків дії відсутній.&lt;/p&gt;
&lt;p&gt;Структура &amp;ldquo;цикл&amp;rdquo; має декілька різновидів. На рис. 3 показаний цикл типу &amp;ldquo;доки&amp;rdquo; (&lt;code&gt;while&lt;/code&gt;) з передумовою. Дії всередині цього циклу повторюються доки виконується умова у блоці розгалуження, причому спочатку перевіряється умова, а потім виконується дія. Досить часто використовуються інші типи циклу, показані на &lt;code&gt;рис. 2.4&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-24-зображення-циклів-за-допомогою-блок-схем&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-algorithm-blocks-loops.svg&#34; data-caption=&#34;Рис. 2.4. Зображення циклів за допомогою блок-схем&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-algorithm-blocks-loops.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.4. Зображення циклів за допомогою блок-схем
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;У циклі з після умовою перевірка умови виходу з циклу виконується після чергової дії. Цикл &amp;ldquo;для (&lt;code&gt;for&lt;/code&gt;)&amp;rdquo; є модифікацією циклу &amp;ldquo;доки (&lt;code&gt;while&lt;/code&gt;)&amp;rdquo; для ситуації, коли заздалегідь відома кількість повторень деяких дій. Запис у блоці заголовка циклу на рис.3 показує приклад опису заголовка циклу, в якому дії повторюються стільки раз, скільки цілих значень набуває параметра циклу i від свого початкового значення 1 до кінцевого N з кроком 1. Зазвичай крок не вказується, якщо він дорівнює 1.&lt;/p&gt;
&lt;p&gt;Тепер запишемо алгоритм розв’язання задачі 1 у графічному вигляді.&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-25-блок-схема-алгоритму-знаходження-коренів-квадратного-рівняння-до-задачі-1&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task1.svg&#34; data-caption=&#34;Рис. 2.5. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №1&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task1.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.5. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №1
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Для закріплення знань по лінійних структурах та розгалуженнях побудуємо графічне відображення алгоритмів для кількох задач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 2.&lt;/strong&gt; Побудувати блок-схему алгоритму перевірки введеного числа на невід’ємність.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Розвязання задачі графічним способом:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-26-блок-схема-алгоритму-знаходження-коренів-квадратного-рівняння-до-задачі-2&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task2.svg&#34; data-caption=&#34;Рис. 2.6. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №2&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task2.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.6. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №2
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 3.&lt;/strong&gt; Побудувати блок-схему алгоритму зходження периметра та площі трикутника за формулою Герона.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Розвязання задачі графічним способом:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-27-блок-схема-алгоритму-до-задачі-3&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task3.svg&#34; data-caption=&#34;Рис. 2.7. Блок-схема алгоритму до задачі №3&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task3.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.7. Блок-схема алгоритму до задачі №3
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 4.&lt;/strong&gt; Побудувати блок-схему алгоритму порівняння двох чисел.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Розвязання задачі графічним способом:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-28-блок-схема-до-задачі-4&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task4.svg&#34; data-caption=&#34;Рис. 2.8. Блок-схема до задачі №4&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task4.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.8. Блок-схема до задачі №4
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;hr&gt;
&lt;p&gt;Для закріплення знань по циклічних структурах побудуємо графічне відображення алгоритмів для кількох задач.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 5.&lt;/strong&gt; Побудувати блок-схему алгоритму знаходження суми елементів у масиву.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-info-circle text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Введемо позначення: $ n $ – кількість елементів масиву, $ sum $ – змінна, що визначає суму, $ x_i $ – $ і $-й елемент масиву.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Розвязання задачі графічним способом:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-29-блок-схема-до-задачі-5&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task5.svg&#34; data-caption=&#34;Рис. 2.9. Блок-схема до задачі №5&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task5.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.9. Блок-схема до задачі №5
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
 &lt;/center&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 6.&lt;/strong&gt; Побудувати блок-схему алгоритму знаходження середнього значення елементів масиву.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-info-circle text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Ця задача відрізнється від попередньої лише появою нової змінної $ avg $ – середнє значення.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Розвязання задачі графічним способом:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-210-блок-схема-до-задачі-6&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task6.svg&#34; data-caption=&#34;Рис. 2.10. Блок-схема до задачі №6&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task6.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.10. Блок-схема до задачі №6
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
 &lt;/center&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-question-circle text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Задача 7.&lt;/strong&gt; Побудувати блок-схему алгоритму знаходження максимального елемента у масиві.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-info-circle text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Введемо позначення: $ max $ – максимальний елемент, $ n $ - кількість елементів у масиві, $ x_i $ – $ і $-й елемент масиву. Припускаємо що масив уже заповнений і наперед відомо кількість елементів у масиві.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;far fa-check-circle text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Розвязання задачі графічним способом:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-211-блок-схема-до-задачі-7&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task7.svg&#34; data-caption=&#34;Рис. 2.11. Блок-схема до задачі №7&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-2-tasks-task7.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.11. Блок-схема до задачі №7
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
 &lt;/center&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter23&#34;&gt;2.3.	Ствоерення блок-схем з використанням Diagramm Designer &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Diagramm Designer&lt;/strong&gt; - програмне забезпечення для побудови блок-схем, UML-діаграм, та інших зображень на основі векторної графіки. &lt;a href=&#34;https://logicnet.dk/DiagramDesigner/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fas fa-download  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити актуальну версію DiagramDesigner можна тут&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Перелік базових функцій Diagramm Designer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Налаштовувана палітра шаблонів.&lt;/li&gt;
&lt;li&gt;Перевірка правопису.&lt;/li&gt;
&lt;li&gt;Імпорт / експорт зображень &lt;code&gt;WMF&lt;/code&gt;, &lt;code&gt;EMF&lt;/code&gt;, &lt;code&gt;BMP&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt;, &lt;code&gt;PNG&lt;/code&gt;, &lt;code&gt;MNG&lt;/code&gt;, &lt;code&gt;ICO&lt;/code&gt;, &lt;code&gt;GIF&lt;/code&gt; та &lt;code&gt;PCX&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Переглядач слайд-шоу.&lt;/li&gt;
&lt;li&gt;Зручний графічний редактор для відображення математичних виразів.&lt;/li&gt;
&lt;li&gt;Калькулятор для розв&amp;rsquo;язання рівнянь.&lt;/li&gt;
&lt;li&gt;Інтеграція з &lt;code&gt;MeeSoft Image Analyzer&lt;/code&gt; для редагування растрових зображень.&lt;/li&gt;
&lt;li&gt;Мінімізація розміру файлів.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Розглянемо графічний інтерфейс продукту:&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-212-головне-вікно-програми-diagramm-designer-123&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture2/diagramm_designer_1.png&#34; data-caption=&#34;Рис. 2.12. Головне вікно програми Diagramm Designer 1.23&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/lecture2/diagramm_designer_1.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.12. Головне вікно програми Diagramm Designer 1.23
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Для створення діаграм використовуєть технологія &lt;code&gt;Drag&amp;amp;Drop&lt;/code&gt;, тобто елементи можна перетягувати на робочу область.
Приклад створення діаграми можна переглянути на відео (у онлайн версії лекції).&lt;/p&gt;
&lt;p&gt;Документ &lt;code&gt;DiagrammDesigner&lt;/code&gt; може мати кілька сторінок, переключення між сторінками за допомогою меню &lt;code&gt;Diagram&lt;/code&gt; - &lt;code&gt;Rearrange pages&lt;/code&gt; (рис. 2.13).&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-213-вибір-сторінки-у-програмі-diagramm-designer&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture2/diagramm_designer_2.png&#34; data-caption=&#34;Рис. 2.13. Вибір сторінки у програмі Diagramm Designer&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/lecture2/diagramm_designer_2.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.13. Вибір сторінки у програмі Diagramm Designer
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Для форматування тексту у межах графічних блоків (фігур) використовують наступні теги:&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-214-редагування-тексту-у-блоці-diagramm-designer&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture2/diagramm_designer_3.png&#34; data-caption=&#34;Рис. 2.14. Редагування тексту у блоці Diagramm Designer.&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/lecture2/diagramm_designer_3.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.14. Редагування тексту у блоці Diagramm Designer.
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;&lt;em&gt;Таблиця 2.1. Теги для форматування тексту у графічних блоках DiagrammDesigner&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Код&lt;/th&gt;
&lt;th&gt;Стиль&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\B…\b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Напівжирний&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\U…\u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Підкреслений&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\I…\i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Курсив&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\O…\o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Закреслений&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\H…\h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Припіднятий до верху&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\S…\s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Символьний шрифт&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Номер сторінки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\L…\l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Опущений до низу&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\C######&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Колір у HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Загловок сторінки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Кількість сторінок&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Горизонтальний розділювач&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Новий рядок&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Підказка&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Таблиця 2.2. Приклади форматування тексту у графічних блоках DiagrammDesigner&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Код з тегами&lt;/th&gt;
&lt;th&gt;Текст&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\B\ID=b\H2\h-4ac&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;$ D=b^2-4ac $&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Вводимо значення &lt;code&gt;\Ba, b, c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Вводимо значення $ a $, $ b $, $ c $&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\ID &amp;gt; 0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;$	D &amp;gt; 0 $&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Вводимо &lt;code&gt;\B\Ix\Li\i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Вводимо $ x_i $&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;З іншими можливостями програмного подукту Diagramm Designer можна ознайомитися використовуючи вбудовану довідку програми.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Підтримка даного розділу лекції у майбутньому не планується і його варто використовувати швидше для ознайомлення та розширення кругозору слухачів курсу. Рекомендую використовувати &lt;code&gt;draw.io&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter24&#34;&gt;2.4.	Ствоерення блок-схем з використанням draw.io &lt;/h2&gt;
&lt;p&gt;Варто звернути увагу, що усі діаграми для лекцій створені саме у &lt;code&gt;draw.io&lt;/code&gt; і можете завантажити їх у &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/blob/master/diagrams/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;публічному репозиторії курсу на github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;На даний момент проект є безкоштовним і розміщується за адресою &lt;a href=&#34;http://diagrams.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://diagrams.net/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Досить зручною функцією є інтеграція сервісами для зберігання файлів діаграм:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
  &lt;i class=&#34;fab fa-google-drive  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Google Drive.&lt;/li&gt;
&lt;li&gt;
  &lt;i class=&#34;fas fa-cloud  pr-1 fa-fw&#34;&gt;&lt;/i&gt; OneDrive.&lt;/li&gt;
&lt;li&gt;
  &lt;i class=&#34;fab fa-dropbox  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Dropbox.&lt;/li&gt;
&lt;li&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt; GitHub.&lt;/li&gt;
&lt;li&gt;
  &lt;i class=&#34;fab fa-gitlab  pr-1 fa-fw&#34;&gt;&lt;/i&gt; GitLab.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-215-вибір-джерела-для-збереження-drawio&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture2/draw_io_1.png&#34; data-caption=&#34;Рис. 2.15. Вибір джерела для збереження &amp;lt;code&amp;gt;draw.io&amp;lt;/code&amp;gt;&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/lecture2/draw_io_1.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.15. Вибір джерела для збереження &lt;code&gt;draw.io&lt;/code&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Графічний інтерфейс &lt;code&gt;draw.io&lt;/code&gt; є досить зручним у користуванні і дозволяє доповнити перелік доступних зображень, блоків, логотипів продуктів для створення схем будь-якого рівня складності.&lt;/p&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-216-ui-головного-вікна-програми-drawio-для-windows&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture2/draw_io_2.png&#34; data-caption=&#34;Рис. 2.16. UI головного вікна програми &amp;lt;code&amp;gt;draw.io&amp;lt;/code&amp;gt; для &amp;lt;code&amp;gt;Windows&amp;lt;/code&amp;gt;&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/lecture2/draw_io_2.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 2.16. UI головного вікна програми &lt;code&gt;draw.io&lt;/code&gt; для &lt;code&gt;Windows&lt;/code&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Досить зручною є функція збереження діаграм для публікації у веб або на паперових носіях формати файлів (png, jpeg, svg, pdf, html, xml), а також вбудовування їх у різні типи документів, що надають сервіси &lt;code&gt;Google&lt;/code&gt; та &lt;code&gt;Microsoft&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Для початку ознайомлення з сервісом &lt;code&gt;draw.io&lt;/code&gt; рекомендую переглянути коротке відео:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Z0D96ZikMkc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Джерело: &lt;a href=&#34;https://www.youtube.com/channel/UCiTtRN9b8P4CoSfpkfgEJHA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;youtube канал draw.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter2c&#34;&gt;Контрольні запитання &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Дати визначення поняття «алгоритм»?&lt;/li&gt;
&lt;li&gt;Перелічіть властивості алгоритмів.&lt;/li&gt;
&lt;li&gt;Якими способами можна представити алгоритм?&lt;/li&gt;
&lt;li&gt;Які типові блоки для формування блок-схем алгоритмів ви знаєте? Як вони зображуються графічно?&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter2s&#34;&gt;Список використаних джерел &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ada Lovelace on Wikipedia. Url: &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_Lovelace&#34;&gt;https://en.wikipedia.org/wiki/Ada_Lovelace&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DiagramDesigner. Url: &lt;a href=&#34;https://logicnet.dk/DiagramDesigner/&#34;&gt;https://logicnet.dk/DiagramDesigner/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw.IO. Url: &lt;a href=&#34;https://www.diagrams.net/&#34;&gt;https://www.diagrams.net/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--
---


  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
## Задачі
--&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter2a&#34;&gt;Додаткові матеріали для завнатаження &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 3. Основи роботи з Visual Studio та платформою .NET</title>
      <link>/courses/csharp-basics/lecture3/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture3/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#31коротка-характеристика-та-історія-розвитку-середовища-розробки-visual-studio&#34;&gt;3.1	Коротка характеристика та історія розвитку середовища розробки Visual Studio.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#контрольні-запитання&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#список-використаних-джерел&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#додаткові-матеріали-для-завнатаження&#34;&gt;Додаткові матеріали для завнатаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Розділ у процесі наповнення.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;31коротка-характеристика-та-історія-розвитку-середовища-розробки-visual-studio&#34;&gt;3.1	Коротка характеристика та історія розвитку середовища розробки Visual Studio.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Microsoft Visual Studio&lt;/code&gt;&lt;/strong&gt; - лінійка продуктів компанії Майкрософт, що включають інтегроване середовище розробки програмного забезпечення і ряд інших інструментальних засобів.&lt;/p&gt;
&lt;p&gt;Середовище розробки &lt;code&gt;Visual Studio&lt;/code&gt; представляє собою повний набір інструментів для створення як настільних додатків, так і корпоративних веб-додатків для спільної роботи груп. Використовуючи ефективні інструменти розробки &lt;code&gt;Visual Studio&lt;/code&gt;, засновані на використанні компонентів, та інші технології, можна не тільки створювати ефективно працюючі настільні додатки, але і спрощувати спільне проектування, розробку і розгортання корпоративних рішень.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Visual Studio&lt;/code&gt; включає один або декілька компонентів з наступних:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Visual Basic .NET&lt;/code&gt;, а до його появи - &lt;code&gt;Visual Basic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visual C++&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visual C#&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visual F#&lt;/code&gt; (включений у &lt;code&gt;Visual Studio 2010&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Багато варіантів поставки також включають	&lt;code&gt;Microsoft SQL Server&lt;/code&gt; або &lt;code&gt;Microsoft SQL Server Express&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;На сьогодні &lt;code&gt;Visual Studio&lt;/code&gt; уже підтримує досить велику кількість мов програмування та фреймворків не лише зі стеку &lt;code&gt;.NET&lt;/code&gt;-технологій.&lt;/p&gt;
&lt;p&gt;Опишемо коротко найважливіші версії &lt;code&gt;IDE Visual Studio&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 97&lt;/code&gt; - перша випущена версія &lt;code&gt;Visual Studio&lt;/code&gt;, у ній вперше були зібрані разом різні засоби розробки ПЗ. Вона була випущена в двох версіях &lt;code&gt;Professional&lt;/code&gt; та &lt;code&gt;Enterprise&lt;/code&gt;. Вона включала в себе &lt;code&gt;Visual Basic 5.0&lt;/code&gt;, &lt;code&gt;Visual C++ 5.0&lt;/code&gt;, &lt;code&gt;Visual J++ 1.1&lt;/code&gt;, &lt;code&gt;Visual FoxPro 5.0&lt;/code&gt;, вперше з&amp;rsquo;явилося середовище розробки &lt;code&gt;ASP - Visual InterDev&lt;/code&gt;. &lt;code&gt;Visual Studio 97&lt;/code&gt; - була першою спробою &lt;code&gt;Microsoft&lt;/code&gt; створити єдине середовище для розробки на різних мовах програмування: &lt;code&gt;Visual C++&lt;/code&gt;, &lt;code&gt;Visual J++&lt;/code&gt;, &lt;code&gt;Visual InterDev&lt;/code&gt;, і MSDN використовували одне середовище, так зване &lt;code&gt;Developer Studio&lt;/code&gt;. &lt;code&gt;Visual Basic&lt;/code&gt; і &lt;code&gt;Visual FoxPro&lt;/code&gt; використовували окремі середовища для розробки.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio. NET&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Rainier&lt;/code&gt;; внутрішня версія 7.0) - випущена в лютому 2002 (включає &lt;code&gt;.NET Framework 1.0&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio. NET 2003&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Everett&lt;/code&gt;; внутрішня версія 7.1) - випущена в квітні 2003 (включає &lt;code&gt;.NET Framework 1.1&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 2005&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Whidbey&lt;/code&gt;; внутрішня версія 8.0) - випущена в кінці жовтня 2005, остання що офіційно працює на &lt;code&gt;Windows 2000&lt;/code&gt;, (включає &lt;code&gt;.NET Framework 2.0&lt;/code&gt;). На початку листопада 2005 також вийшла серія продуктів в редакції &lt;code&gt;Express&lt;/code&gt;: &lt;code&gt;Visual C++ 2005 Express&lt;/code&gt;, &lt;code&gt;Visual Basic 2005 Express&lt;/code&gt;, &lt;code&gt;Visual C # 2005 Express&lt;/code&gt; і ін. 19 квітня 2006 редакція &lt;code&gt;Express&lt;/code&gt; стала безкоштовною.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 2008&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Orcas&lt;/code&gt;) - випущена 19 листопада 2007, одночасно з . &lt;code&gt;NET Framework 3.5&lt;/code&gt;. Націлена на створення додатків для ОС &lt;code&gt;Windows Vista&lt;/code&gt; (але підтримує і &lt;code&gt;XP&lt;/code&gt;), &lt;code&gt;Office 2007&lt;/code&gt; та веб-додатків. Включає в себе &lt;code&gt;LINQ&lt;/code&gt;, нові версії мов &lt;code&gt;C#&lt;/code&gt; і &lt;code&gt;Visual Basic&lt;/code&gt;. До студії не увійшов &lt;code&gt;Visual J#&lt;/code&gt;. З 28 жовтня 2008 вперше доступна версія російською мовою.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 2010&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Hawaii&lt;/code&gt;, для &lt;code&gt;Ultimate&lt;/code&gt; - &lt;code&gt;Rosario&lt;/code&gt;) - випущена 12 квітня 2010 разом з &lt;code&gt;.NET Framework 4.0&lt;/code&gt;. &lt;code&gt;Visual Studio&lt;/code&gt; включає підтримку мов &lt;code&gt;C# 4.0&lt;/code&gt; і &lt;code&gt;Visual Basic. NET 10.0&lt;/code&gt;, а також мову &lt;code&gt;F#&lt;/code&gt;, яка була відсутня в попередніх версіях.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;контрольні-запитання&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;список-використаних-джерел&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ada Lovelace on Wikipedia. Url: &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_Lovelace&#34;&gt;https://en.wikipedia.org/wiki/Ada_Lovelace&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DiagramDesigner. Url: &lt;a href=&#34;https://logicnet.dk/DiagramDesigner/&#34;&gt;https://logicnet.dk/DiagramDesigner/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw.IO. Url: &lt;a href=&#34;https://www.diagrams.net/&#34;&gt;https://www.diagrams.net/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--
---


  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
## Задачі
--&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;додаткові-матеріали-для-завнатаження&#34;&gt;Додаткові матеріали для завнатаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 4. Типи даних та змінні у .NET</title>
      <link>/courses/csharp-basics/lecture4/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture4/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter41&#34;&gt;4.1. Поняття типу даних. Система типів .NET.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter42&#34;&gt;4.2. Оголошення та ініціалізація змінних. Константи&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter43&#34;&gt;4.3. Оператори та вирази&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter431&#34;&gt;4.3.1. Арифметичні оператори&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter432&#34;&gt;4.3.2. Інкремент і декремент&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter433&#34;&gt;4.3.3. Логічні оператори. Оператори відношення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter434&#34;&gt;4.3.4. Інші оператори&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter44&#34;&gt;4.4. Літерали&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter441&#34;&gt;4.4.1. Арифметичні літерали&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter442&#34;&gt;4.4.2. Логічні літерали&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter443&#34;&gt;4.4.3. Символьні літерали&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter45&#34;&gt;4.5. Приведення типів даних&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter46&#34;&gt;4.6. Робота з памяттю у С#&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter461&#34;&gt;4.6.1. &amp;ldquo;Стек&amp;rdquo; і &amp;ldquo;купа&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter462&#34;&gt;4.6.2. Типи-посилання та типи-значення&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4t&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4c&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4s&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter41&#34;&gt;4.1. Поняття типу даних. Система типів .NET.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Тип&lt;/strong&gt; &lt;em&gt;(загальне поняття)&lt;/em&gt; — це стійка сукупність елементів зі
спільними характеристиками, яку можна виділити серед множини інших
об’єктів.&lt;/p&gt;
&lt;p&gt;Тип даних як у математиці, так і у програмуванні має обмеження
на значення, що дозволяє зменшити невизначеність у записах та
уникнути частини помилок. Тип даних вказує яким чином об’єкти цього
типу можуть взаємодіяти з іншими елементами мови програмування або
між собою (Джерело: Cardelli &amp;amp; Wegner, 1985).&lt;/p&gt;
&lt;p&gt;Системи типів у мовах програмування мають ряд властивостей
та діляться за різними класифікаціями: статичні і динамічні, строго
типізовані і не строго типізовані тощо. Також на сьогодні існують
елементи мов програмування, що перемішують дані поняття або
підміняють їх (наприклад &lt;code&gt;var&lt;/code&gt; у &lt;code&gt;C#&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Система типів &lt;code&gt;.NET&lt;/code&gt; називається &lt;strong&gt;&lt;code&gt;Common Type System&lt;/code&gt;&lt;/strong&gt; (далі &lt;code&gt;CTS&lt;/code&gt;).
CTS визначає спосіб оголошення використання та керування типами у
середовищі &lt;code&gt;CLR&lt;/code&gt;, а також є важливою частиною підтримки міжмовної
інтеграції у середовищі виконання (MSDN, n.d.).&lt;/p&gt;
&lt;p&gt;Усі типи на платформі &lt;code&gt;.NET Framework&lt;/code&gt; поділяються на типи-значення (&lt;code&gt;Value Type&lt;/code&gt;) та типи-посилання (&lt;code&gt;Rerence Type&lt;/code&gt;). Типи-значення представлені фактичними
значеннями об’єкта, тобто під час присвоєння змінної відбувається
створення нової копії об’єкта. Для типів посилань створення нової копії
не відбувається. Типи посилання вказують на «комірку пам’яті» де
розміщено значення.&lt;/p&gt;
&lt;p&gt;У спрощеному вигляді система типів .NET має такий вигляд:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; типи-значення:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;прості типи;&lt;/li&gt;
&lt;li&gt;структури;&lt;/li&gt;
&lt;li&gt;перелічувані типи;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; типи-посилання:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;класи;&lt;/li&gt;
&lt;li&gt;інтерфейси;&lt;/li&gt;
&lt;li&gt;масиви;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-41-система-типів-net&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-4-types.svg&#34; data-caption=&#34;Рис. 4.1. Система типів .NET&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-4-types.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 4.1. Система типів .NET
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Варто також згадати, що типи даних, які підтримуються
компілятором напряму і знаходяться у &lt;code&gt;.NET Framework Class Library&lt;/code&gt;
(&lt;code&gt;FCL&lt;/code&gt;) називаються примітивними. Оскільки типи повинні бути
універсальними між різними мовами, то розрізняються &lt;code&gt;FCL&lt;/code&gt; типи та типи
конкретної мови програмування (Також варто відмітити, що існує загальномовна специфікація типів (&lt;code&gt;Common Language Specification&lt;/code&gt;), проте відповідність
їй не обов’язкова). По суті типи конкретної мови
програмування є псевдонімами &lt;code&gt;FCL&lt;/code&gt; типів. Наприлад, &lt;code&gt;int&lt;/code&gt; у C# — це Int32
у FCL, проте записати можна обидва варіанти:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int a = 0;
Int32 b = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо примітивні типи даних C# та їх відмінності
(табл. 4.1).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.1. Примітивні типи C# та їх характеристики (Биллиг, 2005)&lt;/em&gt;&lt;/p&gt;
&lt;table class=&#34;table table-bordered&#34; style=&#34;width:100%&#34;&gt;
  &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Цілочисельні типи&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;Назва&lt;/th&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;FLC-тип&lt;/th&gt;
    &lt;th style=&#34;width: 30%&#34;&gt;Значення&lt;/th&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Розмір, біт&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sbyte &lt;/td&gt;
    &lt;td&gt;System.SByte &lt;/td&gt;
    &lt;td&gt;$$[-128;127]$$&lt;/td&gt;
    &lt;td&gt;8&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;System.Byte&lt;/td&gt;&lt;td&gt;$$[0;255]$$&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;short&lt;/td&gt;&lt;td&gt; System.Short&lt;/td&gt;&lt;td&gt;$$[-32768;32767]$$&lt;/td&gt;&lt;td&gt; 16&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ushort&lt;/td&gt;&lt;td&gt; System.UShort&lt;/td&gt;&lt;td&gt;$$[0;65535]$$&lt;/td&gt;&lt;td&gt; 16&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt; System.Int32&lt;/td&gt;&lt;td&gt;$$≈(-2*10^9;2*10^9)$$&lt;/td&gt;&lt;td&gt; 32&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;uint&lt;/td&gt;&lt;td&gt; System.UInt32&lt;/td&gt;&lt;td&gt;$$≈(0;4*10^9)$$&lt;/td&gt;&lt;td&gt; 32&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;long&lt;/td&gt;&lt;td&gt; System.Int64&lt;/td&gt;&lt;td&gt;$$≈(-9*10^{18};9*10^{18})$$&lt;/td&gt;&lt;td&gt; 64&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ulong&lt;/td&gt;&lt;td&gt; System.UInt64&lt;/td&gt;&lt;td&gt;$$≈(0;18*10^{18})$$&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Числові типи з дробовою частиною&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;Назва&lt;/th&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;FLC-тип&lt;/th&gt;
    &lt;th style=&#34;width: 30%&#34;&gt;Значення&lt;/th&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Точність, знаків після коми&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;float&lt;/td&gt;&lt;td&gt;System.Single&lt;/td&gt;&lt;td&gt;$$≈(+1.5*10^{-45}; +3.4*10^{38})$$&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;double&lt;/td&gt;&lt;td&gt;System.Double&lt;/td&gt;&lt;td&gt;$$≈(+5.0*10^{-324}; +1.7*10^{308})$$&lt;/td&gt;&lt;td&gt;15-16&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;decimal&lt;/td&gt;&lt;td&gt;System.Decimal&lt;/td&gt;&lt;td&gt;$$≈(+1.0*10^{-28}; +7.9*10^{28})$$&lt;/td&gt;&lt;td&gt;28-29&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Логічний тип&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Назва&lt;/th&gt;
    &lt;th&gt;FLC-тип&lt;/th&gt;
    &lt;th&gt;Значення&lt;/th&gt;
    &lt;th&gt;Розмір, біт&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;bool&lt;/td&gt;&lt;td&gt;System.Boolean&lt;/td&gt;&lt;td&gt;true/false&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Символи та рядки&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Назва&lt;/th&gt;
    &lt;th&gt;FLC-тип&lt;/th&gt;
    &lt;th&gt;Значення&lt;/th&gt;
    &lt;th&gt;Розмір, біт&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;char&lt;/td&gt;&lt;td&gt;System.Char&lt;/td&gt;&lt;td&gt;U+0000 - U+ffff&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;System.String&lt;/td&gt;&lt;td colspan=2&gt;Рядок символів Unicode&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Об&#39;єктний тип&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Назва&lt;/th&gt;
    &lt;th&gt;FLC-тип&lt;/th&gt;
    &lt;th colspan=2&gt;Притмітки&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;object&lt;/td&gt;&lt;td&gt;System.Object&lt;/td&gt;&lt;td colspan=2&gt;Базовий тип для усіх інших&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Розглянемо коротко структури, класи та перелічувані типи даних.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Структури.&lt;/strong&gt; Структура є першим визначеним користувачем
типом, який ми розглянемо. Схожі &lt;code&gt;UDT&lt;/code&gt; (&lt;code&gt;User Defined Types&lt;/code&gt;) є і у мовах
&lt;code&gt;Pascal&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt; тощо. По суті структури у C# є спрощеною версією класів із
мінімальними відмінностями та наслідуєть не напряму від &lt;code&gt;System.Object&lt;/code&gt;,
а від &lt;code&gt;System.ValueType&lt;/code&gt;. Структури в С# створюються за допомогою
ключового слова &lt;strong&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/strong&gt; (Лістинг 4.1).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.1. Структура &lt;code&gt;Point&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp,&#34;&gt;public struct Point
{
    // Поле структури
    public int x, y;
  
    //Параметризований конструктор
    public Point(int xPosition, int yPosition) {
        x = xPosition;
        y = yPosition;
    }
    
    //Метод структури
    public void Display() {
        System.Console.WriteLine(&amp;quot;({0}, {1})&amp;quot;, x, y);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Класи.&lt;/strong&gt; Клас є посилальним типом даних, що неявно
наслідується від &lt;code&gt;System.Object&lt;/code&gt;. У класі оголошуються поля, методи,
властивості, конструктори, події та інші елементи, що визначають його
дані та можливості. Оголошення класу відбувається із використанням
ключовго слова class (лістинг 4.2).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.2. Клас &lt;code&gt;Student&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;public class Student
{
    private int _age;
    public int GetAge() 
    {
      return _age;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Перелічувані типи.&lt;/strong&gt; Перелічуваний тип (&lt;code&gt;enum) – це програмна конструкція, що дозволяє у межах типу даних визначити альтернативні значення для базового примітивного типу. Перелічувані типи наслідують напряму &lt;/code&gt;System.Enum`. Перелічувані типи мають значні обмеження у
можливостях порівняно з класами або структурами. Оголошення
перелічуваного типу даних відбувається за допомогою ключового слова
enum (лістинг 4.3).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.3. Перелічуваний тип &lt;code&gt;Character&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public enum Character
{
    Student = 0,
    Teacher = 1,
    Dekan = 2,
    Rector = 3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо відмінності між типами-посиланнями та типами
значеннями (Albahari &amp;amp; Albahari, 2012). &lt;em&gt;Примітка. Детальніша інформація про значимі та посилальні типи даних подана у &lt;a href=&#34;#chapter46&#34;&gt;питанні 4.6&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.2. Порівняння типів-значень та типів-посилань у C#&lt;/em&gt;&lt;/p&gt;
&lt;table style=&#34;width:100%&#34;&gt;
  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;th style=&#34;width:50%&#34;&gt;&lt;center&gt;Тип-значення&lt;/center&gt;&lt;/th&gt;
  &lt;th style=&#34;width:50%&#34;&gt;&lt;center&gt;Тип-посилання&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
public &lt;b&gt;struct&lt;/b&gt; Point
{
    public int X { get;set; }
    public int Y { get;set; }
}
&lt;/pre&gt;
    &lt;/td&gt;
        &lt;td&gt;
&lt;pre&gt;
public &lt;b&gt;class&lt;/b&gt; Point
{
    public int X { get;set; }
    public int Y { get;set; }
}
&lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  &lt;td&gt;3&lt;/td&gt;
  &lt;td colspan=2&gt;
  &lt;pre&gt;
var p1 = new Point { X = 5, Y = 7 };
var p2 = p1;
p2.X = 10;
Console.WriteLine(&#34;p1: X = {0}&#34;, p1.X);
Console.WriteLine(&#34;p2: X = {0}&#34;, p2.X);
  &lt;/pre&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
p1: X = 5
p2: X = 10
&lt;/pre&gt;
    &lt;/td&gt;
        &lt;td&gt;
&lt;pre&gt;
p1: X = 10
p2: X = 10
&lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  &lt;td&gt;5&lt;/td&gt;
  &lt;td&gt;&lt;div class=&#34;mermaid&#34;&gt;
graph TD;
  p1--&gt;X1[X=5];
  p1--&gt;Y1[Y=7];
  p2--&gt;X2[X=10];
  p2--&gt;Y2[Y=7];
&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div class=&#34;mermaid&#34;&gt;
graph TD;
  p1--&gt;REF[object_ref];
  p2--&gt;REF[object_ref];
  REF--&gt;X3[X=10];
  REF--&gt;Y3[Y=7];
&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Як видно із табл. 4.2 тип-значення створює копію елемента у
пам’яті і працює з копією, не впливаючи на початкові дані. Тип-посилання вказує на ділянку пам’яті і під час зміни значення поля впливає на усі об’єкти, що «прив’язані» до цієї змінної.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter42&#34;&gt;4.2. Оголошення та ініціалізація змінних. Константи&lt;/h2&gt;
&lt;p&gt;Змінна у програмуванні є по суті назвою, що вказує на деякий
об’єкт у пам’яті. Також можна сказати, що змінна вказує на адресу у
пам’яті і надає доступ до значення, що знаходиться за цією адресою.&lt;/p&gt;
&lt;p&gt;Для оголошення змінної використовується запис у вигляді:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;тип ім’я_змінної;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Правила іменування змінних у C#:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ім’я змінної може починатися із латинської букви або
знаку «_».&lt;/li&gt;
&lt;li&gt;Ім’я змінної може складатися із латинських букв, цифр
або знаку «_».&lt;/li&gt;
&lt;li&gt;Якщо ім’я змінної співпадає із ключовим словом мови
програмування, то потрібне використовувати його із
знаком @ (Наприклад: &lt;code&gt;int @class = 1;&lt;/code&gt; ).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.4. Приклад оголошення змінних у C#.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a;
  float myNumber;
  double _salary;
  string name;
  bool isPresent;
  decimal discount;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Під час оголошення змінної створюється екземпляр вказаного
типу. Таким чином, можна сказати, що можливості конкретної змінної
визначаються можливостями типу даних. Наприклад, у змінну
цілочисельного типу не можна записати рядок (&lt;code&gt;string&lt;/code&gt;). Також важливо
відмітити, що у C# не можна змінити тип даних під час існування змінної.
До того як змінна буде використана у коді програми вона повинна
бути оголошеною. Компілятор перевіряє наявність оголошення змінної у
момент її використання.&lt;/p&gt;
&lt;p&gt;Будь-яка змінна до використання повинна бути ініціалізованою.
Ініціалізація змінних – процес виділення у «пам’яті» під конкретний тип
даних із записом значення. Також ініціалізацію змінних можна пояснити
як надання конкретного значення змінній (лістинг 4.5).&lt;/p&gt;
&lt;p&gt;Ініціалізацію змінної можна провести одразу під час оголошення
або у процесі виконання програми (динамічна ініціалізація). Синтаксис
ініціалізації змінної під час оголошення:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;тип ім’я_зміннної = значення;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Оператор &lt;strong&gt;&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt; у записі означає «присвоїти». «Дорівнює»
записується як &lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt; і є оператором відношення.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.5. Ініціалізація змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a = 10;
  float myNumber = 0.2;
  double _salary = 100.9;
  string name = &amp;quot;Ivan&amp;quot;;
  bool isPresent = true;
  decimal discount = 0.02;
  char c = &#39;R&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Під час оголошення двох і більше змінних однакового типу даних
списком (розділення комами) можна здійснювати вибіркове присвоєння
значень (лістинг 4.6).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.6. Оголошення та ініціалізація змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a = 10, b, c = 20;
  char d, f = &#39;F&#39;, s = &#39;3&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Динамічна ініціалізація змінних передбачає присвоєння значення
у процесі виконання програми, наприклад, за результатами обчислень
(лістинг 4.7).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.7. Динамічна ініціалізація змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  double a = 5, b = 7; //Катети
  double c; // гіпотенуза
  c = Math.Sqrt(a * a + b * b);
  Console.WriteLine(&amp;quot;Гіпотенуза дорівнює - {0:F}&amp;quot;, c);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У C# є можливість оголошення та ініціалізації констант.
&lt;code&gt;Константа&lt;/code&gt; у математиці є величиною, значення якої не
змінюється. Константа є протиставленням до змінної. У програмуванні
&lt;code&gt;константа&lt;/code&gt; – це спосіб запису інформації, зміна якої заборонена. Значення
констати повинно бути відомим у момент компіляції програми. По суті
константу потрібно ініціалізувати у момент оголошення (лістинг 4.8).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.8. Оголошення та ініціалізація констант.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  const string spec = &amp;quot;економічна кібернетика&#39;;
  const double PI = 3.14;
  const bool Truth = true;
  43 з 111
  const char _iSymbol = &#39;i&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Область видимості та час існування змінної.&lt;/strong&gt; Усі змінні до цього
часу ми оголошували у межах функції &lt;code&gt;Main()&lt;/code&gt;. Насправді змінна може
бути оголошеною у межах різних блоків програми. Блоки програми
відкремлються «фігурними» дужками (&lt;code&gt;{}&lt;/code&gt;). Блок коду визначає область
видимості та час існування змінної. За межами цього блоку змінної не
існує і доступу до неї немає. Розглянемо приклад коду (лістинг 4.9).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.9. Область видимості змінної.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)
{
   int x; // Змінна відома у межах метода Main()
   x = 10;
   if (x == 10)
   {
     // Початок нової області видимості
     int у = 20; // Змінна відома лише цьому блоку
     Console.WriteLine(&amp;quot;х та у: &amp;quot; + x + &amp;quot; &amp;quot; + у);
     x = у * 2;
   }
   // y = 100; //- помилка &amp;quot;y&amp;quot; - не існує
   Console.WriteLine(&amp;quot;х : &amp;quot; + x);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Якщо видалити коментування у рядку &lt;code&gt;y = 100&lt;/code&gt;, то компілятор
проінформує про помилку &lt;code&gt;~ «Змінна ‘y’ не існує у даному контексті»&lt;/code&gt;,
тобто вона поза областю видимості і доступу немає.&lt;/p&gt;
&lt;p&gt;Зміні створюються у момент входження у область видимості і
видаляються у момент виходу з неї. Таким чином можна зрозуміти, що
повторне входження у область видимості створює змінну із початковим
значенням повторно і не зберігає значення між викликами (лістинг 4.10).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.10. Область видимості змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int x = 10;
  
  if (x == 10) {
     x = x + 1;
     int a = x;
  }
  
  if (x == 11) {
     x = x + 1;
     int a = x;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;З прикладу лістингу 4.10. видно, що змінна a оголошена двічі,
проте в різних областях видимості. У таком випадку помилки компіляції
не буде. Отже, час існування змінної визначається областю її видимості.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter43&#34;&gt;4.3. Оператори та вирази&lt;/h2&gt;
&lt;p&gt;У С# передбачений широкий набір операторів, які дають в руки програмістові потужні важелі
управління при створенні всіляких виразів і їх обчисленні. У С# є чотири загальні класи операторів:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; арифметичні;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; порозрядні;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; логічні;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; оператори відношення.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter431&#34;&gt;4.3.1. Арифметичні оператори&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.3. Арифметичні оператори&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;th&gt;Дія&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Додавання&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Віднімання, унарний мінус&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;&lt;code&gt;*&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Множення&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;/&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Ділення&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;%&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Ділення по модулю&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Декремент&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;++&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Інкремент&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Дія С#-операторів &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; і &lt;code&gt;/&lt;/code&gt; збігається з дією аналогічних операторів в будь-якій іншій мові програмування (і в алгебрі). Їх можна застосовувати до даних будь-якого вбудованого числового типу.&lt;/p&gt;
&lt;p&gt;Перш за все хочу нагадати, що після застосування оператора ділення (&lt;code&gt;/&lt;/code&gt;) до цілого числа залишок буде відкинутий. Наприклад, результат цілочисельного ділення &lt;code&gt;10/3&lt;/code&gt; дорівнюватиме &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Залишок від ділення можна отримати за допомогою оператора ділення по модулю (%). Цей оператор працює практично так само, як в інших мовах програмування: повертає залишок від ділення без остачі. Наприклад, &lt;code&gt;10%3&lt;/code&gt; рівне &lt;code&gt;1&lt;/code&gt;. У С# оператор &lt;code&gt;%&lt;/code&gt; можна застосувати як до цілочисельних типів, так і типам з плаваючою крапкою. Наприклад, &lt;code&gt;10,0%3,0&lt;/code&gt; також рівне &lt;code&gt;1&lt;/code&gt;. (У мовах C/C++ операції ділення по модулю застосовні лише до цілочисельних типів.)&lt;/p&gt;
&lt;h3 id=&#34;chapter432&#34;&gt;4.3.2. Інкремент і декремент&lt;/h3&gt;
&lt;p&gt;Оператори інкремента (&lt;code&gt;++&lt;/code&gt;) і декремента (&lt;code&gt;--&lt;/code&gt;) збільшують і зменшують значення операнда на
одиницю, відповідно. Як буде показано нижче, ці оператори володіють спеціальними
властивостями, які роблять їх цікавими для розгляду. Отже, оператор інкремента виконує складання операнда з числом 1, а оператор декремента віднімає 1 зі свого операнда. Це означає, що інструкція&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х = х + 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;аналогічна такій інструкції:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х++&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Так само інструкція&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х = х - 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;аналогічна такій інструкції:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х--&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Оператори інкремента і декремента можуть стояти як перед своїм операндом, так і після нього.
Наприклад, інструкцію &lt;code&gt;х = х - 1;&lt;/code&gt; можна переписати у вигляді префіксної форми&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;++х; // Префіксна форма оператора інкремента
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;або у вигляді постфіксної форми:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;х++; // Постфіксна форма оператора інкремента
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У попередньому прикладі не мало значення, в якій формі був застосований оператор інкремента:
префіксній або постфіксній. Але якщо оператор інкремента або декремента використовується як
частина більшого виразу, то форма його використання має важливе значення.&lt;/p&gt;
&lt;p&gt;Якщо такий оператор застосований в префіксній формі, то С# спочатку виконає цю операцію, аби операнд набув нового значення, яке потім буде використано останньою частиною вираження. Якщо ж оператор застосований в постфіксній формі, то С# використовує у вираженні його старе значення, а потім виконає операцію, в результаті якої операнд знайде нове значення. Розглянемо наступний фрагмент коду:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;х = 10; 
int a = ++х;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Результат: a = 11;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;х = 10; 
int a = х++;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Результат: a = 10;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;chapter433&#34;&gt;4.3.3. Логічні оператори. Оператори відношення&lt;/h3&gt;
&lt;p&gt;Результат виконання операторів відношення і логічних операторів має тип &lt;code&gt;bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.4. Оператори відношення і логічні оператори&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;th&gt;Дія&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Не рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Більше&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Менше&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Більше або рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Менше або рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;І&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;|&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Або&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Виключаюче або&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;||&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Скорочене або&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Скорочене і&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;!&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Не&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;У С# на рівність або нерівність можна порівнювати (відповідно, за допомогою операторів &lt;code&gt;==&lt;/code&gt; та &lt;code&gt;!=&lt;/code&gt;) всі об&amp;rsquo;єкти. Але такі оператори порівняння, як &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; або &lt;code&gt;&amp;gt;=&lt;/code&gt;, можна застосовувати лише до типів, які підтримують відношення впорядкування. Це означає, що всі оператори відношення можна застосовувати до всіх числових типів. Проте значення типу &lt;code&gt;bool&lt;/code&gt; можна порівнювати лише на рівність або нерівність, оскільки значення &lt;code&gt;true&lt;/code&gt; і &lt;code&gt;false&lt;/code&gt; не упорядковуються. Наприклад, в С# порівняння &lt;code&gt;true &amp;gt; false&lt;/code&gt; не має сенсу.&lt;/p&gt;
&lt;p&gt;Що стосується логічних операторів, то їх операнди повинні мати тип &lt;code&gt;bool&lt;/code&gt;, і результат логічної операції завжди матиме тип &lt;code&gt;bool&lt;/code&gt;. Логічні оператори &lt;em&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;|&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;^&lt;/code&gt;&lt;/em&gt; і &lt;em&gt;&lt;code&gt;!&lt;/code&gt;&lt;/em&gt; виконують базові логічні операції &lt;code&gt;І&lt;/code&gt;, &lt;code&gt;АБО&lt;/code&gt;, &lt;code&gt;взаємовиключення&lt;/code&gt; і &lt;code&gt;НЕ&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.11. Оператори відношення та логічні оператори.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)
{
    int a = 10, b = 11;
    bool abool = true, bbool = false;

    if(a &amp;gt; b) Console.WriteLine(&amp;quot;a &amp;gt; b&amp;quot;);                             //false
    if(a &amp;lt; b) Console.WriteLine(&amp;quot;a &amp;lt; b&amp;quot;);                             //true

    if(a == b) Console.WriteLine(&amp;quot;a == b&amp;quot;);                           //false
    if(a != b) Console.WriteLine(&amp;quot;a != b&amp;quot;);                           //true
    if (abool || bbool) Console.WriteLine(&amp;quot;abool || bbool - true&amp;quot;);   //true
    if (abool &amp;amp;&amp;amp; bbool) Console.WriteLine(&amp;quot;abool &amp;amp;&amp;amp; bbool - true&amp;quot;);   //false
    if (abool ^ bbool) Console.WriteLine(&amp;quot;abool ^ bbool - true&amp;quot;);     //true
    if (!abool) Console.WriteLine(&amp;quot;!abool - true&amp;quot;);                   //false
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;chapter434&#34;&gt;4.3.4. Інші оператори&lt;/h3&gt;
&lt;p&gt;Окрім базовового набору, у C# доступний набір і інших операторів, що використовуються під час написання програм. Опишемо їх коротко у вигляді таблиць з описами.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.5. Інші оператори&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Дія&lt;/th&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Доступ до членів&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Індексація&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**[]**&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Приведення типів&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;()&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Тернарний оператор&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;?:&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Створення нового об’єкта&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Інформація про тип даних&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;is&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Управління виключеннями переповнення&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;unchecked&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Є також і інші оператори у C#. Ми розглянули лише основні, які будемо використовувати у нашому
курсі.&lt;/p&gt;
&lt;p&gt;При присворенні виразів аналогічно до алгебри враховується пріоритет операцій:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.6. Пріоритет операцій&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Пріор.&lt;/th&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;()&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;(постфікс)++&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;(постфікс)––&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;unchecked&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;!&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;~&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;(ім’я типу)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;+(унарний)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;–(унарний)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;++(префікс)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;––(префікс)&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;/&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;%&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;–&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;is&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;|&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;||&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;?:&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;–=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;|=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;^=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Оператор присвоєння має додаткові можливості.&lt;/p&gt;
&lt;p&gt;Присвоєння можна проводити наступним чином:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a, b, c; 
  int d = c = b = c = 3.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У результаті виконання коду усі змінні будуть ініціалізовані значенням &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;У &lt;code&gt;C#&lt;/code&gt;, так само як і у &lt;code&gt;С++&lt;/code&gt;, є складений оператор присвоєння. Для виразу &lt;code&gt;x = x + 10&lt;/code&gt; складений оператор матиме вигляд: &lt;code&gt;x += 10&lt;/code&gt;. Складений оператор означає додавання до поточного значення певного числа. Аналогічні операції можна застосовувати і до
інших операторів: &lt;strong&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;chapter44&#34;&gt;4.4. Літерали&lt;/h2&gt;
&lt;p&gt;У програмах на мовах високого рівня (у тому числі C#) &lt;strong&gt;літералами&lt;/strong&gt; називають послідовність
символів, що входять у алфавіт мови програмування, які забезпечують явне представлення значень, які використовуються для позначення початкових значень в оголошенні членів класів, змінних і
констант в методах класу. Розрізняються літерали &lt;code&gt;арифметичні&lt;/code&gt; (різних типів), &lt;code&gt;логічні&lt;/code&gt;, &lt;code&gt;символьні&lt;/code&gt;
(включаючи Escape-послідовності), &lt;code&gt;рядкові&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter441&#34;&gt;4.4.1. Арифметичні літерали&lt;/h3&gt;
&lt;p&gt;Арифметичні літерали кодують значення різних (арифметичних) типів. Тип арифметичного
літерала визначається наступними інтуїтивно зрозумілими зовнішніми ознаками:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;стандартним зовнішнім виглядом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Значення цілочисельного типу зазвичай кодується інтуїтивно
зрозумілою послідовністю символів $1, 2, 3, &amp;hellip; N$.&lt;/p&gt;
&lt;p&gt;Значення чисел з дробовою частиною також передбачає
стандартний вигляд (крапка-роздільник між цілою і дробовою частиною, або наукова або
експоненціальна нотація - $1.2500E+052$).&lt;/p&gt;
&lt;p&gt;Шістнадцяткове представлення цілочисельного значення кодується шістнадцятковим літералом, що складається з символів $0, &amp;hellip;, 9$, а також $&amp;lsquo;a&amp;rsquo; &amp;hellip;, &amp;lsquo;f&amp;rsquo;$, або $&amp;lsquo;A&amp;rsquo; &amp;hellip;,
&amp;lsquo;F&amp;rsquo;$ з префіксом &lt;code&gt;&#39;0x&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;власне значенням&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Так, накприклад, 32768 ніяк не може бути значенням типу &lt;code&gt;short&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;додатковим суфіксом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Суфікси &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; відповідають типові &lt;code&gt;long&lt;/code&gt;; &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;UL&lt;/code&gt; - &lt;code&gt;unsigned long&lt;/code&gt;; &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt; - &lt;code&gt;float&lt;/code&gt;; &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; -
&lt;code&gt;double&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; - &lt;code&gt;decimal&lt;/code&gt;. Значення типу &lt;code&gt;double&lt;/code&gt; кодуються також без префікса з вказанням розділювача дробової частини, наприклад, $25.0$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter442&#34;&gt;4.4.2. Логічні літерали&lt;/h3&gt;
&lt;p&gt;До логічних літералів відносяться наступні послідовності символів: &lt;code&gt;true&lt;/code&gt; і &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter443&#34;&gt;4.4.3. Символьні літерали&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Символьні літерали&lt;/strong&gt; - це взяті в одинарні лапки символи, що вводяться з клавіатури, наприклад, &lt;code&gt;&#39;X&#39;&lt;/code&gt;, &lt;code&gt;&#39;p&#39;&lt;/code&gt;, &lt;code&gt;&#39;Q&#39;&lt;/code&gt;, &lt;code&gt;&#39;7&#39;&lt;/code&gt;, а також цілочисельні значення в діапазоні від $0$ до $65535$, перед якими розташовується конструкція вигляду &lt;code&gt;(char)&lt;/code&gt; - операція явного приведення до типу &lt;code&gt;char&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Наступні взяті в одинарні лапки послідовності символів є &lt;code&gt;Escape&lt;/code&gt;-послідовностями. Ця категорія
літералів використовується для створення додаткових ефектів (дзвінок), простого форматування
інформації, що виводиться, і кодування символів при виводі і порівнянні (у виразах порівняння).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.7.Символьні Escape-послідовності&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Команда&lt;/th&gt;
&lt;th&gt;Пояснення&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\a&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Звуковий сигнал&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Повернення на одну позицію назад&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\f&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Перехід на нову сторінку&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Перехід на новий рядок&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Повернення каретки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Горизонтальна табуляція&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\v&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Вертикальна табуляція&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\0&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Нуль&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\&#39;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Одинарна лапка&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Подвійна лапка&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Зворотна коса лінія&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Рядкові літерали&lt;/strong&gt; - це послідовність символів і символьних &lt;code&gt;Escape&lt;/code&gt;-послідовностей, взятих у подвійні
лапки.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Verbatim string&lt;/code&gt;&lt;/strong&gt; - рядковий літерал, що інтерпретується компілятором так, як він записаний. &lt;code&gt;Escape&lt;/code&gt;-послідовності сприймаються строго як послідовності символів.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Verbatim string&lt;/code&gt; представляється за допомогою символу &lt;strong&gt;&lt;code&gt;@&lt;/code&gt;&lt;/strong&gt;, який розташовується безпосередньо
перед текстом, взятим в парні подвійні лапки. Представлення подвійних лапок в
&lt;code&gt;Verbatim string&lt;/code&gt; забезпечується їх дублюванням.&lt;/p&gt;
&lt;p&gt;Пара літералів (другий - Verbatim string)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  ...&amp;quot;c:\\My Documents\\sample.txt&amp;quot;...
  ...@&amp;quot;c:\My Documents\sample.txt&amp;quot;...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;мають одне і те ж значення: &lt;code&gt;c:\My Documents\sample.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Рядкові літерали є об&amp;rsquo;єктами типу &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;chapter45&#34;&gt;4.5. Приведення типів даних&lt;/h2&gt;
&lt;p&gt;Приведення типів - один з аспектів безпеки будь-якої мови програмування.&lt;/p&gt;
&lt;p&gt;Використовувані в програмі типи характеризуються власними діапазонами значень, які
визначаються властивостями типів, у тому числі і розміром області пам&amp;rsquo;яті, призначеної для
кодування значень відповідного типу. При цьому області значень різних типів перетинаються.&lt;/p&gt;
&lt;p&gt;Багато значень можна виразити більш ніж одним типом. Наприклад, значення 4 можна
представити як значення типу &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;. При цьому в програмі все повинно бути влаштовано так, щоб логіка перетворення значень одного типу до іншого 
була зрозумілою, а результати цих перетворень - передбачувані.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Інколи приведення значення до іншого типу відбувається автоматично.&lt;/em&gt; Такі перетворення
називаються &lt;strong&gt;неявними&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Але у ряді випадків перетворення вимагає додаткової уваги з боку програміста, який повинен &lt;strong&gt;явним&lt;/strong&gt;
чином вказувати необхідність перетворення, використовуючи вирази приведення типу або звертаючись до спеціальних методів перетворення, визначеним в класі &lt;code&gt;System.Convert&lt;/code&gt;, які забезпечують перетворення значення одного типу до значення іншого.&lt;/p&gt;
&lt;p&gt;Перетворення типу створює значення нового типу, еквівалентне значенню старого типу, проте при
цьому не обов&amp;rsquo;язково зберігається ідентичність (або точні значення) двох об&amp;rsquo;єктів.&lt;/p&gt;
&lt;p&gt;Розрізняють &lt;strong&gt;розширююче&lt;/strong&gt; та &lt;strong&gt;звужуюче&lt;/strong&gt; перетворення.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Розширююче перетворення&lt;/strong&gt; - значення одного типу перетвориться до значення іншого типу, яке має
такий же або більший розмір. Наприклад, значення, представлене у вигляді 32-розрядного цілого
числа із знаком, може бути перетворене в 64-розрядне ціле число із знаком. Розширене
перетворення вважається безпечним, оскільки вихідна інформація при такому перетворенні не
спотворюється.&lt;/p&gt;
&lt;p&gt;Можливість розширеного перетворення представлено у таблиці нижче.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.8. Можливість розширеного перетворення типів даних&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип, що перетворюється&lt;/th&gt;
&lt;th&gt;У який тип перетворюється&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SByte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Single&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Звужуюче перетворення&lt;/strong&gt; - значення одного типу перетвориться до значення іншого типу, яке має
менший розмір (з 64-розрядного в 32-розрядне). Таке перетворення потенційне небезпечне втратою
значення. Звужуючі перетворення можуть призводити до втрати інформації.&lt;/p&gt;
&lt;p&gt;Якщо тип, до якого здійснюється перетворення, не може правильно передати значення джерела, то результат
перетворення виявляється дорівнює константі &lt;code&gt;PositiveInfinity&lt;/code&gt; або &lt;code&gt;NegativeInfinity&lt;/code&gt;. &lt;em&gt;Примітка. Перевірити інформацію!&lt;/em&gt; При цьому значення &lt;code&gt;PositiveInfinity&lt;/code&gt; інтерпретується як результат ділення додатнього числа на нуль, а значення &lt;code&gt;NegativeInfinity&lt;/code&gt; - як результат ділення відємного числа на нуль. Якщо звужуюче перетворення
забезпечується методами класу &lt;code&gt;System.Convert&lt;/code&gt;, то втрата інформації супроводиться генерацією
виключення (про виключення пізніше).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.9. Можливість звужуючого перетворення типів даних&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип, що перетворюється&lt;/th&gt;
&lt;th&gt;У який тип перетворюється&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sbyte&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SByte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Single&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.12. Звужуюче перетворення&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main()
{
    int i = 1234567;
    short s = (short)i;
    Console.WriteLine(&amp;quot;int - {0}\n short - {1}&amp;quot;, i,s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  int - 1234567
  short - -10617
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chapter46&#34;&gt;4.6. Робота з памяттю у С#&lt;/h2&gt;
&lt;h3 id=&#34;chapter461&#34;&gt;4.6.1. &amp;ldquo;Стек&amp;rdquo; і &amp;ldquo;купа&amp;rdquo;&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Звершити розділ
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Стек&lt;/strong&gt; (&lt;code&gt;Stack&lt;/code&gt;) відноситься до області пам&amp;rsquo;яті, підтримуваної процесором, в якій зберігаються локальні змінні.
Доступ до стека у багато разів швидший, ніж до загальної області пам&amp;rsquo;яті, тому використання стека
для зберігання даних прискорює роботу вашої програми. У С# розмірні типи (наприклад, цілі
числа) розташовуються в стеку: для їх значень зарезервована область в стеку, і доступ до неї
здійснюється по назві змінної.&lt;/p&gt;
&lt;p&gt;Посилальні типи (наприклад, об&amp;rsquo;єкти) розташовуються в &lt;strong&gt;купі&lt;/strong&gt; (&lt;code&gt;Heap&lt;/code&gt;). &lt;strong&gt;Купа&lt;/strong&gt; — це оперативна пам&amp;rsquo;ять
вашого комп&amp;rsquo;ютера. Доступ до неї здійснюється повільніше, ніж до стека. Коли об&amp;rsquo;єкт
розташовується в купі, то змінна зберігає лише адресу об&amp;rsquo;єкта. Ця адреса зберігається в стеку. За адресою програма має доступ до самого об&amp;rsquo;єкту, всі дані якого зберігаються в загальній пам&amp;rsquo;яті (купі).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;«Збиральник сміття»&lt;/strong&gt; (&lt;code&gt;Garbage Collector&lt;/code&gt;) знищує об&amp;rsquo;єкти, розташовані в стеку, кожен раз, коли
відповідна змінна виходить за область видимості. Таким чином, якщо ви оголошуєте локальну
змінну в межах функції, то об&amp;rsquo;єкт буде помічений як об&amp;rsquo;єкт для «збирання сміття». І він буде
видалений з пам&amp;rsquo;яті після завершення роботи функції. Об&amp;rsquo;єкти у купі теж очищаються
збиральником сміття, після того, як кінцеве посилання на них буде знищено.&lt;/p&gt;
&lt;h3 id=&#34;chapter462&#34;&gt;4.6.2. Типи-посилання та типи-значення&lt;/h3&gt;
&lt;p&gt;Усі типи даних у C# поділяються на &lt;strong&gt;значимі&lt;/strong&gt; (&lt;code&gt;ValueType&lt;/code&gt;) та &lt;strong&gt;типи-посилання&lt;/strong&gt; (&lt;code&gt;ReferenceType&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Значимі типи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;містять у собі об’єкти даних;&lt;/li&gt;
&lt;li&gt;не можуть бути пустими.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Типи-посилання:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;містять у собі посилання на об’єкт даних;&lt;/li&gt;
&lt;li&gt;можуть бути пустими (null).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Які типи даних відносяться до значимих, а які до типів-посилань було розглянуто у &lt;a href=&#34;#chapter41&#34;&gt;питанні 4.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Запишемо простий приклад:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int a = 1000;
int b = a;
b = 2000;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Логічно, що після виконання цього коду &lt;code&gt;a = 1000&lt;/code&gt;, &lt;code&gt;b = 2000&lt;/code&gt; - це принцип роботи значимих типів - у
змінну копіюється значення і не привязується до змінної з якої воно було взяте.&lt;/p&gt;
&lt;p&gt;Тепер давайте створимо просту структуру &lt;code&gt;Point&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.13. Використання структури (значимий тип).&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;struct Point
{
    public int x;
    public int y;
} 

static void Main(string[] args)
{
    Point point1 = new Point();
    point1.x = 111;
    point1.y = 111;

    //Виведемо на екран змінну point1
    Console.WriteLine(&amp;quot;point1.x = {0}; point1.y = {1}&amp;quot;, point1.x, point1.y);

    // Створимо змінну point2
    Point point2 = point1;

    //Виведемо на екран змінну point2
    Console.WriteLine(&amp;quot;point2.x = {0}; point2.y = {1}&amp;quot;, point2.x, point2.y);

    Console.WriteLine(&amp;quot;\t---- Change point 2-----&amp;quot;);
    //Змінимо значення параметрів у point2
    point2.x = 777;
    point2.y = 777;
    //Виведемо point1 та point2
    Console.WriteLine(&amp;quot;point1.x = {0}; point1.y = {1}&amp;quot;, point1.x, point1.y);
    Console.WriteLine(&amp;quot;point2.x = {0}; point2.y = {1}&amp;quot;, point2.x, point2.y);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання коду:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;point1.x = 111; point1.y = 111
point2.x = 111; point2.y = 111
        ---- Change point 2-----
point1.x = 111; point1.y = 111
point2.x = 777; point2.y = 777
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Як бачимо після зміни значень х та у для змінної &lt;code&gt;point2&lt;/code&gt; значення змінної &lt;code&gt;рoint1&lt;/code&gt; не змінилося! Все
правильно, адже структура є значимим типом і тому відбувається копіювання значень при
присвоєнні.&lt;/p&gt;
&lt;p&gt;Тепер давайте замінимо структуру &lt;code&gt;Point&lt;/code&gt; на клас.&lt;/p&gt;
&lt;p&gt;Приклад 12. Використання класу (посилальний тип).

  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.14. Використання класу (посилальний тип)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Point
{
  public int x;
  public int y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання коду:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;point1.x = 111; point1.y = 111
point2.x = 111; point2.y = 111
        ---- Change point 2-----
point1.x = 777; point1.y = 777
point2.x = 777; point2.y = 777
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Як бачимо значення &lt;code&gt;point1&lt;/code&gt; змінилося. Посилальні типи даних вказують лише на ділянку пам&amp;rsquo;яті, у
якій знаходиться значення, а не на саме значення. При присвоєнні не відбувається копіювання
значень, а копіювання посилання.&lt;/p&gt;
&lt;p&gt;Для узагальнення опишемо все це у таблиці:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.10. Можливість звужуючого перетворення типів даних&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Характеристика&lt;/th&gt;
&lt;th&gt;Значимий тип&lt;/th&gt;
&lt;th&gt;Тип-посилання&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Змінна містить&lt;/td&gt;
&lt;td&gt;Значення&lt;/td&gt;
&lt;td&gt;Посилання на значення&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Змінна зберігається&lt;/td&gt;
&lt;td&gt;У стеку&lt;/td&gt;
&lt;td&gt;У кучі&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Значення по замовчуванню&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;\0&#39;&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Оператор присвоєння&lt;/td&gt;
&lt;td&gt;Копіює значення&lt;/td&gt;
&lt;td&gt;Копіює посилання&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Коментар до таблиці:&lt;/p&gt;
&lt;p&gt;Змінна в разі використання типів-значень містить власне значення, а при
використанні типів-посилань – не саме значення, а лише посилання на нього. Місцем зберігання
змінної, визначеної як тип-значення, є стек, а визначеною як посилальний тип – «купа» (останнє
необхідне для динамічного виділення і звільнення пам&amp;rsquo;яті для зберігання змінної довільним чином).&lt;/p&gt;
&lt;p&gt;Значенням, яким змінна ініціалізувалася за умовчанням (необхідність виконання цієї вимоги
диктується ідеологією безпеки Microsoft .NET) в разі визначення за допомогою типу-значення є &lt;code&gt;0&lt;/code&gt;
(для чисельного типу даних), &lt;code&gt;false&lt;/code&gt; (для логічного типу даних), &lt;code&gt;&#39;\0&#39;&lt;/code&gt; (для символьного типу даних), а в
разі визначення за допомогою типу-посилання – значення порожнього посилання &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4t&#34;&gt;Задачі&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Задача 1.&lt;/strong&gt; Виведіть на екран наступний текст:&lt;/p&gt;
&lt;pre&gt;&#34;Саме знання нікому їсти не дасть.&#34;
                      \І. Я. Франко\&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Задача 2.&lt;/strong&gt; Напишіть програму, яка обчислює суму, добуток, різницю, частку та остачу від ділення двох заданих чисел.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Напишіть програму, яка конвертує суму грн. у євро.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 4.&lt;/strong&gt; Напишіть попередню програму з умовою, що суму у грн. та курс валюти задає користувач.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Написати програму, яка обчислює квадрат введеного числа.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 6&lt;code&gt;*&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Написати програму, яка замінює місцями значення двох
числових змінних без створення третьої змінної.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 7.&lt;/strong&gt; Обрахувати ціну покупки, якщо відомо:&lt;/p&gt;
&lt;p&gt;-[x] ціну за одиницю товару;
-[x] кількість товару;
-[x] знижка (у % від загальної суми).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 8.&lt;/strong&gt; Дано катети прямокутного трикутника (вводяться з клавіатури користувачем). Визначити довжину гіпотенузи.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 9.&lt;/strong&gt; У C# немає функції, яка обчислює квадрат числа. Написати програму, яка обчислює квадрат введеного числа.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4c&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Що таке тип даних?&lt;/li&gt;
&lt;li&gt;Дайте класифікацію типів даних .NET.&lt;/li&gt;
&lt;li&gt;Що таке змінна? Який синтаксис оголошення змінної.&lt;/li&gt;
&lt;li&gt;Що таке констаната? Який синтаксис оголошення констант?&lt;/li&gt;
&lt;li&gt;Що таке область видимості змінної?&lt;/li&gt;
&lt;li&gt;Які види операторів існують у C#?&lt;/li&gt;
&lt;li&gt;Що таке інкремент та декремент? Яка різниця між постфіксним та
прфіксним записом цих операторів?&lt;/li&gt;
&lt;li&gt;Що таке літерал? Який синтаксис запису літералів для різних типів
даних.&lt;/li&gt;
&lt;li&gt;Що таке привдення типів даних?
10.Яка різниця та синтаксис явного та неявного привдення типів даних?
11.Опишіть основні характеристики значимих типів даних.
12.Опишіть основні характеристики посилальних типів даних.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4s&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 5. Оператори розгалуження та цикли</title>
      <link>/courses/csharp-basics/lecture5/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture5/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter51&#34;&gt;5.1. Оператори розгалуження&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter511&#34;&gt;5.1.1. Оператор &lt;code&gt;if-else&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter512&#34;&gt;5.1.2. Оператор &lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter513&#34;&gt;5.1.3. Тернарний оператор&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter52&#34;&gt;5.2. Використання циклів під час написання програм&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter521&#34;&gt;5.2.1. Цикл &lt;code&gt;for&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter522&#34;&gt;5.2.2.Цикли &lt;code&gt;while&lt;/code&gt; та &lt;code&gt;do-while&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter5samples&#34;&gt;Приклади розв&amp;rsquo;язання задач&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter5tasks&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter5solutions&#34;&gt;Рішення до задач&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4qustions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4sourses&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter51&#34;&gt;5.1. Оператори розгалуження&lt;/h2&gt;
&lt;p&gt;У C# для реалізації розгалужень коду використовуються
спеціальні оператори: &lt;code&gt;if-else&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter511&#34;&gt;5.1.1. Оператор &lt;code&gt;if-else&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Якщо є потреба перевірити у коді програми виконання якоїсь
умови та за її результатами перейти до одного із блоків програми
зазвичай використовують оператор &lt;code&gt;if-else&lt;/code&gt;. Загальний вигляд формату
використання оператора &lt;code&gt;if-else&lt;/code&gt; зображений у лістингу 5.1.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.1. Формат використання оператора &lt;code&gt;if-else&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  if (умова)
  {
    //інструкція
  }
  else
  {
    //інструкція
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вираз «умова» завжди повинен повертати результат у вигляді елемента логічного типу. Тобто, «умова» може бути або &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, або &lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Якщо «умова» рівна &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, то виконається інструкція (або код) записана у дужках після &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt;. Якщо ж «умова» рівна &lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, то виконається інструкція записана у дужках після &lt;strong&gt;&lt;code&gt;else&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Якщо після &lt;code&gt;if&lt;/code&gt; або &lt;code&gt;else&lt;/code&gt; тільки одна інструкція (можна ототожнити з один рядком коду), то «фігурні» дужки &lt;code&gt;{}&lt;/code&gt; не є обов’язковими.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Розглянемо приклад: написати програму, що визначає парність/непарність числа. Тобто, користувач вводить число, а програма показує на консоль у текстовому вигляді: &lt;code&gt;«парне»&lt;/code&gt; або &lt;code&gt;«непарне»&lt;/code&gt; (лістинг 5.2).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.2. Перевірка числа на парність&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a = int.Parse(Console.ReadLine());
  if(a % 2 == 0)
    Console.WriteLine(&amp;quot;парне&amp;quot;);
  else
    Console.WriteLine(&amp;quot;непарне&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Конструкції &lt;code&gt;if-else&lt;/code&gt; можуть вкладеними одна в одну без обмежень
по глибині (лістинг 5.3). Проте дуже глибокої вкладеності варто уникати,
адже це ускладнює читання та розуміння коду програми.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;if&lt;/code&gt; є обов’язковим і повинно існувати у всіх подібних
конструкціях, у той же час &lt;code&gt;else&lt;/code&gt; – необов’язковий.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.3. Приклад використання вкладених операторів if-else&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  if (умова1)
  {
    if (умова2)
    {
      //інструкція
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також конструкція &lt;code&gt;if-else&lt;/code&gt; може мати структуру дерева із багатьма
розгалуженнями. Така структура зазвичай записується як&lt;code&gt; if-else-if&lt;/code&gt;
(лістинг 5.4).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.4. Формат запису &lt;code&gt;if-else-if&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  if (умова)
  {/*код*/}
  else if (умова)
      {/*код*/}
      else if (умова)
          {/*код*/}
          else {/*код*/}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вирази обчислюються зверху-вниз. Якщо один із виразів (&lt;code&gt;«умова»&lt;/code&gt;) отримає істинний результат, то програмний код, пов&amp;rsquo;язаний із цією гілкою розгалуження виконається, а всі інші гілки будуть 
пропущені. Якщо ж не виконається жодна з умов, то буде запущено код
всередині останньої інструкції &lt;code&gt;else&lt;/code&gt; (у цьому випадку &lt;code&gt;else&lt;/code&gt; теж не
обов’язковий).&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter512&#34;&gt;5.1.2. Оператор &lt;code&gt;switch&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Наступною інструкцією для реалізації розгалуження, або
точніше вибору значення є &lt;code&gt;switch&lt;/code&gt;. &lt;code&gt;Switch&lt;/code&gt; забезпечує багатонаправлене
розгалуження і дозволяє вибрати один із варіантів із даної множини
альтернатив. Ця конструкція працює наступним чином:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Значення виразу послідовно порівнюється з константами із заданого списку.&lt;/li&gt;
&lt;li&gt;При виявленні збігу для однієї з умов порівняння виконується послідовність інструкцій, пов&amp;rsquo;язана з цією умовою.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Оператор &lt;code&gt;switch&lt;/code&gt; приймає значення цілочисельного типу (наприклад, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; тощо) або тип &lt;code&gt;string&lt;/code&gt;. Типи даних, що представляють числа з дробовою частиною не можуть бути використані даному випадку.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Switch&lt;/code&gt; складається з набору &lt;code&gt;case&lt;/code&gt; конструкцій. Кожна конструкція &lt;code&gt;case&lt;/code&gt; представлена у вигляді літерала такого ж типу даних як і значення, що приймає &lt;code&gt;switch&lt;/code&gt;. Усі &lt;code&gt;case&lt;/code&gt; конструкції у межах одного &lt;code&gt;switch&lt;/code&gt; можуть мати тільки унікальні константи. Формат оголошення продемонстровано у лістингу 5.5.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.5. Формат оголошення &lt;code&gt;switch&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  switch (значення)
  {
    case костанта1:
      //інструкція
      break;
    case костанта2:
      //інструкція;
      break;
    ...
    default:
      //інструкція
      break;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Case&lt;/code&gt;-конструкції перевіряються у порядку розміщення. Вкінці
кожного &lt;code&gt;case&lt;/code&gt; повинно бути ключове слово &lt;code&gt;break&lt;/code&gt;, що означає вихід із
&lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Також у &lt;code&gt;switch&lt;/code&gt; використовують конструкцію &lt;code&gt;default&lt;/code&gt;, яка не є
обов’язковою і виконується лише у випадку, якщо жодна із &lt;code&gt;case&lt;/code&gt;-конструкцій так і не відпрацювала.&lt;/p&gt;
&lt;p&gt;Для розуміння принципів роботи &lt;code&gt;switch&lt;/code&gt; розглянемо приклад. Написати програму, яка у залежності від введеної цифри виводить на
консоль пору року: 1 — «Зима», 2 — «Весна», 3 — «Літо», 4 — «Осінь»,
інше число — «Введіть число із діапазону [1;4]» (лістинг 5.6).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.6. Розв’язання задачі «Пори року» з використанням &lt;code&gt;switch&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Введіть номер пори року [1;4]:\t&amp;quot;);
  int res = int.Parse(Console.ReadLine());
  
  switch (res)
  {
    case 1:
      Console.WriteLine(&amp;quot;Зима&amp;quot;);
      break;
    case 2:
      Console.WriteLine(&amp;quot;Весна&amp;quot;);
      break;
   case 3:
     Console.WriteLine(&amp;quot;Літо&amp;quot;);
     break;
   case 4:
     Console.WriteLine(&amp;quot;Зима&amp;quot;);
     break;
   default:
     Console.WriteLine(&amp;quot;Введіть число від 1 до 4&amp;quot;);
     break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть номер пори року [1;4]: 2
  Весна
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У випадку, якщо потрібно, щоб одна і та ж інструкція виконувалася для кількох різних значень констант код &lt;code&gt;switch&lt;/code&gt; може мати
вигляд як на лістингу 5.7.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.7. Приклад використання &lt;code&gt;switch&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Введіть оцінку [1-12]:\t&amp;quot;);
  int res = int.Parse(Console.ReadLine());
  
  switch (res)
  {
     case 1:
     case 2:
     case 3:
       Console.WriteLine(&amp;quot;Низький рівень&amp;quot;);
       break;
     ...
     case 10:
     case 11:
     case 12:
       Console.WriteLine(&amp;quot;Високий рівень&amp;quot;);
       break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У прикладі показано виведення шкільких оцінок відповідно до 12-ти бальної системи по рівнях.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter513&#34;&gt;5.1.3. Тернарний оператор&lt;/h3&gt;
&lt;p&gt;Інколи для простої заміни оператора &lt;code&gt;if-else&lt;/code&gt; використовують тернарний оператор. Тернарний оператор отримав свою назву від
кількості задіяних виразів (3) і позначається символами &lt;code&gt;?:&lt;/code&gt;. Загальний
формат запису тернарного оператора має вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Вираз_1 ? Вираз_2 : Вираз_3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;де &lt;code&gt;Вираз_1&lt;/code&gt; — логічний вираз, за рузультатом обчислення якого визначається наступна дія, &lt;code&gt;Вираз_2&lt;/code&gt; — значення, що повертається, якщо результатом &lt;code&gt;Виразу_1&lt;/code&gt; є &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Вираз_3&lt;/code&gt; — значення, що повертається, якщо результатом &lt;code&gt;Виразу_1&lt;/code&gt; є &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Для демонстрації роботи тернарного оператора спробуємо розвязати задачу визначення модуля цілого числа. Можна було б для також задачі скористатися оператором &lt;code&gt;if-else&lt;/code&gt;, проте тернарний оператор
спрощує синтаксис запису такого коду (лістинг 5.8).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.8. Приклад використання тернарного оператора: визначення модуля числа&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Введіть ціле число:\t&amp;quot;);
  int a = Convert.ToInt32(Console.ReadLine());
  int absval = (a &amp;gt; 0) ? a : -a;
  Console.WriteLine(&amp;quot;ABS: {0}&amp;quot;, absval);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Увага! Для знаходження модуля числа у C# існує спеціальний
метод &lt;code&gt;Math.Abs(значення)&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter52&#34;&gt;5.2. Використання циклів під час написання програм&lt;/h2&gt;
&lt;p&gt;Для виконання повторюваних операцій у програмуванні
використовуються цикли. Цикл – це спеціальна конструкція мови
програмування для багаторазового виконання набору інструкцій.
У C# існують 4 типи циклів: &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter521&#34;&gt;5.2.1. Цикл &lt;code&gt;for&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Загальний синтаксис оголошення циклу &lt;code&gt;for&lt;/code&gt; має вигляд як на
лістингу 5.9. Блок «ініціалізація» використовується для оголошення
керуючих змінних циклу. У другому блоці оголошення циклу
перевіряється умова можливості продовження виконання циклу. Якщо
«умова» повератає &lt;code&gt;false&lt;/code&gt;, то виконання циклу завершується. Блок
«інструкції» довляє виконувати дії над змінними програми. Найчастіше
у цьому блоці відбуваються дії над керуючими змінними.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.9. Синтаксис оголошення циклу &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for(ініціалізація; умова; інструкції)
  {
    //код;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Усі три блоки «ініціалізація», «умова» та «інструкції» не є
обов’язковим у оголошенні циклу &lt;code&gt;for&lt;/code&gt;, проте розділювачі потрібно
записати обов’язково (лістинг 5.10).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.10. Вічний цикл &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for(;;)
  {
    //код;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад задачі: знайти суму усіх чисел від 1 до 10-ти
включно (лістинг 5.11).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.11. Приклад використання циклу &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int sum = 0;
  for (int i = 1; i &amp;lt;= 10; ++i)
    sum += i;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Якщо після &lt;code&gt;for&lt;/code&gt; тільки одна інструкція, то «фігурні» дужки &lt;code&gt;{}&lt;/code&gt; не є обов’язковими.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Для деталізації розглянемо ще один приклад програми і
розберемо його (лістинг 5.12).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.12. Приклад використання циклу &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int sum = 0;
  for (int i = 0, j = 1; sum &amp;lt; 20; i++, j += 2)
  {
      sum += i + j;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проаналізуємо, як повинна відпрацювати дана програма та які
значення будуть мати змінні на кожній ітерації циклу.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Початок: i = 0; j = 1; sum = 0.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;1-ша ітерація: i = 1; j = 3; sum = 5.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;2-га ітерація: i = 2; j = 5; sum = 12.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;3-тя ітерація: i = 3; j = 7; sum = 22&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Також у циклах можуть використовуватися ключові слова &lt;code&gt;break&lt;/code&gt;
та &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ключове слово &lt;code&gt;break&lt;/code&gt; зупиняє виконання циклу і переходить до
виконання наступного після циклу коду. Ключове слово &lt;code&gt;continue&lt;/code&gt;
переводить цикл на нову ітерацію.&lt;/p&gt;
&lt;p&gt;На прикладі лістингу 5.13. розглянемо використання цих
операторів. Програма працює наступним чином: цикл послідовно
проходить по усіх числах та виводить їх на екран; якщо число кратне 3-м, то цикл переходить на нову ітерацію; якщо число кратне 7-ми, то цикл закінчується.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.13. Приклад використання операторів &lt;code&gt;break&lt;/code&gt; та &lt;code&gt;continue&lt;/code&gt; у циклах&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for (int i = 0; i &amp;lt; 10; ++i)
  {
     if (i%3 == 0)
        continue;
     
     Console.Write(i + &amp;quot; &amp;quot;);
     
     if(i%7==0)
        break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 2 4 5 7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;chapter522&#34;&gt;5.2.2.Цикли &lt;code&gt;while&lt;/code&gt; та &lt;code&gt;do-while&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Цикл while у мінімально модифікованому вигляді є частиною
практично усіх мов програмування. Тіло циклу виконується до тих пір,
поки залишається істинною умова &lt;code&gt;while&lt;/code&gt;. Синтаксис оголошення має
вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  while (умова) { 
      //інструкції 
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Цикл &lt;code&gt;while&lt;/code&gt; може працювати з передумовою та післяумовою. Цикл з передумовою спочатку перевіряє умову, а після цього виконує або не виконує ітерацію циклу. Цикл з післяумовою спочатку виконується
(одна ітерація), а потім тільки перевіряється умова. Таким чином можна
зробити висновок, що цикл з післяумовою виконається мінімум 1 раз.
Синтаксис огололшення циклу &lt;code&gt;while&lt;/code&gt; з післяумовою:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  do 
  { 
      //інструкції 
  } while (умова);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для порівняння циклів &lt;code&gt;while&lt;/code&gt; розглянемо лістинги 5.14 та 5.15. У
першому випадку не буде виведено на консоль нічого, у другому буде
виведено «5».&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.14. Приклад використання циклу &lt;code&gt;while&lt;/code&gt; з передумовою&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int x = 5;
  while (x &amp;lt; 5)
  {
       Console.Write(x + &amp;quot; &amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.15. Приклад використання циклу &lt;code&gt;while&lt;/code&gt; з післяумовою&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int x = 5;
  do
  {
      Console.Write(x + &amp;quot; &amp;quot;);
  } while (x &amp;lt; 5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Робота з циклом &lt;code&gt;foreach&lt;/code&gt; буде розглянута у розділі 6 разом із вивченням масивів.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-code fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter5samples&#34;&gt;Приклади розв&amp;rsquo;язання задач&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Приклад 5.1.&lt;/strong&gt; Написати програму, яка генерує і виводить на консоль 10 випадкових чисел із діапазону від 10 до 50.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Розв&amp;rsquo;язок:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Random r = new Random();
  for (int i = 0; i &amp;lt; 10; ++i)
  {
      Console.Write(r.Next(10,50) + &amp;quot;\t&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Приклад 5.2.&lt;/strong&gt; Написати програму, яка серед 5-ти введених чисел
знаходить найменше. Програма працює наступним чином: користувач
вводить за запитом системи числа, а потім на консоль виводиться
найменше з них.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Розв&amp;rsquo;язок:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int min = int.MaxValue;
  for (int i = 0; i &amp;lt; 5; ++i)
  {
     Console.Write(&amp;quot;Введіть {0} число:\t&amp;quot;, i + 1);
     int num = int.Parse(Console.ReadLine());
     min = num &amp;lt; min ? num : min;
  }
  Console.WriteLine(&amp;quot;Найменше число:\t{0}&amp;quot;,min);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Приклад 5.3.&lt;/strong&gt; Написати програму, що моделює роботу навігації.
Програма повинна пропонувати користувачу вибір дії шляхом введення
символа з клавіатури. Доступними діями є:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Hello&lt;/code&gt; - виводить на консоль текст «&lt;code&gt;Hello, user!&lt;/code&gt;»&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Time&lt;/code&gt; - виводить години, хвилини та секунди на поточному ПК&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Exit&lt;/code&gt; - завершує роботу програми.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Розв&amp;rsquo;язок:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  while (true)
  {
     Console.WriteLine(&amp;quot;\nMake a choice:&amp;quot;);
     Console.Write(&amp;quot; [H]ello\n [T]ime\n E[x]it\n\t\t:&amp;gt;&amp;quot;);
     string res = Console.ReadLine();
     
     switch (res)
     {
       case &amp;quot;H&amp;quot;:
       case &amp;quot;h&amp;quot;:
          Console.WriteLine(&amp;quot;Hello, user!&amp;quot;);
          break;
       case &amp;quot;T&amp;quot;:
       case &amp;quot;t&amp;quot;:
         Console.WriteLine(
         DateTime.Now.ToString(&amp;quot;HH:mm:ss&amp;quot;,
         new CultureInfo(&amp;quot;uk&amp;quot;)));
         break;
       case &amp;quot;X&amp;quot;:
       case &amp;quot;x&amp;quot;:
         return;
         break;
       default:
         Console.WriteLine(&amp;quot;Wrong choice&amp;quot;);
         break;
     }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter5tasks&#34;&gt;Задачі&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.1.&lt;/strong&gt; Написати програму, що знаходить добуток чисел у вказаному
користувачем діапазоні.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.2.&lt;/strong&gt; Дано цілі додатні числа $i$ та $k$ . Реалізувати функцію, що обчислює значення виразу:&lt;/p&gt;
&lt;p&gt;$$
z = i - k, при i кратному k
$$
$$z = k - i, при k кратному i$$
$$z = k + i, при{ }всіх{ }інших{ }умовах$$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.3.&lt;/strong&gt; Обчислити значення виразу $y=\frac{(x + 5)^3}{\sqrt{x + 1}}$ для усіх $x$ з діапазону $[10; 100]$ кратних $7$-ми. На консоль вивести результат у вигляді, наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  x   y
  7   125.21
  14  100.41
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Примітка. Вивести на консоль не більше двох знаків після розділювача дробової та цілої частини (крапки) для значень $y$.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.4.&lt;/strong&gt; Написати програму, що виводить на консоль таблицю множення на вказане користувачем число. Наприклад, якщо користувач ввів число $5$, то результат виконання програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  5 x 1 = 5
  5 x 2 = 10
  ...
  // і так далі...
  ...
  5 x 10 = 50
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.5.&lt;/strong&gt; Відомо, що $1 дюйм$ рівний $2.54 см$. Розробити додаток, що
переводить дюйми в сантиметри і навпаки. Діалог з користувачем
реалізувати через систему меню.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.6.&lt;/strong&gt; Написати програму, яка виводить на екран лінію з символів.
Число символів та сам символ, і яка буде лінія вертикальна, або
горизонтальна - вказує користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.7.&lt;/strong&gt; Написати програму, що знаходить суму усіх чисел кратних $7$ у діапазоні від $0$ до $100$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.8.&lt;/strong&gt; Написати програму, що обчислює суму цифр введено числа.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.9.&lt;/strong&gt; Написати програму, що виводить на екран цифри введеного числа у зворотному порядку. Наприклад, $248641 &amp;gt; 146842$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.10.&lt;/strong&gt; Написати програму, дозволяє вивести на консоль в порядку спадання непарні числа із діапазону $[5;90]$, кратні $3$ та не кратні $5$. одночасно.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.11.&lt;/strong&gt; Розробити програму, що працює як найпростіший калькулятор, який виконує арифметичні дії &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; (скористатися оператором &lt;code&gt;switch&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Пояснення. Програма повинна працювати у режимі постійного діалогу з користувачем.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--- МЕНЮ ---
[+] - Додати
[-] - Відняти
[*] - Множити
[/] - Ділити
[0] - Вийти з програми

Ваш вибір :&amp;gt; *

Введіть число 1: 4
Введіть число 2: 5

Резльутат: 20

// повторне виведення меню
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.12.&lt;/strong&gt; Знайти найбільший спільний дільник двох натуральних чисел, використавши алгоритм Евкліда. &lt;code&gt;Алгоритм Евкліда полягає в наступному: від більшого числа віднімається менше до тих пір, поки вони не стануть рівними; отримане в результаті число і буде найбільшим спільним дільником.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.13.&lt;/strong&gt; Написати програму, яка виводить на консоль фігури, зображені нижче. &lt;em&gt;Примітка. Розміри фігур вказує користувач.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Фігура 1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;****************
****************
****************
****************
****************
&lt;/code&gt;&lt;/pre&gt;
&lt;!--
Перенести у розв&#39;язки

```
  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&#34;Введіть кількість рядків: \t&#34;);
  int rows = int.Parse(Console.ReadLine());
  
  Console.Write(&#34;Введіть кількість стовпців: \t&#34;);
  int cols = int.Parse(Console.ReadLine());
  
  for (int i = 0; i &lt; rows; i++)
  {
      for (int j = 0; j &lt; cols; j++)
      {
          Console.Write(&#34;*&#34;);
      }
      Console.WriteLine();
  }
```
--&gt;
&lt;p&gt;Фігура 2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;****************
*              *
*              *
*              *
****************
&lt;/code&gt;&lt;/pre&gt;
&lt;!--
Перенести у розв&#39;язки

```
  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&#34;Введіть кількість рядків: \t&#34;);
  int rows = int.Parse(Console.ReadLine());
  
  Console.Write(&#34;Введіть кількість стовпців: \t&#34;);
  int cols = int.Parse(Console.ReadLine());
  
  for (int i = 0; i &lt; rows; i++)
  {
      for (int j = 0; j &lt; cols; j++)
      {
          if (i == 0 || i == rows - 1 || j == 0 || j == cols - 1)
              Console.Write(&#34;*&#34;);
          else
              Console.Write(&#34; &#34;);
      }
      Console.WriteLine();
  }
```
--&gt;
&lt;p&gt;Фігура 3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*****
****
***
**
*
&lt;/code&gt;&lt;/pre&gt;
&lt;!--
```
Console.OutputEncoding = Encoding.Unicode;
Console.Write(&#34;Введіть кількість: \t&#34;);
int count = int.Parse(Console.ReadLine());

for (int i = count; i &gt; 0; i--)
{
    for (int j = 0; j &lt; i; j++)
    {
        Console.Write(&#34;*&#34;);
    }
    Console.WriteLine();
}
```
--&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.14.&lt;/strong&gt; Обчислити значення виразу $y=\frac{cos(x^2 + 5)^3}{\sqrt{x - ln(x)}}$ для усіх $x$ з діапазону $[100; 200]$ кратних $10$-ти. На консоль вивести результат у вигляді, наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  x     y
  100    0.8710
  110   -0.0247
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Примітка. Вивести на консоль не більше чотирьох знаків після розділювача дробової та цілої частини (крапки) для значень $y$. Також зверніть увагу на виведення чисел з від&amp;rsquo;ємним та додатними значеннями.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.15.&lt;/strong&gt; Написати програму, що генерує та виводить на консоль 5 випадкових чисел, кратних &lt;code&gt;7&lt;/code&gt;-ми та некратних &lt;code&gt;5&lt;/code&gt;-ти одночасно з діапазону $[50; 150]$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.16.&lt;/strong&gt; Написати програму, що передбачає вгадування користувачем числа, загаданого комп&amp;rsquo;ютером. Після кожної спроби вгадати число комп&amp;rsquo;ютер повідомляє чи загадане значення більше (&lt;code&gt;&amp;gt;&lt;/code&gt;) чи менше (&lt;code&gt;&amp;lt;&lt;/code&gt;) від запропонованого користувачем. Після вгадування на екран виводиться кількість спроб.&lt;/p&gt;
&lt;p&gt;Припустимо, що компютер має право загадувати число у діапазоні $[1; 10000)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.17.&lt;/strong&gt; Згенерувати 10 випадкових чисел у діапазоні $[10, 100)$. Вивести числа на консоль.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-play fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter5solutions&#34;&gt;Рішення до задач&lt;/h2&gt;
&lt;p&gt;Рішення до задачі 5.1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть нижню межу:&amp;quot;);
  int low = int.Parse(Console.ReadLine());
  Console.Write(&amp;quot;Введіть верхню межу:&amp;quot;);
  int high = int.Parse(Console.ReadLine());
  
  int mult = 1;
  for (int i = low; i &amp;lt;= high; i++)
  {
    mult *= i;
  }
  
  Console.WriteLine($&amp;quot;Mult: {mult}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також код алгоритму можна скоротити наступним чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  int mult = 1;
  for (; low &amp;lt;= high; mult *= low++) ;
  Console.WriteLine($&amp;quot;Mult: {mult}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Рішення до задачі 5.3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.WriteLine($&amp;quot;x\ty&amp;quot;);
  for (int x = 10; x &amp;lt;= 100; x++)
  {
    if (x % 7 == 0)
    {
      double y = Math.Pow(x + 5, 3) / Math.Sqrt(x + 1);
      Console.WriteLine($&amp;quot;{x}\t{y:f2}&amp;quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Рішення до задачі 5.4:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.Write(&amp;quot;Enter number:\t&amp;quot;);
  int num = int.Parse(Console.ReadLine());
  for (int i = 1; i &amp;lt; 10; i++)
    Console.WriteLine($&amp;quot;{num} x {i} = {num*i}&amp;quot;);
    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Рішення до задачі 5.10&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  for (int i = 90; i &amp;gt;= 5; i--)
    if(i % 3 == 0 &amp;amp;&amp;amp; i % 5 != 0 &amp;amp;&amp;amp; i % 2 == 1)
      Console.WriteLine(i);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Рішення до задачі 5.11 (часткове)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  while (true)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Console.Write(&amp;quot;\n--- МЕНЮ ---\n[+] - Додати\n[-] - Відняти\n[*] - Множити\n&amp;quot; +
          &amp;quot;[/] - Ділити\n[0] - Вийти з програми\n\nВаш вибір :&amp;gt;\t&amp;quot;);
  
      string choise = Console.ReadLine();
  
      Console.Write(&amp;quot;\nВведіть число 1:\t&amp;quot;);
      double num1 = double.Parse(Console.ReadLine());
      Console.Write(&amp;quot;Введіть число 2:\t&amp;quot;);
      double num2 = double.Parse(Console.ReadLine());
  
      switch (choise)
      {
          case &amp;quot;+&amp;quot;:
              double sum = num1 + num2;
              Console.WriteLine($&amp;quot;\nРезультат: {sum}&amp;quot;);
              break;
          default:
              Console.WriteLine(&amp;quot;Помилка! Введіть операцію або 0.&amp;quot;);
              break;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Рішення до задачі 5.14.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.WriteLine(&amp;quot;x\ty&amp;quot;);
  for(int x = 100; x &amp;lt;= 200; x+=10)
  {
      double y = Math.Pow(Math.Cos(Math.Pow(x, 2)), 3) / Math.Sqrt(x - Math.Log(x));
      Console.WriteLine(&amp;quot;{0}\t{1:f4}&amp;quot;, x, y &amp;gt; 0 ? &amp;quot; &amp;quot; + Math.Round(y, 4): y);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4qustions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4sourses&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 6. Основи роботи з масивами</title>
      <link>/courses/csharp-basics/lecture6/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture6/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter61&#34;&gt;6.1. Поняття масиву даних&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter62&#34;&gt;6.2. Одновимірні масиви&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter621&#34;&gt;6.2.1. Оголошення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter622&#34;&gt;6.2.2. Ініціалізація&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter63&#34;&gt;6.3. Багатовимірні масиви&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter64&#34;&gt;6.4. Масиви масивів&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter624&#34;&gt;6.5. Цикл foreach та масиви&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter66&#34;&gt;6.6. Сортування масивів [-]&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter67&#34;&gt;6.7. Робота з класом Array [-]&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6tasks&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6sourses&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter61&#34;&gt;6.1. Поняття масиву даних&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Масив&lt;/strong&gt; задає спосіб організації даних. &lt;strong&gt;Масивом&lt;/strong&gt; називають впорядковану сукупність елементів одного типу.&lt;/p&gt;
&lt;p&gt;Кожен елемент масиву має індекси, що визначають порядок елементів. Число індексів
характеризує розмір масиву. Кожен індекс змінюється в деякому діапазоні &lt;code&gt;[а,b]&lt;/code&gt;. У мові C#, як і в
багатьох інших мовах, індекси задаються цілочисельним типом. Діапазон &lt;code&gt;[а,b]&lt;/code&gt; називається
граничною парою, &lt;code&gt;а&lt;/code&gt; – нижньою межою, &lt;code&gt;b&lt;/code&gt; – верхньою межею. Якщо межі задані константними
виразами, то число елементів масиву відоме у момент його оголошення і йому може бути виділена
пам&amp;rsquo;ять ще на етапі трансляції. Такі масиви називаються статичними. Якщо ж вирази, які задають
межі, залежать від змінних, то такі масиви називаються динамічними, оскільки пам&amp;rsquo;ять їм може
бути відведена лише динамічно в процесі виконання програми, коли стають відомими значення
відповідних змінних. Масиву, як правило, виділяється безперервна область пам&amp;rsquo;яті.&lt;/p&gt;
&lt;p&gt;У мові C++ всі масиви є статичними. У мові C# знято істотне обмеження мови C++ на статичність масивів. Масиви в мові C# є справжніми динамічними масивами. Як наслідок цього масиви відносяться до посилальних типів (&lt;code&gt;Reference&lt;/code&gt;), пам&amp;rsquo;ять їм відводиться динамічно в &amp;ldquo;купі&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;У мові C++ &amp;ldquo;класичних&amp;rdquo; багатовимірних масивів немає. Тут введені одновимірні масиви і масиви
масивів. Останні є загальнішою структурою даних і дозволяють задати не лише багатовимірний куб,
але і порізану, ступінчасту структуру. У мові C# збережені одновимірні масиви і масиви масивів. На додаток до них в мову додані багатовимірні масиви. Динамічні багатовимірні масиви мови C# є потужною, надійною, зрозумілою і зручною структурою даних, яку сміливо можна рекомендувати до вживання не лише професіоналам, але і новачкам, що програмують на C#.&lt;/p&gt;
&lt;p&gt;Після цього короткого огляду давайте перейдемо до більш систематичного вивчення деталей роботи з масивами в C#.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter62&#34;&gt;6.2. Одновимірні масиви&lt;/h2&gt;
&lt;h3 id=&#34;chapter621&#34;&gt;6.2.1. Оголошення&lt;/h3&gt;
&lt;p&gt;У спрощеному вигляді оголошення одновимірного масиву виглядає таким чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;тип[] ім’я_змінної;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Увага, на відміну від мови C++ квадратні дужки приписані не до імені змінної, а до типу. Вони є
невід&amp;rsquo;ємною частиною визначення класу, так що запис &lt;code&gt;T[]&lt;/code&gt; слід розуміти як клас одновимірний масив
з елементами типу &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Що ж до меж зміни індексів, то ця характеристика до класу не відноситься, вона є характеристикою
змінних - екземплярів, кожен з яких є одновимірним масивом зі своїм числом елементів, що
задаються в оголошенні змінної.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] а, b, с;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Найчастіше при оголошенні масиву використовується ім&amp;rsquo;я з ініціалізацією. І знову-таки, як і в разі
простих змінних, можуть бути два варіанти ініціалізації. У першому випадку ініціалізація є явною і
задається константним масивом. Ось приклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double[] x= {5.5, 6.6, 7.7};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Слідуючи синтаксису, елементи константного масиву слід брати у фігурні дужки.
У другому випадку створення і ініціалізація масиву виконується в об&amp;rsquo;єктному стилі з викликом
конструктора масиву. І це найбільш поширена практика оголошення масивів. Наведу приклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] d= new int[5];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Отже, якщо масив оголошується без ініціалізації, то створюється лише висяче посилання із
значенням void. Якщо ініціалізація виконується конструктором, то в динамічній пам&amp;rsquo;яті створюється
сам масив, елементи якого ініціалізувалися константами відповідного типу, і посилання зв&amp;rsquo;язується з цим масивом. Якщо масив ініціалізувався константним масивом, то в пам&amp;rsquo;яті створюється
константний масив, з яким і зв&amp;rsquo;язується посилання.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter622&#34;&gt;6.2.2. Ініціалізація&lt;/h3&gt;
&lt;p&gt;Ініціалізувати масиви, наприклад, можна наступними способами:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Літералами відповідного типу (лістинг 6.1).&lt;/li&gt;
&lt;li&gt;Випадковими числами (лістинг 6.2).&lt;/li&gt;
&lt;li&gt;Ввести з клавіатури (лістинг 6.3).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Заповнення масиву літералами може відбуватися наступним чином:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.1. Заповнення одновимірного масиву літералами&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[] nums = { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
  int[] nums;
  nums = new int[ ] { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
  int[] nums = new int[10] { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Приклад програми на C#, яка заповнює масив випадковими числами:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.2. Заповнення одновимірного масиву літералами&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[] array = new int[10];
    
  //Параметр фіксується для відтворюваності результатів
  Random rand = new Random(2021);
    
  for (int i = 0; i &amp;lt; 10; ++i)
  {
    array[i] = rand.Next(0, 100);
    Console.Write(&amp;quot; {0}&amp;quot;, array[i]);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  54 81 42 92 65 70 42 34 0 51
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ввести з клавіатури значення масиву можна наступним чином:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.3. Заповнення масиву значеннями, введеними з клавіатури&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  //Додаємо кодування кириличних символів
  Console.OutputEncoding = Encoding.UTF8;
  
  int[] array;
  Console.Write(&amp;quot;\n Введіть розмір масиву &amp;gt;\t&amp;quot;);
  int size = Convert.ToInt32(Console.ReadLine());
  array = new int[size];
  
  for (int i = 0; i &amp;lt; array.Length; ++i)
  {
    Console.Write(&amp;quot; Введіть {0}-й елемент:\t&amp;quot;, i + 1);
    array[i] = Convert.ToInt32(Console.ReadLine());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть розмір масиву &amp;gt;        4
  Введіть 1-й елемент:   7
  Введіть 2-й елемент:   45
  Введіть 3-й елемент:   8
  Введіть 4-й елемент:   11
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter63&#34;&gt;6.3. Багатовимірні масиви&lt;/h2&gt;
&lt;p&gt;Жодної принципової різниці між одновимірними та багатовимірними масивами немає.&lt;/p&gt;
&lt;p&gt;Одновимірні масиви - це окремий випадок багатовимірних. Можна говорити і по-іншому:
&lt;strong&gt;багатовимірні масиви&lt;/strong&gt; є природним узагальненням одновимірних. Одновимірні масиви дозволяють
задавати такі математичні структури як вектори, двовимірні - матриці, тривимірні - куби даних,
масиви більшої розмірності - багатовимірні куби даних. Варто відмітити, що при роботі з базами даних багатовимірні куби, так звані куби &lt;code&gt;OLAP&lt;/code&gt;, зустрічаються часто.&lt;/p&gt;
&lt;p&gt;От як виглядає оголошення багатовимірного масиву в загальному випадку:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[,] array;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Приклад ініціалізації:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[,]matrix = {1,2},{3,4};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Давайте розглянемо класичне завдання додавання прямокутних матриць. Нам знадобиться три
динамічні масиви для представлення матриць і три методи, один з яких заповнюватиме вхідні
матриці випадковими числами (&lt;code&gt;FillArray&lt;/code&gt;), інший - виконувати додавання матриць (&lt;code&gt;AddMatrix&lt;/code&gt;), третій - друкувати самі матриці (&lt;code&gt;PrintArray&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Ось тестовий приклад (програма містить трішки довгий код, але варто його переглянути):&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.4. Приклад додавання матриць&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  static void Main(string[] args)
  {
      //Оголосимо розмірність наших матриць
      int rows = 3, cols = 5;
  
      //Оголосимо матриці
      int[,] a = new int[rows, cols];
      int[,] b = new int[rows, cols];
      int[,] result = new int[rows, cols];
  
      //Заповнимо матриці випадковими числами
      a = FillArray(rows, cols, 1);
      b = FillArray(rows, cols, 2);
      //Виведемо на консоль матрицю А
      Console.WriteLine(&amp;quot;\nArray1: &amp;quot;);
      PrintArray(a);
      //Виведемо на консоль матрицю B
      Console.WriteLine(&amp;quot;\nArray2: &amp;quot;);
      PrintArray(b);
  
      //Додамо і присвоїмо результат
      result = AddMatrix(a, b);
  
      if (result != null)
      {
          Console.WriteLine(&amp;quot;\nResultMatrix: &amp;quot;);
          PrintArray(result);
      }
  }
  
  static int[,] AddMatrix(int[,] a, int[,] b)
  {
      //Оголосимо матрицю у яку будемо записувати результат.
      int[,] res = new int[a.GetLength(0), a.GetLength(1)];
  
      //Перевіримо чи однаковий розмір матриць
      if ((a.GetLength(0) != b.GetLength(0)) || (a.GetLength(1) != b.GetLength(1)))
          Console.WriteLine(&amp;quot;Мариці неоднакового розміру.&amp;quot;);
      else
      {
          for (int i = 0; i &amp;lt; a.GetLength(0); ++i)
          {
              //Виконуємо додавання елементів матриць
              for (int j = 0; j &amp;lt; a.GetLength(1); ++j)
                  res[i, j] = a[i, j] + b[i, j];
          }
          return res;
      }
      return null;
  }
  
  static int[,] FillArray(int rows, int cols, int seed)
  {
      int[,] array = new int[rows, cols];
      //Створює змінну класу Random для генерування значень
      Random rand = new Random(seed);
  
      for (int i = 0; i &amp;lt; rows; ++i)
      {
          for (int j = 0; j &amp;lt; cols; ++j)
          {
              array[i, j] = rand.Next(0, 100);
          }
      }
      return array;
  }
  
  static void PrintArray(int[,] array)
  {
      for (int i = 0; i &amp;lt; array.GetLength(0); ++i)
      {
          for (int j = 0; j &amp;lt; array.GetLength(1); ++j)
          {
              //Виводимо значення на консоль
              Console.Write(&amp;quot; {0}\t&amp;quot;, array[i, j]);
          }
          Console.WriteLine();
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Array1:
   24      11      46      77      65
   43      35      94      10      64
   2       24      32      98      68
  
  Array2:
   77      40      16      98      10
   30      80      44      22      1
   76      2       0       51      38
  
  ResultMatrix:
   101     51      62      175     75
   73      115     138     32      65
   78      26      32      149     106
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter64&#34;&gt;6.4. Масиви масивів&lt;/h2&gt;
&lt;p&gt;Ще одним видом масивів C# є масиви масивів, звані також різаними/рваними масивами (&lt;strong&gt;jagged
arrays&lt;/strong&gt;). Такий масив масивів можна розглядати як одновимірний масив, елементи якого є масивами,
елементи яких, у свою чергу, знову можуть бути масивами, і так може тривати до деякого рівня
вкладеності.&lt;/p&gt;
&lt;p&gt;У яких ситуаціях може виникати необхідність в таких структурах даних? Ці масиви можуть
застосовуватися для представлення дерев, в яких вузли можуть мати довільне число нащадків. Таким
може бути, наприклад, генеалогічне дерево. Вершини першого рівня - &lt;code&gt;Fathers&lt;/code&gt;, що представляють
батьків, можуть задаватися одновимірним масивом, так що &lt;code&gt;Fathers[i]&lt;/code&gt; - це &lt;code&gt;i&lt;/code&gt;-й батько. Вершини
другого рівня представляються масивом масивів - &lt;code&gt;Children&lt;/code&gt;, так що &lt;code&gt;Children[i]&lt;/code&gt; - це масив дітей &lt;code&gt;i&lt;/code&gt;-го батька, а &lt;code&gt;Children[i][j]&lt;/code&gt; - це &lt;code&gt;j&lt;/code&gt;-а дитина &lt;code&gt;i&lt;/code&gt;-го батька. Для представлення внуків знадобиться третій рівень, так що &lt;code&gt;GrandChildren[i][j][k]&lt;/code&gt; представлятиме &lt;code&gt;k&lt;/code&gt;-го внука &lt;code&gt;j&lt;/code&gt;-ї дитини &lt;code&gt;i&lt;/code&gt;-го батька.&lt;/p&gt;
&lt;p&gt;Є деякі особливості в оголошенні і ініціалізації таких масивів. Якщо при оголошенні багатовимірних
масивів для вказівки розмірності використовувалися коми, то для порізаних масивів застосовується
зрозуміліша символіка - сукупності пар квадратних дужок; наприклад, &lt;code&gt;int[][]&lt;/code&gt; задає масив, елементи якого - одновимірні масиви елементів типу &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Складніше зі створенням самих масивів і їх ініціалізацією. Тут не можна викликати конструктор &lt;code&gt;new int[3][5]&lt;/code&gt;, оскільки він не задає порізаний масив. Фактично потрібно викликати конструктор для
кожного масиву на нийнижчому рівні. У цьому і полягає складність оголошення таких масивів.&lt;/p&gt;
&lt;p&gt;Розпочнемо з формального прикладу:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[][] jagger = new int[3][]
  {
    new int[] {5,7,9,11},
    new int[] {2,8},
    new int[] {6,12,4}
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Масив &lt;code&gt;jagger&lt;/code&gt; має всього два рівні. Можна вважати, що у нього три елементи, кожен з яких є
масивом. Для кожного такого масиву необхідно викликати конструктор &lt;code&gt;new&lt;/code&gt;, аби створити
внутрішній масив. У даному прикладі елементи внутрішніх масивів набувають значення, будучи
явно ініціалізовані константними масивами. Звичайно, допустимим є і таке оголошення:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[][] jagger1 = new int[3][]
  {
    new int[4],
    new int[2],
    new int[3]
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В цьому випадку елементи масиву набудуть при ініціалізації нульових значень. Реальну
ініціалізацію потрібно буде виконувати програмним шляхом. Варто відмітити, що в конструкторі
верхнього рівня константу &lt;code&gt;3&lt;/code&gt; можна опустити і писати просто &lt;code&gt;new int[][]&lt;/code&gt;. Також виклик
цього конструктора можна взагалі опустити - він матиметься на увазі:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[][] jagger2 =
  {
    new int[4],
    new int[2],
    new int[3]
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оголошувати вкладені масиви обов’язково.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter624&#34;&gt;6.5. Цикл foreach та масиви&lt;/h2&gt;
&lt;p&gt;У лекції про цикли загдувалося, що у мові С# визначений цикл &lt;code&gt;foreach&lt;/code&gt;, але детальний його розгляд
був відкладений «на потім». Час для нього настав.&lt;/p&gt;
&lt;p&gt;Цикл &lt;code&gt;foreach&lt;/code&gt; використовується для опису елементів колекції. &lt;strong&gt;Колекція&lt;/strong&gt; – це група об&amp;rsquo;єктів. С#
визначає декілька типів колекцій, і одним з них є масив. Формат запису циклу &lt;code&gt;foreach&lt;/code&gt; має такий
вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  foreach (тип ім&#39;я_змінної in колекція) 
  {
    інструкції;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Тут елементи тип та ім’я_змінної задають тип та ім&amp;rsquo;я ітераційної змінної, яка при функціонуванні
циклу &lt;code&gt;fоreach&lt;/code&gt; набуватиме значень елементів з колекції. Елемент колекція служить для вказівки
опитуваної колекції (в даному випадку як колекцію ми розглядаємо масив). Таким чином, елемент
тип повинен збігатися (або бути сумісним) з базовим типом масиву. Тут важливо запам&amp;rsquo;ятати, що
ітераційну змінну стосовно масиву можна використовувати лише для читання. Отже, неможливо
змінити вміст масиву, присвоївши ітераційній змінній нове значення.&lt;/p&gt;
&lt;p&gt;Розглянемо простий приклад використання циклу &lt;code&gt;foreach&lt;/code&gt;. Приведена нижче програма створює
масив для зберігання цілих чисел і присвоює його елементам початкові значення. Потім вона
відображає елементи масиву, попутно обчислюючи їх суму.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.5. Робота з циклом foreach&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.UTF8;
  
  int[] array = new int[10];
  int suma = 0;
  Random r = new Random(2021);
  
  //Заповнюмє масив випадковими числами
  for (int i = 0; i &amp;lt; array.Length; ++i)
      array[i] = r.Next(10, 100);
  
  Console.Write(&amp;quot;Array:\t&amp;quot;);
  foreach (int element in array)
  {
      Console.Write(&amp;quot;{0} &amp;quot;, element);
      suma += element;
  }
  Console.WriteLine(&amp;quot;\n\nСума елементів:\t{0}&amp;quot;, suma);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Array:  59 83 48 93 69 73 48 41 10 56

  Сума елементів: 580
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter66&#34;&gt;6.6. Сортування масивів [-]&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Розділ у процесі наповнення
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter67&#34;&gt;6.7. Робота з класом Array [-]&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Розділ у процесі наповнення
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6tasks&#34;&gt;Задачі&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Задача 1.&lt;/strong&gt; Написати програму, яка знаходить суму парних і суму непарних елементів масиву.
Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 2.&lt;/strong&gt; Написати програму, яка знаходить в масиві значення, що повторюються два і більше разів, і показує їх на екран. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач. Наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  45  12  12  63
  15  12  45  78
  75  56  89  1
  
  Результат: 12, 75
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 3.&lt;/strong&gt; Написати програму, яка знаходить в масиві найменше непарне число і показує його на
екран. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить
користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 4.&lt;/strong&gt; Задано масив із $n$ дійсних чисел. Обчислити різницю між максимальним та мінімальним
за модулем елементами цього масиву. Елементи масиву генеруються випадковим чином. Кількість
стовпців та рядків вводить користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.&lt;/strong&gt; Дано одновимірний масив із дійсних чисел. Відсортувати його таким чином, щоб всі
додатні елементи знаходилися на початку, а всі від&amp;rsquo;ємні – в кінці, і при цьому зберігся початковий
порядок елементів в обох групах.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 6.&lt;/strong&gt; Задано одновимірний масив. Знайти два серед його елементів, модуль різниці яких має
найменше значення.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 7.&lt;/strong&gt; Сформувати цілочисельний масив, елементами якого є випадкові числа із діапазону.
Знайти суму елементів масиву, значення яких кратні $8$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 8.&lt;/strong&gt; Розробити функцію, що переставляє в зворотному порядку елементи головної діагоналі
квадтаної матриці.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 9.&lt;/strong&gt; Переформатувати марицю (двовимірний масив) таким чином, щоб її рядки розміщувалися за зростанням їх поелементних сум.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 10.&lt;/strong&gt; Знайти мінімальний елемент серед тих елементів масиву $A$, які не є елементами масиву $B$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 11.&lt;/strong&gt; Визначити, скільки різних чисел міститься в заданому цілочисельному масиві.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 12.&lt;/strong&gt; Відсортувати рядки двохвимірного масиву за зростанням. Кількість рядків і стовпців вводить користувач. Масив заповнюється випадковими числами із діапазону $[10; 100)$.&lt;/p&gt;
&lt;p&gt;Наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  45  12  12  63
  15  12  45  78
  75  56  89  1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  12  12  45  63
  12  15  45  78
  1   56  75  89
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 13.&lt;/strong&gt; Згенерувати матрицю значень $n*n$ (квадратну). Знайти максимальний елемент у виділеному кольором діапазоні масиву:&lt;/p&gt;
&lt;figure &gt;
&lt;p&gt;&lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture6/lecture-6-task-13.svg&#34; &gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/media/courses/csharp-basics/lecture6/lecture-6-task-13.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;Так, для підзавдання 13.3 і матриці поданої нижче&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  45  12  12  63
  15  12  45  78 
  75  56  89  1
  53  75  78  21
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;максимум становитиме &lt;strong&gt;89&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 14.&lt;/strong&gt; Написати програму, що обчислює середнє значення серед парних елементів масиву. Елементи генеруються випадковим чином у діапазоні [10; 100). Кількість елементів визначає користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 15.&lt;/strong&gt; Написати програму, що генерує вектор випадкових елементів з діапазону $[100;200]$ та виводить його на консоль. Усі елементи вектора повинні бути кратними &lt;code&gt;7&lt;/code&gt;-ми. Генерацію випалкового числа винести в окремий метод.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6sourses&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 7. Перелічувані типи та структури</title>
      <link>/courses/csharp-basics/lecture7/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture7/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter71&#34;&gt;7.1. Перелічувані типи&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter711&#34;&gt;7.1.1. Оголошення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter712&#34;&gt;7.1.2. Заміна значень&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter713&#34;&gt;7.1.3. Перетворення&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter72&#34;&gt;7.2. Робота зі структурами&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter721&#34;&gt;7.2.1. Оголошення &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter722&#34;&gt;7.2.2. Поля &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter724&#34;&gt;7.2.4. Методи &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter725&#34;&gt;7.2.5. Конструктори &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter726&#34;&gt;7.2.6. Масив об&amp;rsquo;єктів &lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7task&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter71&#34;&gt;7.1. Перелічувані типи&lt;/h2&gt;
&lt;h3 id=&#34;chapter711&#34;&gt;7.1.1. Оголошення&lt;/h3&gt;
&lt;p&gt;Коли ви створюєте програму, часто буває зручно створити множину символьних імен для базових
числових значень.&lt;/p&gt;
&lt;p&gt;Розглянемо практичну задачу. Припустимо, що ви пишете програму у якій використовуєте
інформацію про дні тижня. До цього ми визначали дні тижня по номеру дня. Наприклад:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.1. Визначення дня тижня за номером&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int a = 4;
switch (a)
{
  case 1:
    Console.WriteLine(&amp;quot;Понеділок&amp;quot;);
    break;
  case 2:
    Console.WriteLine(&amp;quot;Вівторок&amp;quot;);
    break;
  case 3:
    Console.WriteLine(&amp;quot;Середа&amp;quot;);
    break;
  case 4:
    Console.WriteLine(&amp;quot;Четвер&amp;quot;);
    break;
  case 5:
    Console.WriteLine(&amp;quot;Пятниця&amp;quot;);
    break;
  case 6:
    Console.WriteLine(&amp;quot;Субота&amp;quot;);
    break;
  case 7:
    Console.WriteLine(&amp;quot;Неділя&amp;quot;);
    break;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проте подібний варіант заставляє програміста постійно пам’ятати, якій цифрі відповідає конкретний день тижня. Краще було б іменувати ці змінні.&lt;/p&gt;
&lt;p&gt;У подібних ситуаціях використовуються перелічувані типи.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Перелічуваний тип&lt;/strong&gt; (&lt;strong&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/strong&gt;) - це визначений програмістом тип, який може приймати тільки обмежений набір значень.&lt;/p&gt;
&lt;p&gt;За своїм внутрішнім представленням перелічуваний тип є цілим чимлом. Для перелічуваних типів затверджені наступні типи: &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; або &lt;code&gt;ulong&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Згалом перелічувані типи є одним із варіантів &lt;code&gt;User Defined Type&lt;/code&gt; (&lt;code&gt;UDT&lt;/code&gt;), тобто визначених користувачем типів. Такі типи у використанні не мають відмінностей від стандарних типів даних, як &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt; тощо.&lt;/p&gt;
&lt;p&gt;Загальний вигляд запису перелічуваного типу:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модиф_доступу enum Назва : тип
  {
    Елемент1,
    Елемент2,
    ...,
    ЕлементN,
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Модифікатори доступу можуть бути:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;public&lt;/code&gt; – доступний для усіх.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;private&lt;/code&gt; – доступний лише всередині поточного класу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Розглянемо приклади опису перелічуваних типів:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.2. Перелічуваний тип &amp;ldquo;Кольори&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public enum MyColors
  {
    Red,
    Yellow,
    Green
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.3. Перелічуваний тип &amp;ldquo;Арифметичні операції&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public enum Operations
  {
    Plus,
    Minus,
    Divide,
    Multiply
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для днів тижня перелічуваний тип матиме вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.4. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon,  //0
    Tue,  //1
    Wed,  //2
    Thu,  //3
    Fri,  //4
    Sat,  //5
    Sun   //6
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter712&#34;&gt;7.1.2. Заміна значень&lt;/h3&gt;
&lt;p&gt;Перелічувальний тип &lt;code&gt;Days&lt;/code&gt; визначає чотири іменовані константи, відповідні деяким числовим
значенням. У С# перший елемент за замовчуванням має нульовий індекс ($0$) і далі по наростаючій ($n + 1$).&lt;/p&gt;
&lt;p&gt;Ви можете змінити цю поведінку, як вам потрібно:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.5. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; зі зміною цілочисельних значень.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon = 10,
    Tue,  //11
    Wed,  //12
    Thu,  //13
    Fri,  //14
    Sat,  //15
    Sun   //16
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Номери елементів перелічувального типу не обов&amp;rsquo;язково мають бути послідовними. Якщо (з будь-якої причини) є сенс визначити Days таким чином, компілятор заперечувати не буде:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.6. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; зі зміною цілочисельних значень.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon = 10,
    Tue,    //11
    Wed = 75,
    Thu = 100,
    Fri,    //101
    Sat,    //102
    Sun     //103
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для зберігання кожного елементу перелічувального типу за замовчуванням використовується клас
&lt;code&gt;System.Int32&lt;/code&gt;. Ви також можете змінити цю поведінку. Наприклад, якщо ви хочете, аби внутрішні
елементи &lt;code&gt;Days&lt;/code&gt; зберігалися як значення типу &lt;code&gt;byte&lt;/code&gt;, а не як &lt;code&gt;int&lt;/code&gt;, можна написати наступне:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.7. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; унаслідуваний від &lt;code&gt;byte&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days : byte
  {
    Mon = 10,
    ...,
    Sat,
    Sun
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад задачі про визначення днів тижня уже з використанням типу &lt;code&gt;Days&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.8. Приклад розв&amp;rsquo;язання задачі з використанням типу &lt;code&gt;Days&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
     Mon = 1, 
    Tue,    //2
    Wed,    //3
    Thu,    //4
    Fri,    //5
    Sat,    //6
    Sun     //7
  }

  static void Main(string[] args)
  {
    Days day = Days.Thu;
    switch (day)
    {
      case Days.Mon:
        Console.WriteLine(&amp;quot;Понеділок&amp;quot;);
        break;
      case Days.Tue:
        Console.WriteLine(&amp;quot;Вівторок&amp;quot;);
        break;
      case Days.Wed:
        Console.WriteLine(&amp;quot;Середа&amp;quot;);
        break;
      case Days.Thu:
        Console.WriteLine(&amp;quot;Четвер&amp;quot;);
        break;
      case Days.Fri:
        Console.WriteLine(&amp;quot;Пятниця&amp;quot;);
        break;
      case Days.Sat:
        Console.WriteLine(&amp;quot;Субота&amp;quot;);
        break;
      case Days.Sun:
        Console.WriteLine(&amp;quot;Неділя&amp;quot;);
        break;
    }
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Четвер
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Даний приклад є лише демонстраційним і створювати такий перелічуваний тип немає жодної
потреби, адже існує уже вбудований аналогічний тип &lt;code&gt;DayOfWeek&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Перепишіть попереденю програму із використанням стандартного перелічуваного типу даних
&lt;code&gt;DayOfWeek&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter713&#34;&gt;7.1.3. Перетворення&lt;/h3&gt;
&lt;p&gt;Перелічувані типи можуть бути успішно конвертовані у числа, а також зчитані з тектових та числових значень.&lt;/p&gt;
&lt;p&gt;Якщо для &lt;code&gt;enum&lt;/code&gt;-у оголошеному у &lt;em&gt;лістингу 7.8&lt;/em&gt; використати наступний код:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.9. Перетворення типу даних &lt;code&gt;Days&lt;/code&gt; до &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Days day = Days.Tue;
  Console.WriteLine(day);
  Console.WriteLine((int)day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; то результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Tue
  2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можливий також і зворотній варіант:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.10. Перетворення типу даних &lt;code&gt;int&lt;/code&gt; до &lt;code&gt;Days&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Days day = (Days)5;
  Console.WriteLine(day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Fri
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також для роботи з перелічуваними типами варто скоритатися класом &lt;code&gt;Enum&lt;/code&gt;, який має ряд корисних методів та властивостей. Коротко розглянемо один із них, а саме &lt;code&gt;Enum.Parse&amp;lt;&amp;gt;()&lt;/code&gt;. Цей метод дозволяє введений (у вигляді рядка) текст перетворити в об&amp;rsquo;єкт перелічуваного типу.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.11. Перетворення типу даних &lt;code&gt;string&lt;/code&gt; до &lt;code&gt;Days&lt;/code&gt; за допомогою &lt;code&gt;Enu.Parse&amp;lt;&amp;gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть значення enum:\t&amp;quot;);
  Days day = Enum.Parse&amp;lt;Days&amp;gt;(Console.ReadLine());
  Console.WriteLine(&amp;quot;Enum:\t\t&amp;quot; + day);
  Console.WriteLine(&amp;quot;Integer:\t&amp;quot; + (int)day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть значення enum:  Sun //вводиться користувачем
  Enum:           Sun
  Integer:        7

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Детальніше про клас &lt;code&gt;Enum&lt;/code&gt; можна ознайомитися у &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.enum&#34;&gt;документації на сайті компанії Microsoft&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;chapter72&#34;&gt;7.2. Робота зі структурами&lt;/h2&gt;
&lt;h3 id=&#34;chapter721&#34;&gt;7.2.1. Оголошення &lt;/h3&gt;
&lt;p&gt;У C# існує багато різних типів даних для представлення інформації. Проте всі об&amp;rsquo;єкти реального світу описати розробникам усе-таки не вдалося 😄. Наприклад, якщо потрібно описати поняття студент, квартира, веб-сайт, комп&amp;rsquo;ютер та ін. є потреба створювати користувацькі типи даних. 
До таких типів даних належать класи та структури, а також розглянуті вище перелічувані типи. Класи по суті є розширенням структур, вони будуть розглянуті пізніше.&lt;/p&gt;
&lt;p&gt;Структури в C# практично нічим не відрізняються від структур на будь-яких інших мовах.
Відмінності спостерігаються лише на більш низькому рівні. В основному це стосується того, що для
структур в C# не існує базового класу. Але в той же час структури є похідними від типу &lt;code&gt;ValueType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Дуже узагальнивши поняття структури можна визначити його, як згруповану сукупність
ознак(даних) певного об&amp;rsquo;єкта, методів управління цими ознаками та доступу до них.
Структури визначаються за допомогою ключового слова &lt;code&gt;struct&lt;/code&gt;, наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модиф_доступу struct Назва
  {
    // Поля, властивості, методи...
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Структури використовують велику частину того ж синтаксису, що і класи, проте вони більш
обмежені в порівнянні з ними:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; У оголошенні структури поля не можуть ініціалізувати до тих пір, поки вони будуть оголошені як постійні або статичні.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура може не оголошувати використовуваний за замовчуванням конструктор (конструктор без параметрів) або деструктор.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури копіюються при присвоєнні. При присвоєнні структури у нову змінну виконується копіювання всіх даних, а будь-яка зміна нової копії не впливає на дані у вихідній копії.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури є значимими типами, а класи - посилальними типами.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть бути створені без використання оператора &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть оголошувати конструктори, що мають параметри.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура не може наслідуватися від іншої структури або класу і не може бути основою для інших класів. Всі структури наслідуються безпосередньо від &lt;code&gt;System.ValueType&lt;/code&gt;, який наслідується від &lt;code&gt;System.Object&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть реалізовувати інтерфейси.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура може використовуватися як тип, що допускає значення &lt;code&gt;NULL&lt;/code&gt;, і їй можна призначити значення &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Структура&lt;/strong&gt; - це набір залежних один від одного змінних. Залежність тут виключно логічна і визначається умовами задачі. Аби стало зрозуміло, розглянемо простий приклад.&lt;/p&gt;
&lt;h3 id=&#34;chapter722&#34;&gt;7.2.2. Поля &lt;/h3&gt;
&lt;p&gt;Припустимо, ми пишемо програму, що друкує довідки для студентів. Всі довідки мають один і той же вигляд і текст, окрім наступних полів: імя, прізвище, курс, факультет, дата народження. Це залежні дані і їх можна представити у вигляді структури, наприклад так:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.12. Опис структури &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
    public string _firstName;
    public string _lastName; 
    public DateTime _dateOfBirth;
    public string _faculty;
    public int _course;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Усі елементи у представленій вище структурі є полями. Модифікатор доступу &lt;code&gt;public&lt;/code&gt; до полів означає, що доступ до цього поля є повним у всіх блоках програми.
На рис. 7.1. зображено різницю, коли поле оголошено &lt;code&gt;private&lt;/code&gt;, і коли &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td style=&#34;width:50%&#34;&gt;&lt;img style=&#34;width:100%&#34; src=&#34;/media/courses/csharp-basics/lecture7/public_img.png&#34; alt=&#34;&#34;/&gt;&lt;/td&gt;
     &lt;td style=&#34;width:45%&#34;&gt;&lt;img style=&#34;width:100%&#34; src=&#34;/media/courses/csharp-basics/lecture7/private_img.png&#34; alt=&#34;&#34;/&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;center&gt;
&lt;p&gt;Рис. 7.1. Відмінність у доступі до поля залежно від модифікатора &lt;code&gt;public&lt;/code&gt;/&lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Наша структура називається &lt;code&gt;Student&lt;/code&gt; і має 5 полів. Після того, як структура оголошена, ми можемо з нею працювати.&lt;/p&gt;
&lt;p&gt;Розглянемо &lt;strong&gt;приклад&lt;/strong&gt;: &lt;em&gt;потрібно вивести довідку з інформацією про студента.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.13. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student();
      student.firstName = &amp;quot;Дмитро&amp;quot;;
      student.lastName = &amp;quot;Попов&amp;quot;;
      student.faculty = &amp;quot;гуманітарний&amp;quot;;
      student.course = 3;
      student.dateOfBirth = DateTime.Parse(&amp;quot;02/05/1990&amp;quot;);
  
      Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
      Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
      Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
          student.firstName, student.lastName, student.course);
      Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + student.dateOfBirth.ToShortDateString());
      Console.WriteLine(&amp;quot; Факультет: &amp;quot; + student.faculty);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: гуманітарний
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter724&#34;&gt;7.2.4. Методи &lt;/h3&gt;
&lt;p&gt;Структури підримують також і &lt;strong&gt;методи&lt;/strong&gt;. Виведення інформації про студента можна винести у метод структури і викликати у програмі. Для цього створимо метод &lt;code&gt;Print&lt;/code&gt;. Також напишемо метод, який буде повертати повне ім&amp;rsquo;я студента, наприклад, Попов Дмитро.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.14. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;. Додавання методів.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  
      public void Print()
      {
          Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
          Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
          Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
              firstName, lastName, course);
          Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + dateOfBirth.ToShortDateString());
          Console.WriteLine(&amp;quot; Факультет: &amp;quot; + faculty);
      }
  
      public string GetFullName()
      {
          return firstName + &amp;quot; &amp;quot; + lastName;
      }
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student();
      student.firstName = &amp;quot;Дмитро&amp;quot;;
      student.lastName = &amp;quot;Попов&amp;quot;;
      student.faculty = &amp;quot;гуманітарний&amp;quot;;
      student.course = 3;
      student.dateOfBirth = DateTime.Parse(&amp;quot;02/05/1990&amp;quot;);
  
      student.Print();
      Console.WriteLine(&amp;quot;\n &amp;quot; + student.GetFullName() + &amp;quot;\n&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: гуманітарний

 Дмитро Попов
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter725&#34;&gt;7.2.5. Конструктори &lt;/h3&gt;
&lt;p&gt;Структури підтримують також і конструктори.&lt;/p&gt;
&lt;p&gt;У об&amp;rsquo;єктно-орієнтованому програмуванні конструктор класу (від англ. &lt;code&gt;constructor&lt;/code&gt;, інколи скорочують &lt;code&gt;ctor&lt;/code&gt;) - спеціальний блок інструкцій, що викликається при створенні об&amp;rsquo;єкту з використанням ключового слова &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Конструктор схожий з методом, але відрізняється від методу тим, що не має явно оголошеного типу повертаємого значення, не наслідується. Конструктори виділяються наявністю однакового імені з ім&amp;rsquo;ям класу, в якому оголошуються. Конструкторів може бути одразу кілька.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.15. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;. Додавання конструктора.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      // Поля
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  
      // Конструктор
      public Student(string _firstName, string _lastName, DateTime _dateOfBirth, string _faculty, int _course)
      {
          this.firstName = _firstName;
          this.lastName = _lastName;
          dateOfBirth = _dateOfBirth;
          faculty = _faculty;
          course = _course;
      }
  
      // Методи
      public void Print()
      {
          Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
          Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
          Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
              firstName, lastName, course);
          Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + dateOfBirth.ToShortDateString());
          Console.WriteLine(&amp;quot; Факультет: &amp;quot; + faculty);
      }
  
      public string GetFullName()
      {
          return firstName + &amp;quot; &amp;quot; + lastName;
      }
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student(&amp;quot;Дмитро&amp;quot;, &amp;quot;Попов&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;гуманітарний&amp;quot;, 3);
      student.Print();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат виконання аналогічних до результату з лістингу 7.13.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter726&#34;&gt;7.2.6. Масив об&amp;rsquo;єктів &lt;/h3&gt;
&lt;p&gt;Якщо порівняти приклад та 7.13, то коду приблизно однаково. Але при зростанні кількості обєктів типу Студент буде видно суттєву оптимізацію. Напишемо програму, яка виводить на екран довідки 3-х студентів.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.16. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  static void Main(string[] args)
  {
    Console.OutputEncoding = Encoding.Unicode;
     
    Student[] group = new Student[3];
    group[0] = new Student(&amp;quot;Дмитро&amp;quot;, &amp;quot;Попов&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
    group[1] = new Student(&amp;quot;Іван&amp;quot;, &amp;quot;Петров&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
    group[2] = new Student(&amp;quot;Олена&amp;quot;, &amp;quot;Чуприна&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
  
    foreach (Student student in group)
      student.Print();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
                ДОВIДКА
 пiдтвреджує, що
 Іван Петров дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
                ДОВIДКА
 пiдтвреджує, що
 Олена Чуприна дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Детальніше про роботу з обєктами буде розглянуто в Темі 8. ООП.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7task&#34;&gt;Задачі&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Задача 1.&lt;/strong&gt; Написати програму, що передбачає вгадування користувачем числа, загадоного комп&amp;rsquo;ютером. Після кожної спроби вгадати число комп&amp;rsquo;ютер повідомляє чи загадане значення більше (&lt;code&gt;&amp;gt;&lt;/code&gt;) чи менше (&lt;code&gt;&amp;lt;&lt;/code&gt;) від запропонованого користувачем. Після вгадування на екран виводиться кількість спроб.&lt;/p&gt;
&lt;p&gt;Припустимо, що компютер має право загадувати число у діапазоні $[1; 10000)$.&lt;/p&gt;
&lt;p&gt;Рішення до задачі 3.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  
  Random r = new Random();
  int number = r.Next(1, 10000);
  Console.WriteLine(&amp;quot;Привіт! Я загадав число у діапазоні [1; 10000).&amp;quot;);
  
  // ставимо @ перед параметром, оскільки try є ключовим словом у C#
  int @try = 0;
  
  while (true)
  {
      ++@try;
      Console.Write(&amp;quot;\nЯке число я загадав?\t&amp;gt;&amp;quot;);
      int userNumber = int.Parse(Console.ReadLine());
  
      if (userNumber &amp;gt; number)
      {
          Console.WriteLine(&amp;quot;PC &amp;gt; Неправильно. Моє число є меншим.&amp;quot;);
          continue;
      }
  
      if (userNumber &amp;lt; number)
      {
          Console.WriteLine(&amp;quot;PC &amp;gt; Неправильно. Моє число є більшим.&amp;quot;);
          continue;
      }
  
      if (userNumber == number)
      {
          Console.WriteLine(&amp;quot;PC &amp;gt; Вітаю! Ти вгадав за {0} спроб&amp;quot;, @try);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 2.&lt;/strong&gt; Написати програму, що дозволяє маніпулювати даними про товари у магазині. Товар описати як окрему структуру (struct) з полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва (&lt;code&gt;Title&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Категорія (&lt;code&gt;Category&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Ціна (&lt;code&gt;Price&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Кількість (&lt;code&gt;Quantity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Категорії товарів визначені як перелічуваний тип (enum) і мають наперед визначені значення, наприклад:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Промислові товари (&lt;code&gt;Industrial products&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Побутова хімія (&lt;code&gt;Household  chemicals&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Продукти харчування (&lt;code&gt;Food&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Реалізувати функції:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вивести список товарів&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Додавати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Редагувати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Видалити товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вийти з програми&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Взаємодію з користувачем реалізувати через меню.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 3.&lt;/strong&gt; Описати структуру &lt;strong&gt;Книга&lt;/strong&gt; (&lt;code&gt;Book&lt;/code&gt;) з даними:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Автор&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Рік видання&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Місце видання&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Реалізувати метод для виведення інформації про книгу, наприклад &lt;code&gt;Print()&lt;/code&gt;, який приймає 1 параметр &lt;code&gt;showFullInfo&lt;/code&gt; типу &lt;code&gt;bool&lt;/code&gt; і в залежності від його значення виводить інформацію про книгу у форматі:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; якщо &lt;code&gt;showFullInfo == true&lt;/code&gt;, то виводиться стрічка з інформацією про усі поля книги;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; якщо &lt;code&gt;showFullInfo == false&lt;/code&gt;, то виводиться стрічка з інформацією тільки про поля &lt;strong&gt;Назва&lt;/strong&gt; та &lt;strong&gt;Автор&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Автора&lt;/strong&gt; реалізувати як окрему структуру з полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Імя&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Прізвище&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Дата народження&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Створити масив з 5-ти книг та вивети його на консоль методом &lt;code&gt;Print()&lt;/code&gt; з різними параметрами.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 4.&lt;/strong&gt; На основі структур, створених у &lt;strong&gt;завданні 3&lt;/strong&gt; написати програму для маніпулюванням інформації про книги у каталозі.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.&lt;/strong&gt; Написати програму&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 8. Вступ до об&#39;єктно-орієнтовного програмування</title>
      <link>/courses/csharp-basics/lecture8/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture8/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter81&#34;&gt;8.1. Поняття об&amp;rsquo;єкта та класу. Основні елементи класу&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter82&#34;&gt;8.2. Будова класу&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter821&#34;&gt;8.2.1. Поля класу&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter822&#34;&gt;8.2.2. Методи класу&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#презентація&#34;&gt;Презентація&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8task&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8sources&#34;&gt;Де почитати?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter81&#34;&gt;8.1. Поняття об&amp;rsquo;єкта та класу. Основні елементи класу&lt;/h2&gt;
&lt;p&gt;Об&amp;rsquo;єктно-орієнтоване програмування і проектування побудоване на класах. Будь-яку програмну систему, побудовану в об&amp;rsquo;єктному стилі, можна розглядати як сукупність класів, можливо, об&amp;rsquo;єднаних в проекти, простори імен, рішення, як це робиться при програмуванні у Visual Studio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Клас&lt;/strong&gt; - це шаблон, який визначає форму об&amp;rsquo;єкту. Він задає як дані, так і код, який оперує цими даними.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Об&amp;rsquo;єкти&lt;/strong&gt; - це екземпляри класу.&lt;/p&gt;
&lt;p&gt;Клас складається із:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; полів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; властивостей;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; методів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; подій;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; конструкторів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; деструкторів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; делегатів.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Елементи класу називаються членами класу.&lt;/p&gt;
&lt;p&gt;Клас оголошується за допомогою ключового слова &lt;code&gt;class&lt;/code&gt;. Синтаксис має наступний вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.1. Синтаксис оголошення класу.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class ім’я_класу
  {
    //Оголошення полів
    доступ тип імя_змінної;
    доступ тип імя_змінної;
  
    //Оголошення методів
    доступ тип_повернення імя_метода(параметри)
    {
      тіло метода;
    }
  
    доступ тип_повернення імя_метода(параметри)
    {
      тіло метода;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад базового створення класу &amp;ldquo;Комплексне число&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.2. Оголошення класу &lt;code&gt;ComplexNumber&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class ComplexNumber
  {
    //Поля
    private double a;
    private double b;
  
    //Конструктор
    public ComplexNumber(double a, double b)
    {
      this.a = a;
      this.b = b;
    }
  
  //Метод
    public override string ToString()
    {
      return a + &amp;quot; + &amp;quot; + b + &amp;quot;i&amp;quot;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Доступ до полів, методів та інших членів класу може здійснюватися з різним рівнем доступу:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;private&lt;/code&gt; доступний лише всередині класу (типу);&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;protected&lt;/code&gt; доступний лише всередині класу та класів-нащадків;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;internal&lt;/code&gt; доступний лише в межах збірки;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;protected internal&lt;/code&gt; доступний лише в межах збірки, лише всередині класу та класів-нащадків;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;public&lt;/code&gt; доступний для усіх.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter82&#34;&gt;8.2. Будова класу&lt;/h2&gt;
&lt;h3 id=&#34;chapter821&#34;&gt;8.2.1. Поля класу&lt;/h3&gt;
&lt;p&gt;Поля класу синтаксично є звичайними змінними (об&amp;rsquo;єктами) мови. Їх опис задовольняє звичайним правилам оголошення змінних, про що детально говорилося раніше. Змістовно поля задають представлення тій самій абстракції даних, яку реалізує клас.&lt;/p&gt;
&lt;p&gt;Поля характеризують властивості об&amp;rsquo;єктів класу. Коли створюється новий об&amp;rsquo;єкт класу, то цей об&amp;rsquo;єкт є набором полів класу. Два об&amp;rsquo;єкти одного класу мають один і той же набір полів, але різняться значеннями, що зберігаються в цих полях.&lt;/p&gt;
&lt;p&gt;Синтаксис оголошення полів:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модифікатор_доступу тип назва;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Наприклад, оголосимо клас &lt;code&gt;Worker&lt;/code&gt;, який має 3 поля: розмір з/п, прізвище, вік.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.3. Оголошення полів класу &lt;code&gt;Worker&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Worker
  {
    public int salary;         //Розмір з/п
    public string firstname;   //Ім&#39;я
    public string lastname;    //Прізвище
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Зараз клас працівник нагадує структуру! І це не дивно, адже клас є більш розвиненою структурую.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter822&#34;&gt;8.2.2. Методи класу&lt;/h3&gt;
&lt;p&gt;Змінні(поля) екземплярів і методи - дві основні складові класів. Поки наш клас &lt;code&gt;Worker&lt;/code&gt; містить лише дані. Хоча такі класи (без методів) допустимі, більшість класів мають методи.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Методи&lt;/strong&gt; - це процедури (підпрограми), які маніпулюють даними, визначеними в класі, і у багатьох випадках забезпечують доступ до цих даних. Зазвичай різні частини програми взаємодіють з класом за допомогою його методів. Будь-який метод містить одну або декілька інструкцій.&lt;/p&gt;
&lt;p&gt;Кожен метод має ім&amp;rsquo;я, і саме це ім&amp;rsquo;я використовується для його виклику. У загальному випадку методу можна привласнити будь-яке ім&amp;rsquo;я. Але пам&amp;rsquo;ятаєте, що ім&amp;rsquo;я &lt;code&gt;Main()&lt;/code&gt; зарезервовано для методу, з якого починається виконання програми. Крім того, як імена методів не можна використовувати ключові слова С#.&lt;/p&gt;
&lt;p&gt;Імена методів супроводжуються парою круглих дужок. Наприклад, якщо метод має ім&amp;rsquo;я &lt;code&gt;GetVal&lt;/code&gt;, то в тексті буде написано &lt;code&gt;GetVal()&lt;/code&gt;. Це допомагає відрізняти імена змінних від імен методів. Формат запису методу такий:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  доступ тип_повернення імя_метода(параметри)
  {
    тіло метода;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.4. Оголошення класу &lt;code&gt;Worker&lt;/code&gt;. Метод.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Worker
  {
    public int salary;         //Розмір з/п
    public string firstname;   //Ім&#39;я
    public string lastname;    //Прізвище
  
    //Метод, виводить інформацію про працівника на консоль
    public void DisplayInfo()
    {
      Console.WriteLine(&amp;quot;{0} {1}, - {2} грн.&amp;quot;, lastname, firstname, salary);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Зверніть увагу ось на що. Змінні екземпляра &lt;code&gt;salary&lt;/code&gt;, &lt;code&gt;lastname&lt;/code&gt; і &lt;code&gt;firstname&lt;/code&gt; використовуються всередині методу &lt;code&gt;DisplayInfo()&lt;/code&gt; без будь-яких атрибутів, тобто їм не передує ні ім&amp;rsquo;я об&amp;rsquo;єкту, ні оператор &amp;ldquo;крапка&amp;rdquo;. Це дуже важливий момент: якщо метод задіює змінну екземпляра, яка визначена в його класі, він робить це безпосередньо, без явного посилання на об&amp;rsquo;єкт і без оператора &amp;ldquo;крапка&amp;rdquo;. І Це логічно. Адже метод завжди викликається для деякого об&amp;rsquo;єкту конкретного класу. Таким чином, немає необхідності вказувати усередині методу об&amp;rsquo;єкт удруге. Це означає, що значення &lt;code&gt;salalry&lt;/code&gt;, &lt;code&gt;lastname&lt;/code&gt; і &lt;code&gt;firstname&lt;/code&gt; всередині методу &lt;code&gt;DisplayInfo()&lt;/code&gt; неявно вказують на копії цих змінних, що належать об&amp;rsquo;єкту, який викликає метод &lt;code&gt;DisplayInfo()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Інші приклади методів:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public int GetAge();
  protected string GetByName(string name);
  protected static bool IsEquals(Class obj1, Class obj2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Повернення значення методом.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;У загальному випадку існує два варіанти умов для повернення з методу. Перший пов&amp;rsquo;язаний з виявленням закриваючої фігурної дужки, що позначає кінець тіла методу (як продемонстровано на прикладі методу &lt;code&gt;DisplayInfo()&lt;/code&gt;). Другий варіант полягає у виконанні інструкції return. Можливі дві форми використання інструкції &lt;code&gt;return&lt;/code&gt;: одна призначена для void-методів (які не повертають значень), а інша - для повернення значень.&lt;/p&gt;
&lt;p&gt;Негайне завершення &lt;code&gt;void&lt;/code&gt;-методу можна організувати за допомогою наступної форми інструкції &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public void DisplayInfo()
  {
    if(salary &amp;lt; 0)
      return;
    Console.WriteLine(&amp;quot;{0} {1}, {2}&amp;quot;, lastname, firstname, salary);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Хоча &lt;code&gt;void&lt;/code&gt;-методи - не рідкість, більшість методів все ж повертають значення. І справді, здатність повертати значення - одна з найкорисніших якостей методу. Ми вже розглядали приклад повернення значення під час роботи з масивами. Значення, які повертаються методами, використовуються в програмуванні по різному. У одних випадках повернене значення є результатом обчислень, в інших - воно просто означає, успішно чи ні виконана певна операція, а в третіх - воно може бути кодом-стану. Методи повертають викликаючим їх процедурам, використовуючи наступну форму інструкції &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return значення;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Додамо до нашого класу Працівник ще кілька полів і методів.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    Worker &lt;|-- Manager
    Worker &lt;|-- SalesManager
    Worker &lt;|-- Zebra
    Worker : +int age
    Worker : +String gender
    Worker: +isMammal()
    Worker: +mate()
    class Manager{
      +String beakColor
      +swim()
      +quack()
    }
    class SalesManager{
      -int sizeInFeet
      -canEat() 
    }
    class Zebra{
      +bool is_wild
      +run()
    }
&lt;/div&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-file-powerpoint fa-2x text-danger  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;презентація&#34;&gt;Презентація&lt;/h2&gt;
&lt;br&gt;
&lt;iframe src=&#34;https://onedrive.live.com/embed?cid=0A1340BA71B3F0AA&amp;amp;resid=A1340BA71B3F0AA%213939&amp;amp;authkey=ALTJQw7LlW8LZMk&amp;amp;em=2&amp;amp;wdAr=1.7777777777777777&#34; width=&#34;100%&#34; height=&#34;400px&#34; frameborder=&#34;0&#34;&gt;Це вбудований документ &lt;a target=&#34;_blank&#34; href=&#34;https://office.com&#34;&gt;Microsoft Office&lt;/a&gt; на платформі &lt;a target=&#34;_blank&#34; href=&#34;https://office.com/webapps&#34;&gt;Office&lt;/a&gt;.&lt;/iframe&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8task&#34;&gt;Задачі&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle text-warning fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;far fa-bookmark text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8sources&#34;&gt;Де почитати?&lt;/h2&gt;
&lt;p&gt;Книги:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Назва книги&lt;/p&gt;
&lt;p&gt;Сторінки: 1254-1284.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Блоги, статті:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fas fa-link text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt; (RU)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Відео-контент:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fab fa-youtube text-danger  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fab fa-microsoft text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
