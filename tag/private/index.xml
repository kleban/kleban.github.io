<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>private | kleban.page</title>
    <link>/tag/private/</link>
      <atom:link href="/tag/private/index.xml" rel="self" type="application/rss+xml" />
    <description>private</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>uk</language><copyright>© 2021 Yurii Kleban</copyright><lastBuildDate>Sun, 18 Apr 2021 00:00:00 +0100</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>private</title>
      <link>/tag/private/</link>
    </image>
    
    <item>
      <title>Лекція 7. Перелічувані типи та структури</title>
      <link>/courses/csharp-basics/lecture7/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture7/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter71&#34;&gt;7.1. Перелічувані типи&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter711&#34;&gt;7.1.1. Оголошення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter712&#34;&gt;7.1.2. Заміна значень&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter713&#34;&gt;7.1.3. Перетворення&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter72&#34;&gt;7.2. Робота зі структурами&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter721&#34;&gt;7.2.1. Оголошення &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter722&#34;&gt;7.2.2. Поля &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter724&#34;&gt;7.2.4. Методи &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter725&#34;&gt;7.2.5. Конструктори &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter726&#34;&gt;7.2.6. Масив об&amp;rsquo;єктів &lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7task&#34;&gt;Задачі&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter71&#34;&gt;7.1. Перелічувані типи&lt;/h2&gt;
&lt;h3 id=&#34;chapter711&#34;&gt;7.1.1. Оголошення&lt;/h3&gt;
&lt;p&gt;Коли ви створюєте програму, часто буває зручно створити множину символьних імен для базових
числових значень.&lt;/p&gt;
&lt;p&gt;Розглянемо практичну задачу. Припустимо, що ви пишете програму у якій використовуєте
інформацію про дні тижня. До цього ми визначали дні тижня по номеру дня. Наприклад:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.1. Визначення дня тижня за номером&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int a = 4;
switch (a)
{
  case 1:
    Console.WriteLine(&amp;quot;Понеділок&amp;quot;);
    break;
  case 2:
    Console.WriteLine(&amp;quot;Вівторок&amp;quot;);
    break;
  case 3:
    Console.WriteLine(&amp;quot;Середа&amp;quot;);
    break;
  case 4:
    Console.WriteLine(&amp;quot;Четвер&amp;quot;);
    break;
  case 5:
    Console.WriteLine(&amp;quot;Пятниця&amp;quot;);
    break;
  case 6:
    Console.WriteLine(&amp;quot;Субота&amp;quot;);
    break;
  case 7:
    Console.WriteLine(&amp;quot;Неділя&amp;quot;);
    break;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проте подібний варіант заставляє програміста постійно пам’ятати, якій цифрі відповідає конкретний день тижня. Краще було б іменувати ці змінні.&lt;/p&gt;
&lt;p&gt;У подібних ситуаціях використовуються перелічувані типи.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Перелічуваний тип&lt;/strong&gt; (&lt;strong&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/strong&gt;) - це визначений програмістом тип, який може приймати тільки обмежений набір значень.&lt;/p&gt;
&lt;p&gt;За своїм внутрішнім представленням перелічуваний тип є цілим чимлом. Для перелічуваних типів затверджені наступні типи: &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; або &lt;code&gt;ulong&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Згалом перелічувані типи є одним із варіантів &lt;code&gt;User Defined Type&lt;/code&gt; (&lt;code&gt;UDT&lt;/code&gt;), тобто визначених користувачем типів. Такі типи у використанні не мають відмінностей від стандарних типів даних, як &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt; тощо.&lt;/p&gt;
&lt;p&gt;Загальний вигляд запису перелічуваного типу:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модиф_доступу enum Назва : тип
  {
    Елемент1,
    Елемент2,
    ...,
    ЕлементN,
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Модифікатори доступу можуть бути:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;public&lt;/code&gt; – доступний для усіх.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;private&lt;/code&gt; – доступний лише всередині поточного класу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Розглянемо приклади опису перелічуваних типів:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.2. Перелічуваний тип &amp;ldquo;Кольори&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public enum MyColors
  {
    Red,
    Yellow,
    Green
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.3. Перелічуваний тип &amp;ldquo;Арифметичні операції&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public enum Operations
  {
    Plus,
    Minus,
    Divide,
    Multiply
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для днів тижня перелічуваний тип матиме вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.4. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon,  //0
    Tue,  //1
    Wed,  //2
    Thu,  //3
    Fri,  //4
    Sat,  //5
    Sun   //6
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter712&#34;&gt;7.1.2. Заміна значень&lt;/h3&gt;
&lt;p&gt;Перелічувальний тип &lt;code&gt;Days&lt;/code&gt; визначає чотири іменовані константи, відповідні деяким числовим
значенням. У С# перший елемент за замовчуванням має нульовий індекс ($0$) і далі по наростаючій ($n + 1$).&lt;/p&gt;
&lt;p&gt;Ви можете змінити цю поведінку, як вам потрібно:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.5. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; зі зміною цілочисельних значень.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon = 10,
    Tue,  //11
    Wed,  //12
    Thu,  //13
    Fri,  //14
    Sat,  //15
    Sun   //16
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Номери елементів перелічувального типу не обов&amp;rsquo;язково мають бути послідовними. Якщо (з будь-якої причини) є сенс визначити Days таким чином, компілятор заперечувати не буде:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.6. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; зі зміною цілочисельних значень.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon = 10,
    Tue,    //11
    Wed = 75,
    Thu = 100,
    Fri,    //101
    Sat,    //102
    Sun     //103
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для зберігання кожного елементу перелічувального типу за замовчуванням використовується клас
&lt;code&gt;System.Int32&lt;/code&gt;. Ви також можете змінити цю поведінку. Наприклад, якщо ви хочете, аби внутрішні
елементи &lt;code&gt;Days&lt;/code&gt; зберігалися як значення типу &lt;code&gt;byte&lt;/code&gt;, а не як &lt;code&gt;int&lt;/code&gt;, можна написати наступне:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.7. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; унаслідуваний від &lt;code&gt;byte&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days : byte
  {
    Mon = 10,
    ...,
    Sat,
    Sun
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад задачі про визначення днів тижня уже з використанням типу &lt;code&gt;Days&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.8. Приклад розв&amp;rsquo;язання задачі з використанням типу &lt;code&gt;Days&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
     Mon = 1, 
    Tue,    //2
    Wed,    //3
    Thu,    //4
    Fri,    //5
    Sat,    //6
    Sun     //7
  }

  static void Main(string[] args)
  {
    Days day = Days.Thu;
    switch (day)
    {
      case Days.Mon:
        Console.WriteLine(&amp;quot;Понеділок&amp;quot;);
        break;
      case Days.Tue:
        Console.WriteLine(&amp;quot;Вівторок&amp;quot;);
        break;
      case Days.Wed:
        Console.WriteLine(&amp;quot;Середа&amp;quot;);
        break;
      case Days.Thu:
        Console.WriteLine(&amp;quot;Четвер&amp;quot;);
        break;
      case Days.Fri:
        Console.WriteLine(&amp;quot;Пятниця&amp;quot;);
        break;
      case Days.Sat:
        Console.WriteLine(&amp;quot;Субота&amp;quot;);
        break;
      case Days.Sun:
        Console.WriteLine(&amp;quot;Неділя&amp;quot;);
        break;
    }
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Четвер
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Даний приклад є лише демонстраційним і створювати такий перелічуваний тип немає жодної
потреби, адже існує уже вбудований аналогічний тип &lt;code&gt;DayOfWeek&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Перепишіть попереденю програму із використанням стандартного перелічуваного типу даних
&lt;code&gt;DayOfWeek&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter713&#34;&gt;7.1.3. Перетворення&lt;/h3&gt;
&lt;p&gt;Перелічувані типи можуть бути успішно конвертовані у числа, а також зчитані з тектових та числових значень.&lt;/p&gt;
&lt;p&gt;Якщо для &lt;code&gt;enum&lt;/code&gt;-у оголошеному у &lt;em&gt;лістингу 7.8&lt;/em&gt; використати наступний код:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.9. Перетворення типу даних &lt;code&gt;Days&lt;/code&gt; до &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Days day = Days.Tue;
  Console.WriteLine(day);
  Console.WriteLine((int)day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; то результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Tue
  2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можливий також і зворотній варіант:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.10. Перетворення типу даних &lt;code&gt;int&lt;/code&gt; до &lt;code&gt;Days&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Days day = (Days)5;
  Console.WriteLine(day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Fri
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також для роботи з перелічуваними типами варто скоритатися класом &lt;code&gt;Enum&lt;/code&gt;, який має ряд корисних методів та властивостей. Коротко розглянемо один із них, а саме &lt;code&gt;Enum.Parse&amp;lt;&amp;gt;()&lt;/code&gt;. Цей метод дозволяє введений (у вигляді рядка) текст перетворити в об&amp;rsquo;єкт перелічуваного типу.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.11. Перетворення типу даних &lt;code&gt;string&lt;/code&gt; до &lt;code&gt;Days&lt;/code&gt; за допомогою &lt;code&gt;Enu.Parse&amp;lt;&amp;gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть значення enum:\t&amp;quot;);
  Days day = Enum.Parse&amp;lt;Days&amp;gt;(Console.ReadLine());
  Console.WriteLine(&amp;quot;Enum:\t\t&amp;quot; + day);
  Console.WriteLine(&amp;quot;Integer:\t&amp;quot; + (int)day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть значення enum:  Sun //вводиться користувачем
  Enum:           Sun
  Integer:        7

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Детальніше про клас &lt;code&gt;Enum&lt;/code&gt; можна ознайомитися у &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.enum&#34;&gt;документації на сайті компанії Microsoft&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;chapter72&#34;&gt;7.2. Робота зі структурами&lt;/h2&gt;
&lt;h3 id=&#34;chapter721&#34;&gt;7.2.1. Оголошення &lt;/h3&gt;
&lt;p&gt;У C# існує багато різних типів даних для представлення інформації. Проте всі об&amp;rsquo;єкти реального світу описати розробникам усе-таки не вдалося 😄. Наприклад, якщо потрібно описати поняття студент, квартира, веб-сайт, комп&amp;rsquo;ютер та ін. є потреба створювати користувацькі типи даних. 
До таких типів даних належать класи та структури, а також розглянуті вище перелічувані типи. Класи по суті є розширенням структур, вони будуть розглянуті пізніше.&lt;/p&gt;
&lt;p&gt;Структури в C# практично нічим не відрізняються від структур на будь-яких інших мовах.
Відмінності спостерігаються лише на більш низькому рівні. В основному це стосується того, що для
структур в C# не існує базового класу. Але в той же час структури є похідними від типу &lt;code&gt;ValueType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Дуже узагальнивши поняття структури можна визначити його, як згруповану сукупність
ознак(даних) певного об&amp;rsquo;єкта, методів управління цими ознаками та доступу до них.
Структури визначаються за допомогою ключового слова &lt;code&gt;struct&lt;/code&gt;, наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модиф_доступу struct Назва
  {
    // Поля, властивості, методи...
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Структури використовують велику частину того ж синтаксису, що і класи, проте вони більш
обмежені в порівнянні з ними:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; У оголошенні структури поля не можуть ініціалізувати до тих пір, поки вони будуть оголошені як постійні або статичні.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура може не оголошувати використовуваний за замовчуванням конструктор (конструктор без параметрів) або деструктор.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури копіюються при присвоєнні. При присвоєнні структури у нову змінну виконується копіювання всіх даних, а будь-яка зміна нової копії не впливає на дані у вихідній копії.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури є значимими типами, а класи - посилальними типами.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть бути створені без використання оператора &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть оголошувати конструктори, що мають параметри.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура не може наслідуватися від іншої структури або класу і не може бути основою для інших класів. Всі структури наслідуються безпосередньо від &lt;code&gt;System.ValueType&lt;/code&gt;, який наслідується від &lt;code&gt;System.Object&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть реалізовувати інтерфейси.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура може використовуватися як тип, що допускає значення &lt;code&gt;NULL&lt;/code&gt;, і їй можна призначити значення &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Структура&lt;/strong&gt; - це набір залежних один від одного змінних. Залежність тут виключно логічна і визначається умовами задачі. Аби стало зрозуміло, розглянемо простий приклад.&lt;/p&gt;
&lt;h3 id=&#34;chapter722&#34;&gt;7.2.2. Поля &lt;/h3&gt;
&lt;p&gt;Припустимо, ми пишемо програму, що друкує довідки для студентів. Всі довідки мають один і той же вигляд і текст, окрім наступних полів: імя, прізвище, курс, факультет, дата народження. Це залежні дані і їх можна представити у вигляді структури, наприклад так:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.12. Опис структури &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
    public string _firstName;
    public string _lastName; 
    public DateTime _dateOfBirth;
    public string _faculty;
    public int _course;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Усі елементи у представленій вище структурі є полями. Модифікатор доступу &lt;code&gt;public&lt;/code&gt; до полів означає, що доступ до цього поля є повним у всіх блоках програми.
На рис. 7.1. зображено різницю, коли поле оголошено &lt;code&gt;private&lt;/code&gt;, і коли &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td style=&#34;width:50%&#34;&gt;&lt;img style=&#34;width:100%&#34; src=&#34;/media/courses/csharp-basics/lecture7/public_img.png&#34; alt=&#34;&#34;/&gt;&lt;/td&gt;
     &lt;td style=&#34;width:45%&#34;&gt;&lt;img style=&#34;width:100%&#34; src=&#34;/media/courses/csharp-basics/lecture7/private_img.png&#34; alt=&#34;&#34;/&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;center&gt;
&lt;p&gt;Рис. 7.1. Відмінність у доступі до поля залежно від модифікатора &lt;code&gt;public&lt;/code&gt;/&lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Наша структура називається &lt;code&gt;Student&lt;/code&gt; і має 5 полів. Після того, як структура оголошена, ми можемо з нею працювати.&lt;/p&gt;
&lt;p&gt;Розглянемо &lt;strong&gt;приклад&lt;/strong&gt;: &lt;em&gt;потрібно вивести довідку з інформацією про студента.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.13. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student();
      student.firstName = &amp;quot;Дмитро&amp;quot;;
      student.lastName = &amp;quot;Попов&amp;quot;;
      student.faculty = &amp;quot;гуманітарний&amp;quot;;
      student.course = 3;
      student.dateOfBirth = DateTime.Parse(&amp;quot;02/05/1990&amp;quot;);
  
      Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
      Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
      Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
          student.firstName, student.lastName, student.course);
      Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + student.dateOfBirth.ToShortDateString());
      Console.WriteLine(&amp;quot; Факультет: &amp;quot; + student.faculty);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: гуманітарний
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter724&#34;&gt;7.2.4. Методи &lt;/h3&gt;
&lt;p&gt;Структури підримують також і &lt;strong&gt;методи&lt;/strong&gt;. Виведення інформації про студента можна винести у метод структури і викликати у програмі. Для цього створимо метод &lt;code&gt;Print&lt;/code&gt;. Також напишемо метод, який буде повертати повне ім&amp;rsquo;я студента, наприклад, Попов Дмитро.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.14. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;. Додавання методів.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  
      public void Print()
      {
          Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
          Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
          Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
              firstName, lastName, course);
          Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + dateOfBirth.ToShortDateString());
          Console.WriteLine(&amp;quot; Факультет: &amp;quot; + faculty);
      }
  
      public string GetFullName()
      {
          return firstName + &amp;quot; &amp;quot; + lastName;
      }
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student();
      student.firstName = &amp;quot;Дмитро&amp;quot;;
      student.lastName = &amp;quot;Попов&amp;quot;;
      student.faculty = &amp;quot;гуманітарний&amp;quot;;
      student.course = 3;
      student.dateOfBirth = DateTime.Parse(&amp;quot;02/05/1990&amp;quot;);
  
      student.Print();
      Console.WriteLine(&amp;quot;\n &amp;quot; + student.GetFullName() + &amp;quot;\n&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: гуманітарний

 Дмитро Попов
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter725&#34;&gt;7.2.5. Конструктори &lt;/h3&gt;
&lt;p&gt;Структури підтримують також і конструктори.&lt;/p&gt;
&lt;p&gt;У об&amp;rsquo;єктно-орієнтованому програмуванні конструктор класу (від англ. &lt;code&gt;constructor&lt;/code&gt;, інколи скорочують &lt;code&gt;ctor&lt;/code&gt;) - спеціальний блок інструкцій, що викликається при створенні об&amp;rsquo;єкту з використанням ключового слова &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Конструктор схожий з методом, але відрізняється від методу тим, що не має явно оголошеного типу повертаємого значення, не наслідується. Конструктори виділяються наявністю однакового імені з ім&amp;rsquo;ям класу, в якому оголошуються. Конструкторів може бути одразу кілька.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.15. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;. Додавання конструктора.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      // Поля
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  
      // Конструктор
      public Student(string _firstName, string _lastName, DateTime _dateOfBirth, string _faculty, int _course)
      {
          this.firstName = _firstName;
          this.lastName = _lastName;
          dateOfBirth = _dateOfBirth;
          faculty = _faculty;
          course = _course;
      }
  
      // Методи
      public void Print()
      {
          Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
          Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
          Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
              firstName, lastName, course);
          Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + dateOfBirth.ToShortDateString());
          Console.WriteLine(&amp;quot; Факультет: &amp;quot; + faculty);
      }
  
      public string GetFullName()
      {
          return firstName + &amp;quot; &amp;quot; + lastName;
      }
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student(&amp;quot;Дмитро&amp;quot;, &amp;quot;Попов&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;гуманітарний&amp;quot;, 3);
      student.Print();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат виконання аналогічних до результату з лістингу 7.13.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter726&#34;&gt;7.2.6. Масив об&amp;rsquo;єктів &lt;/h3&gt;
&lt;p&gt;Якщо порівняти приклад та 7.13, то коду приблизно однаково. Але при зростанні кількості обєктів типу Студент буде видно суттєву оптимізацію. Напишемо програму, яка виводить на екран довідки 3-х студентів.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.16. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  static void Main(string[] args)
  {
    Console.OutputEncoding = Encoding.Unicode;
     
    Student[] group = new Student[3];
    group[0] = new Student(&amp;quot;Дмитро&amp;quot;, &amp;quot;Попов&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
    group[1] = new Student(&amp;quot;Іван&amp;quot;, &amp;quot;Петров&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
    group[2] = new Student(&amp;quot;Олена&amp;quot;, &amp;quot;Чуприна&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
  
    foreach (Student student in group)
      student.Print();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
                ДОВIДКА
 пiдтвреджує, що
 Іван Петров дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
                ДОВIДКА
 пiдтвреджує, що
 Олена Чуприна дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Детальніше про роботу з обєктами буде розглянуто в Темі 8. ООП.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7task&#34;&gt;Задачі&lt;/h2&gt;
&lt;h4 id=&#34;chapter7task1&#34;&gt;Задача 7.1&lt;/h4&gt;
&lt;p&gt;Написати програму, що дозволяє маніпулювати даними про товари у магазині. Товар описати як окрему структуру (struct) з полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва (&lt;code&gt;Title&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Категорія (&lt;code&gt;Category&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Ціна (&lt;code&gt;Price&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Кількість (&lt;code&gt;Quantity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Категорії товарів визначені як перелічуваний тип (enum) і мають наперед визначені значення, наприклад:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Промислові товари (&lt;code&gt;Industrial products&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Побутова хімія (&lt;code&gt;Household  chemicals&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Продукти харчування (&lt;code&gt;Food&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Реалізувати функції:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вивести список товарів&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Додавати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Редагувати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Видалити товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вийти з програми&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Взаємодію з користувачем реалізувати через меню.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter7task2&#34;&gt;Задача 7.2&lt;/h4&gt;
&lt;p&gt;Описати структуру &lt;strong&gt;Книга&lt;/strong&gt; (&lt;code&gt;Book&lt;/code&gt;) з даними:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Автор&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Рік видання&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Місце видання&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Реалізувати метод для виведення інформації про книгу, наприклад &lt;code&gt;Print()&lt;/code&gt;, який приймає 1 параметр &lt;code&gt;showFullInfo&lt;/code&gt; типу &lt;code&gt;bool&lt;/code&gt; і в залежності від його значення виводить інформацію про книгу у форматі:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; якщо &lt;code&gt;showFullInfo == true&lt;/code&gt;, то виводиться стрічка з інформацією про усі поля книги;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; якщо &lt;code&gt;showFullInfo == false&lt;/code&gt;, то виводиться стрічка з інформацією тільки про поля &lt;strong&gt;Назва&lt;/strong&gt; та &lt;strong&gt;Автор&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Автора&lt;/strong&gt; реалізувати як окрему структуру з полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Імя&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Прізвище&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Дата народження&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Створити масив з 5-ти книг та вивети його на консоль методом &lt;code&gt;Print()&lt;/code&gt; з різними параметрами.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter7task1&#34;&gt;Задача 7.3&lt;/h4&gt;
&lt;p&gt;На основі структур, створених у &lt;a href=&#34;#chapter7task2&#34;&gt;&lt;strong&gt;завданні 7.2&lt;/strong&gt;&lt;/a&gt; написати програму для маніпулюванням інформації про книги у каталозі.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h4 id=&#34;chapter7task5&#34;&gt;Задача 7.4&lt;/h4&gt;
&lt;p&gt;Написати програму для маніпулювання даними про товари у магазині.
Кожен товар повинен обов&amp;rsquo;язково описуватися полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Артикул (ідентифікатор товару)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Бренд&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Ціна&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Залишок на складі (кількість)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Бренди товарів реаліузвати як перелічуваний тип.&lt;/p&gt;
&lt;p&gt;Реалізувати меню:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Список товарів&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Продати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вивести товари по бренду&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Додати товар у каталог&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вийти&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter7questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
