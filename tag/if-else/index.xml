<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>if-else | kleban.page</title>
    <link>/tag/if-else/</link>
      <atom:link href="/tag/if-else/index.xml" rel="self" type="application/rss+xml" />
    <description>if-else</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>uk</language><copyright>© 2021 Yurii Kleban</copyright><lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0100</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>if-else</title>
      <link>/tag/if-else/</link>
    </image>
    
    <item>
      <title>Лекція 5. Оператори розгалуження та цикли</title>
      <link>/courses/csharp-basics/lecture5/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture5/</guid>
      <description>&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter51&#34;&gt;5.1. Оператори розгалуження&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter511&#34;&gt;5.1.1. Оператор &lt;code&gt;if-else&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter512&#34;&gt;5.1.2. Оператор &lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter513&#34;&gt;5.1.3. Тернарний оператор&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter52&#34;&gt;5.2. Використання циклів під час написання програм&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter521&#34;&gt;5.2.1. Цикл &lt;code&gt;for&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter522&#34;&gt;5.2.2.Цикли &lt;code&gt;while&lt;/code&gt; та &lt;code&gt;do-while&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter5samples&#34;&gt;Приклади розв&amp;rsquo;язання задач&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter5tasks&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter5solutions&#34;&gt;Рішення до задач&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4qustions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4sourses&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter51&#34;&gt;5.1. Оператори розгалуження&lt;/h2&gt;
&lt;p&gt;У C# для реалізації розгалужень коду використовуються
спеціальні оператори: &lt;code&gt;if-else&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter511&#34;&gt;5.1.1. Оператор &lt;code&gt;if-else&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Якщо є потреба перевірити у коді програми виконання якоїсь
умови та за її результатами перейти до одного із блоків програми
зазвичай використовують оператор &lt;code&gt;if-else&lt;/code&gt;. Загальний вигляд формату
використання оператора &lt;code&gt;if-else&lt;/code&gt; зображений у лістингу 5.1.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.1. Формат використання оператора &lt;code&gt;if-else&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  if (умова)
  {
    //інструкція
  }
  else
  {
    //інструкція
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вираз «умова» завжди повинен повертати результат у вигляді елемента логічного типу. Тобто, «умова» може бути або &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, або &lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Якщо «умова» рівна &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, то виконається інструкція (або код) записана у дужках після &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt;. Якщо ж «умова» рівна &lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, то виконається інструкція записана у дужках після &lt;strong&gt;&lt;code&gt;else&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Якщо після &lt;code&gt;if&lt;/code&gt; або &lt;code&gt;else&lt;/code&gt; тільки одна інструкція (можна ототожнити з один рядком коду), то «фігурні» дужки &lt;code&gt;{}&lt;/code&gt; не є обов’язковими.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Розглянемо приклад: написати програму, що визначає парність/непарність числа. Тобто, користувач вводить число, а програма показує на консоль у текстовому вигляді: &lt;code&gt;«парне»&lt;/code&gt; або &lt;code&gt;«непарне»&lt;/code&gt; (лістинг 5.2).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.2. Перевірка числа на парність&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a = int.Parse(Console.ReadLine());
  if(a % 2 == 0)
    Console.WriteLine(&amp;quot;парне&amp;quot;);
  else
    Console.WriteLine(&amp;quot;непарне&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Конструкції &lt;code&gt;if-else&lt;/code&gt; можуть вкладеними одна в одну без обмежень
по глибині (лістинг 5.3). Проте дуже глибокої вкладеності варто уникати,
адже це ускладнює читання та розуміння коду програми.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;if&lt;/code&gt; є обов’язковим і повинно існувати у всіх подібних
конструкціях, у той же час &lt;code&gt;else&lt;/code&gt; – необов’язковий.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.3. Приклад використання вкладених операторів if-else&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  if (умова1)
  {
    if (умова2)
    {
      //інструкція
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також конструкція &lt;code&gt;if-else&lt;/code&gt; може мати структуру дерева із багатьма
розгалуженнями. Така структура зазвичай записується як&lt;code&gt; if-else-if&lt;/code&gt;
(лістинг 5.4).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.4. Формат запису &lt;code&gt;if-else-if&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  if (умова)
  {/*код*/}
  else if (умова)
      {/*код*/}
      else if (умова)
          {/*код*/}
          else {/*код*/}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вирази обчислюються зверху-вниз. Якщо один із виразів (&lt;code&gt;«умова»&lt;/code&gt;) отримає істинний результат, то програмний код, пов&amp;rsquo;язаний із цією гілкою розгалуження виконається, а всі інші гілки будуть 
пропущені. Якщо ж не виконається жодна з умов, то буде запущено код
всередині останньої інструкції &lt;code&gt;else&lt;/code&gt; (у цьому випадку &lt;code&gt;else&lt;/code&gt; теж не
обов’язковий).&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter512&#34;&gt;5.1.2. Оператор &lt;code&gt;switch&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Наступною інструкцією для реалізації розгалуження, або
точніше вибору значення є &lt;code&gt;switch&lt;/code&gt;. &lt;code&gt;Switch&lt;/code&gt; забезпечує багатонаправлене
розгалуження і дозволяє вибрати один із варіантів із даної множини
альтернатив. Ця конструкція працює наступним чином:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Значення виразу послідовно порівнюється з константами із заданого списку.&lt;/li&gt;
&lt;li&gt;При виявленні збігу для однієї з умов порівняння виконується послідовність інструкцій, пов&amp;rsquo;язана з цією умовою.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Оператор &lt;code&gt;switch&lt;/code&gt; приймає значення цілочисельного типу (наприклад, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; тощо) або тип &lt;code&gt;string&lt;/code&gt;. Типи даних, що представляють числа з дробовою частиною не можуть бути використані даному випадку.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Switch&lt;/code&gt; складається з набору &lt;code&gt;case&lt;/code&gt; конструкцій. Кожна конструкція &lt;code&gt;case&lt;/code&gt; представлена у вигляді літерала такого ж типу даних як і значення, що приймає &lt;code&gt;switch&lt;/code&gt;. Усі &lt;code&gt;case&lt;/code&gt; конструкції у межах одного &lt;code&gt;switch&lt;/code&gt; можуть мати тільки унікальні константи. Формат оголошення продемонстровано у лістингу 5.5.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.5. Формат оголошення &lt;code&gt;switch&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  switch (значення)
  {
    case костанта1:
      //інструкція
      break;
    case костанта2:
      //інструкція;
      break;
    ...
    default:
      //інструкція
      break;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Case&lt;/code&gt;-конструкції перевіряються у порядку розміщення. Вкінці
кожного &lt;code&gt;case&lt;/code&gt; повинно бути ключове слово &lt;code&gt;break&lt;/code&gt;, що означає вихід із
&lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Також у &lt;code&gt;switch&lt;/code&gt; використовують конструкцію &lt;code&gt;default&lt;/code&gt;, яка не є
обов’язковою і виконується лише у випадку, якщо жодна із &lt;code&gt;case&lt;/code&gt;-конструкцій так і не відпрацювала.&lt;/p&gt;
&lt;p&gt;Для розуміння принципів роботи &lt;code&gt;switch&lt;/code&gt; розглянемо приклад. Написати програму, яка у залежності від введеної цифри виводить на
консоль пору року: 1 — «Зима», 2 — «Весна», 3 — «Літо», 4 — «Осінь»,
інше число — «Введіть число із діапазону [1;4]» (лістинг 5.6).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.6. Розв’язання задачі «Пори року» з використанням &lt;code&gt;switch&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Введіть номер пори року [1;4]:\t&amp;quot;);
  int res = int.Parse(Console.ReadLine());
  
  switch (res)
  {
    case 1:
      Console.WriteLine(&amp;quot;Зима&amp;quot;);
      break;
    case 2:
      Console.WriteLine(&amp;quot;Весна&amp;quot;);
      break;
   case 3:
     Console.WriteLine(&amp;quot;Літо&amp;quot;);
     break;
   case 4:
     Console.WriteLine(&amp;quot;Зима&amp;quot;);
     break;
   default:
     Console.WriteLine(&amp;quot;Введіть число від 1 до 4&amp;quot;);
     break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть номер пори року [1;4]: 2
  Весна
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У випадку, якщо потрібно, щоб одна і та ж інструкція виконувалася для кількох різних значень констант код &lt;code&gt;switch&lt;/code&gt; може мати
вигляд як на лістингу 5.7.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.7. Приклад використання &lt;code&gt;switch&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Введіть оцінку [1-12]:\t&amp;quot;);
  int res = int.Parse(Console.ReadLine());
  
  switch (res)
  {
     case 1:
     case 2:
     case 3:
       Console.WriteLine(&amp;quot;Низький рівень&amp;quot;);
       break;
     ...
     case 10:
     case 11:
     case 12:
       Console.WriteLine(&amp;quot;Високий рівень&amp;quot;);
       break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У прикладі показано виведення шкільких оцінок відповідно до 12-ти бальної системи по рівнях.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter513&#34;&gt;5.1.3. Тернарний оператор&lt;/h3&gt;
&lt;p&gt;Інколи для простої заміни оператора &lt;code&gt;if-else&lt;/code&gt; використовують тернарний оператор. Тернарний оператор отримав свою назву від
кількості задіяних виразів (3) і позначається символами &lt;code&gt;?:&lt;/code&gt;. Загальний
формат запису тернарного оператора має вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Вираз_1 ? Вираз_2 : Вираз_3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;де &lt;code&gt;Вираз_1&lt;/code&gt; — логічний вираз, за рузультатом обчислення якого визначається наступна дія, &lt;code&gt;Вираз_2&lt;/code&gt; — значення, що повертається, якщо результатом &lt;code&gt;Виразу_1&lt;/code&gt; є &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Вираз_3&lt;/code&gt; — значення, що повертається, якщо результатом &lt;code&gt;Виразу_1&lt;/code&gt; є &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Для демонстрації роботи тернарного оператора спробуємо розвязати задачу визначення модуля цілого числа. Можна було б для також задачі скористатися оператором &lt;code&gt;if-else&lt;/code&gt;, проте тернарний оператор
спрощує синтаксис запису такого коду (лістинг 5.8).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.8. Приклад використання тернарного оператора: визначення модуля числа&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Введіть ціле число:\t&amp;quot;);
  int a = Convert.ToInt32(Console.ReadLine());
  int absval = (a &amp;gt; 0) ? a : -a;
  Console.WriteLine(&amp;quot;ABS: {0}&amp;quot;, absval);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Увага! Для знаходження модуля числа у C# існує спеціальний
метод &lt;code&gt;Math.Abs(значення)&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter52&#34;&gt;5.2. Використання циклів під час написання програм&lt;/h2&gt;
&lt;p&gt;Для виконання повторюваних операцій у програмуванні
використовуються цикли. Цикл – це спеціальна конструкція мови
програмування для багаторазового виконання набору інструкцій.
У C# існують 4 типи циклів: &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter521&#34;&gt;5.2.1. Цикл &lt;code&gt;for&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Загальний синтаксис оголошення циклу &lt;code&gt;for&lt;/code&gt; має вигляд як на
лістингу 5.9. Блок «ініціалізація» використовується для оголошення
керуючих змінних циклу. У другому блоці оголошення циклу
перевіряється умова можливості продовження виконання циклу. Якщо
«умова» повератає &lt;code&gt;false&lt;/code&gt;, то виконання циклу завершується. Блок
«інструкції» довляє виконувати дії над змінними програми. Найчастіше
у цьому блоці відбуваються дії над керуючими змінними.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.9. Синтаксис оголошення циклу &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for(ініціалізація; умова; інструкції)
  {
    //код;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Усі три блоки «ініціалізація», «умова» та «інструкції» не є
обов’язковим у оголошенні циклу &lt;code&gt;for&lt;/code&gt;, проте розділювачі потрібно
записати обов’язково (лістинг 5.10).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.10. Вічний цикл &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for(;;)
  {
    //код;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад задачі: знайти суму усіх чисел від 1 до 10-ти
включно (лістинг 5.11).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.11. Приклад використання циклу &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int sum = 0;
  for (int i = 1; i &amp;lt;= 10; ++i)
    sum += i;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Якщо після &lt;code&gt;for&lt;/code&gt; тільки одна інструкція, то «фігурні» дужки &lt;code&gt;{}&lt;/code&gt; не є обов’язковими.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Для деталізації розглянемо ще один приклад програми і
розберемо його (лістинг 5.12).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.12. Приклад використання циклу &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int sum = 0;
  for (int i = 0, j = 1; sum &amp;lt; 20; i++, j += 2)
  {
      sum += i + j;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проаналізуємо, як повинна відпрацювати дана програма та які
значення будуть мати змінні на кожній ітерації циклу.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Початок: i = 0; j = 1; sum = 0.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;1-ша ітерація: i = 1; j = 3; sum = 5.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;2-га ітерація: i = 2; j = 5; sum = 12.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;3-тя ітерація: i = 3; j = 7; sum = 22&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Також у циклах можуть використовуватися ключові слова &lt;code&gt;break&lt;/code&gt;
та &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ключове слово &lt;code&gt;break&lt;/code&gt; зупиняє виконання циклу і переходить до
виконання наступного після циклу коду. Ключове слово &lt;code&gt;continue&lt;/code&gt;
переводить цикл на нову ітерацію.&lt;/p&gt;
&lt;p&gt;На прикладі лістингу 5.13. розглянемо використання цих
операторів. Програма працює наступним чином: цикл послідовно
проходить по усіх числах та виводить їх на екран; якщо число кратне 3-м, то цикл переходить на нову ітерацію; якщо число кратне 7-ми, то цикл закінчується.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.13. Приклад використання операторів &lt;code&gt;break&lt;/code&gt; та &lt;code&gt;continue&lt;/code&gt; у циклах&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for (int i = 0; i &amp;lt; 10; ++i)
  {
     if (i%3 == 0)
        continue;
     
     Console.Write(i + &amp;quot; &amp;quot;);
     
     if(i%7==0)
        break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 2 4 5 7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;chapter522&#34;&gt;5.2.2.Цикли &lt;code&gt;while&lt;/code&gt; та &lt;code&gt;do-while&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Цикл while у мінімально модифікованому вигляді є частиною
практично усіх мов програмування. Тіло циклу виконується до тих пір,
поки залишається істинною умова &lt;code&gt;while&lt;/code&gt;. Синтаксис оголошення має
вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  while (умова) { 
      //інструкції 
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Цикл &lt;code&gt;while&lt;/code&gt; може працювати з передумовою та післяумовою. Цикл з передумовою спочатку перевіряє умову, а після цього виконує або не виконує ітерацію циклу. Цикл з післяумовою спочатку виконується
(одна ітерація), а потім тільки перевіряється умова. Таким чином можна
зробити висновок, що цикл з післяумовою виконається мінімум 1 раз.
Синтаксис огололшення циклу &lt;code&gt;while&lt;/code&gt; з післяумовою:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  do 
  { 
      //інструкції 
  } while (умова);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для порівняння циклів &lt;code&gt;while&lt;/code&gt; розглянемо лістинги 5.14 та 5.15. У
першому випадку не буде виведено на консоль нічого, у другому буде
виведено «5».&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.14. Приклад використання циклу &lt;code&gt;while&lt;/code&gt; з передумовою&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int x = 5;
  while (x &amp;lt; 5)
  {
       Console.Write(x + &amp;quot; &amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 5.15. Приклад використання циклу &lt;code&gt;while&lt;/code&gt; з післяумовою&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int x = 5;
  do
  {
      Console.Write(x + &amp;quot; &amp;quot;);
  } while (x &amp;lt; 5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Робота з циклом &lt;code&gt;foreach&lt;/code&gt; буде розглянута у розділі 6 разом із вивченням масивів.&lt;/p&gt;
&lt;hr&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;h2 id=&#34;chapter5samples&#34;&gt;Приклади розв&amp;rsquo;язання задач&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Приклад 5.1.&lt;/strong&gt; Написати програму, яка генерує і виводить на консоль 10 випадкових чисел із діапазону від 10 до 50.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Розв&amp;rsquo;язок:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Random r = new Random();
  for (int i = 0; i &amp;lt; 10; ++i)
  {
      Console.Write(r.Next(10,50) + &amp;quot;\t&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Приклад 5.2.&lt;/strong&gt; Написати програму, яка серед 5-ти введених чисел
знаходить найменше. Програма працює наступним чином: користувач
вводить за запитом системи числа, а потім на консоль виводиться
найменше з них.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Розв&amp;rsquo;язок:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int min = int.MaxValue;
  for (int i = 0; i &amp;lt; 5; ++i)
  {
     Console.Write(&amp;quot;Введіть {0} число:\t&amp;quot;, i + 1);
     int num = int.Parse(Console.ReadLine());
     min = num &amp;lt; min ? num : min;
  }
  Console.WriteLine(&amp;quot;Найменше число:\t{0}&amp;quot;,min);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Приклад 5.3.&lt;/strong&gt; Написати програму, що моделює роботу навігації.
Програма повинна пропонувати користувачу вибір дії шляхом введення
символа з клавіатури. Доступними діями є:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Hello&lt;/code&gt; - виводить на консоль текст «&lt;code&gt;Hello, user!&lt;/code&gt;»&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Time&lt;/code&gt; - виводить години, хвилини та секунди на поточному ПК&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;Exit&lt;/code&gt; - завершує роботу програми.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Розв&amp;rsquo;язок:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  while (true)
  {
     Console.WriteLine(&amp;quot;\nMake a choice:&amp;quot;);
     Console.Write(&amp;quot; [H]ello\n [T]ime\n E[x]it\n\t\t:&amp;gt;&amp;quot;);
     string res = Console.ReadLine();
     
     switch (res)
     {
       case &amp;quot;H&amp;quot;:
       case &amp;quot;h&amp;quot;:
          Console.WriteLine(&amp;quot;Hello, user!&amp;quot;);
          break;
       case &amp;quot;T&amp;quot;:
       case &amp;quot;t&amp;quot;:
         Console.WriteLine(
         DateTime.Now.ToString(&amp;quot;HH:mm:ss&amp;quot;,
         new CultureInfo(&amp;quot;uk&amp;quot;)));
         break;
       case &amp;quot;X&amp;quot;:
       case &amp;quot;x&amp;quot;:
         return;
         break;
       default:
         Console.WriteLine(&amp;quot;Wrong choice&amp;quot;);
         break;
     }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;h2 id=&#34;chapter5tasks&#34;&gt;Задачі&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.1.&lt;/strong&gt; Написати програму, що знаходить добуток чисел у вказаному
користувачем діапазоні.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.2.&lt;/strong&gt; Дано цілі додатні числа $i$ та $k$ . Реалізувати функцію, що обчислює значення виразу:&lt;/p&gt;
&lt;p&gt;$$
z = i - k, при i кратному k
$$
$$z = k - i, при k кратному i$$
$$z = k + i, при{ }всіх{ }інших{ }умовах$$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.3.&lt;/strong&gt; Обчислити значення виразу $y=\frac{(x + 5)^3}{\sqrt{x + 1}}$ для усіх $x$ з діапазону $[10; 100]$ кратних $7$-ми. На консоль вивести результат у вигляді, наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  x   y
  7   125.21
  14  100.41
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Примітка. Вивести на консоль не більше двох знаків після розділювача дробової та цілої частини (крапки) для значень $y$.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.4.&lt;/strong&gt; Написати програму, що виводить на консоль таблицю множення на вказане користувачем число. Наприклад, якщо користувач ввів число $5$, то результат виконання програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  5 x 1 = 5
  5 x 2 = 10
  ...
  // і так далі...
  ...
  5 x 10 = 50
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.5.&lt;/strong&gt; Відомо, що $1 дюйм$ рівний $2.54 см$. Розробити додаток, що
переводить дюйми в сантиметри і навпаки. Діалог з користувачем
реалізувати через систему меню.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.6.&lt;/strong&gt; Написати програму, яка виводить на екран лінію з символів.
Число символів та сам символ, і яка буде лінія вертикальна, або
горизонтальна - вказує користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.7.&lt;/strong&gt; Написати програму, що знаходить суму усіх чисел кратних $7$ у діапазоні від $0$ до $100$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.8.&lt;/strong&gt; Написати програму, що обчислює суму цифр введено числа.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.9.&lt;/strong&gt; Написати програму, що виводить на екран цифри введеного числа у зворотному порядку. Наприклад, $248641 &amp;gt; 146842$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.10.&lt;/strong&gt; Написати програму, дозволяє вивести на консоль в порядку спадання непарні числа із діапазону $[5;90]$, кратні $3$ та не кратні $5$. одночасно.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.11.&lt;/strong&gt; Розробити програму, що працює як найпростіший калькулятор, який виконує арифметичні дії &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; (скористатися оператором &lt;code&gt;switch&lt;/code&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.12.&lt;/strong&gt; Знайти найбільший спільний дільник двох натуральних чисел, використавши алгоритм Евкліда. &lt;code&gt;Алгоритм Евкліда полягає в наступному: від більшого числа віднімається менше до тих пір, поки вони не стануть рівними; отримане в результаті число і буде найбільшим спільним дільником.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Задача 5.13.&lt;/strong&gt; Написати програму, яка виводить на консоль фігури, зображені нижче. &lt;em&gt;Примітка. Розміри фігур вказує користувач.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Фігура 1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;****************
****************
****************
****************
****************
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Фігура 2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;****************
*              *
*              *
*              *
****************
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Фігура 3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;********
******
****
**
*
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;

  &lt;i class=&#34;fas fa-play fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;h2 id=&#34;chapter5solutions&#34;&gt;Рішення до задач&lt;/h2&gt;
&lt;p&gt;Рішення до задачі 5.1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть нижню межу:&amp;quot;);
  int low = int.Parse(Console.ReadLine());
  Console.Write(&amp;quot;Введіть верхню межу:&amp;quot;);
  int high = int.Parse(Console.ReadLine());
  
  int mult = 1;
  for (int i = low; i &amp;lt;= high; i++)
  {
    mult *= i;
  }
  
  Console.WriteLine($&amp;quot;Mult: {mult}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також код алгоритму можна скоротити наступним чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  int mult = 1;
  for (; low &amp;lt;= high; mult *= low++) ;
  Console.WriteLine($&amp;quot;Mult: {mult}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Рішення до задачі 5.3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.WriteLine($&amp;quot;x\ty&amp;quot;);
  for (int x = 10; x &amp;lt;= 100; x++)
  {
    if (x % 7 == 0)
    {
      double y = Math.Pow(x + 5, 3) / Math.Sqrt(x + 1);
      Console.WriteLine($&amp;quot;{x}\t{y:f2}&amp;quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Рішення до задачі 5.4:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.Write(&amp;quot;Enter number:\t&amp;quot;);
  int num = int.Parse(Console.ReadLine());
  for (int i = 1; i &amp;lt; 10; i++)
    Console.WriteLine($&amp;quot;{num} x {i} = {num*i}&amp;quot;);
    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Рішення до задачі 5.10&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  for (int i = 90; i &amp;gt;= 5; i--)
    if(i % 3 == 0 &amp;amp;&amp;amp; i % 5 != 0 &amp;amp;&amp;amp; i % 2 == 1)
      Console.WriteLine(i);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;h2 id=&#34;chapter4qustions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;h2 id=&#34;chapter4sourses&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;h2 id=&#34;chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
