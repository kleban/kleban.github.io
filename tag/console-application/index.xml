<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>console application | kleban.page</title>
    <link>/tag/console-application/</link>
      <atom:link href="/tag/console-application/index.xml" rel="self" type="application/rss+xml" />
    <description>console application</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>uk</language><copyright>© 2021 Yurii Kleban</copyright><lastBuildDate>Sun, 18 Apr 2021 00:00:00 +0100</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>console application</title>
      <link>/tag/console-application/</link>
    </image>
    
    <item>
      <title>Лекція 3. Основи роботи з Visual Studio та платформою .NET</title>
      <link>/courses/csharp-basics/lecture3/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture3/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#31коротка-характеристика-та-історія-розвитку-середовища-розробки-visual-studio&#34;&gt;3.1	Коротка характеристика та історія розвитку середовища розробки Visual Studio.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#контрольні-запитання&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#список-використаних-джерел&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#додаткові-матеріали-для-завнатаження&#34;&gt;Додаткові матеріали для завнатаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Розділ у процесі наповнення.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;31коротка-характеристика-та-історія-розвитку-середовища-розробки-visual-studio&#34;&gt;3.1	Коротка характеристика та історія розвитку середовища розробки Visual Studio.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Microsoft Visual Studio&lt;/code&gt;&lt;/strong&gt; - лінійка продуктів компанії Майкрософт, що включають інтегроване середовище розробки програмного забезпечення і ряд інших інструментальних засобів.&lt;/p&gt;
&lt;p&gt;Середовище розробки &lt;code&gt;Visual Studio&lt;/code&gt; представляє собою повний набір інструментів для створення як настільних додатків, так і корпоративних веб-додатків для спільної роботи груп. Використовуючи ефективні інструменти розробки &lt;code&gt;Visual Studio&lt;/code&gt;, засновані на використанні компонентів, та інші технології, можна не тільки створювати ефективно працюючі настільні додатки, але і спрощувати спільне проектування, розробку і розгортання корпоративних рішень.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Visual Studio&lt;/code&gt; включає один або декілька компонентів з наступних:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Visual Basic .NET&lt;/code&gt;, а до його появи - &lt;code&gt;Visual Basic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visual C++&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visual C#&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visual F#&lt;/code&gt; (включений у &lt;code&gt;Visual Studio 2010&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Багато варіантів поставки також включають	&lt;code&gt;Microsoft SQL Server&lt;/code&gt; або &lt;code&gt;Microsoft SQL Server Express&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;На сьогодні &lt;code&gt;Visual Studio&lt;/code&gt; уже підтримує досить велику кількість мов програмування та фреймворків не лише зі стеку &lt;code&gt;.NET&lt;/code&gt;-технологій.&lt;/p&gt;
&lt;p&gt;Опишемо коротко найважливіші версії &lt;code&gt;IDE Visual Studio&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 97&lt;/code&gt; - перша випущена версія &lt;code&gt;Visual Studio&lt;/code&gt;, у ній вперше були зібрані разом різні засоби розробки ПЗ. Вона була випущена в двох версіях &lt;code&gt;Professional&lt;/code&gt; та &lt;code&gt;Enterprise&lt;/code&gt;. Вона включала в себе &lt;code&gt;Visual Basic 5.0&lt;/code&gt;, &lt;code&gt;Visual C++ 5.0&lt;/code&gt;, &lt;code&gt;Visual J++ 1.1&lt;/code&gt;, &lt;code&gt;Visual FoxPro 5.0&lt;/code&gt;, вперше з&amp;rsquo;явилося середовище розробки &lt;code&gt;ASP - Visual InterDev&lt;/code&gt;. &lt;code&gt;Visual Studio 97&lt;/code&gt; - була першою спробою &lt;code&gt;Microsoft&lt;/code&gt; створити єдине середовище для розробки на різних мовах програмування: &lt;code&gt;Visual C++&lt;/code&gt;, &lt;code&gt;Visual J++&lt;/code&gt;, &lt;code&gt;Visual InterDev&lt;/code&gt;, і MSDN використовували одне середовище, так зване &lt;code&gt;Developer Studio&lt;/code&gt;. &lt;code&gt;Visual Basic&lt;/code&gt; і &lt;code&gt;Visual FoxPro&lt;/code&gt; використовували окремі середовища для розробки.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio. NET&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Rainier&lt;/code&gt;; внутрішня версія 7.0) - випущена в лютому 2002 (включає &lt;code&gt;.NET Framework 1.0&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio. NET 2003&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Everett&lt;/code&gt;; внутрішня версія 7.1) - випущена в квітні 2003 (включає &lt;code&gt;.NET Framework 1.1&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 2005&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Whidbey&lt;/code&gt;; внутрішня версія 8.0) - випущена в кінці жовтня 2005, остання що офіційно працює на &lt;code&gt;Windows 2000&lt;/code&gt;, (включає &lt;code&gt;.NET Framework 2.0&lt;/code&gt;). На початку листопада 2005 також вийшла серія продуктів в редакції &lt;code&gt;Express&lt;/code&gt;: &lt;code&gt;Visual C++ 2005 Express&lt;/code&gt;, &lt;code&gt;Visual Basic 2005 Express&lt;/code&gt;, &lt;code&gt;Visual C # 2005 Express&lt;/code&gt; і ін. 19 квітня 2006 редакція &lt;code&gt;Express&lt;/code&gt; стала безкоштовною.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 2008&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Orcas&lt;/code&gt;) - випущена 19 листопада 2007, одночасно з . &lt;code&gt;NET Framework 3.5&lt;/code&gt;. Націлена на створення додатків для ОС &lt;code&gt;Windows Vista&lt;/code&gt; (але підтримує і &lt;code&gt;XP&lt;/code&gt;), &lt;code&gt;Office 2007&lt;/code&gt; та веб-додатків. Включає в себе &lt;code&gt;LINQ&lt;/code&gt;, нові версії мов &lt;code&gt;C#&lt;/code&gt; і &lt;code&gt;Visual Basic&lt;/code&gt;. До студії не увійшов &lt;code&gt;Visual J#&lt;/code&gt;. З 28 жовтня 2008 вперше доступна версія російською мовою.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Visual Studio 2010&lt;/code&gt; (кодове ім&amp;rsquo;я &lt;code&gt;Hawaii&lt;/code&gt;, для &lt;code&gt;Ultimate&lt;/code&gt; - &lt;code&gt;Rosario&lt;/code&gt;) - випущена 12 квітня 2010 разом з &lt;code&gt;.NET Framework 4.0&lt;/code&gt;. &lt;code&gt;Visual Studio&lt;/code&gt; включає підтримку мов &lt;code&gt;C# 4.0&lt;/code&gt; і &lt;code&gt;Visual Basic. NET 10.0&lt;/code&gt;, а також мову &lt;code&gt;F#&lt;/code&gt;, яка була відсутня в попередніх версіях.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;контрольні-запитання&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;список-використаних-джерел&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ada Lovelace on Wikipedia. Url: &lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_Lovelace&#34;&gt;https://en.wikipedia.org/wiki/Ada_Lovelace&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DiagramDesigner. Url: &lt;a href=&#34;https://logicnet.dk/DiagramDesigner/&#34;&gt;https://logicnet.dk/DiagramDesigner/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw.IO. Url: &lt;a href=&#34;https://www.diagrams.net/&#34;&gt;https://www.diagrams.net/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--
---


  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
## Задачі
--&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;додаткові-матеріали-для-завнатаження&#34;&gt;Додаткові матеріали для завнатаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 4. Типи даних та змінні у .NET</title>
      <link>/courses/csharp-basics/lecture4/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture4/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter41&#34;&gt;4.1. Поняття типу даних. Система типів .NET.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter42&#34;&gt;4.2. Оголошення та ініціалізація змінних. Константи&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter43&#34;&gt;4.3. Оператори та вирази&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter431&#34;&gt;4.3.1. Арифметичні оператори&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter432&#34;&gt;4.3.2. Інкремент і декремент&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter433&#34;&gt;4.3.3. Логічні оператори. Оператори відношення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter434&#34;&gt;4.3.4. Інші оператори&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter44&#34;&gt;4.4. Літерали&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter441&#34;&gt;4.4.1. Арифметичні літерали&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter442&#34;&gt;4.4.2. Логічні літерали&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter443&#34;&gt;4.4.3. Символьні літерали&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter45&#34;&gt;4.5. Приведення типів даних&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter46&#34;&gt;4.6. Робота з памяттю у С#&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter461&#34;&gt;4.6.1. &amp;ldquo;Стек&amp;rdquo; і &amp;ldquo;купа&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter462&#34;&gt;4.6.2. Типи-посилання та типи-значення&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4t&#34;&gt;Задачі&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4c&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4s&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter41&#34;&gt;4.1. Поняття типу даних. Система типів .NET.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Тип&lt;/strong&gt; &lt;em&gt;(загальне поняття)&lt;/em&gt; — це стійка сукупність елементів зі
спільними характеристиками, яку можна виділити серед множини інших
об’єктів.&lt;/p&gt;
&lt;p&gt;Тип даних як у математиці, так і у програмуванні має обмеження
на значення, що дозволяє зменшити невизначеність у записах та
уникнути частини помилок. Тип даних вказує яким чином об’єкти цього
типу можуть взаємодіяти з іншими елементами мови програмування або
між собою (Джерело: Cardelli &amp;amp; Wegner, 1985).&lt;/p&gt;
&lt;p&gt;Системи типів у мовах програмування мають ряд властивостей
та діляться за різними класифікаціями: статичні і динамічні, строго
типізовані і не строго типізовані тощо. Також на сьогодні існують
елементи мов програмування, що перемішують дані поняття або
підміняють їх (наприклад &lt;code&gt;var&lt;/code&gt; у &lt;code&gt;C#&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Система типів &lt;code&gt;.NET&lt;/code&gt; називається &lt;strong&gt;&lt;code&gt;Common Type System&lt;/code&gt;&lt;/strong&gt; (далі &lt;code&gt;CTS&lt;/code&gt;).
CTS визначає спосіб оголошення використання та керування типами у
середовищі &lt;code&gt;CLR&lt;/code&gt;, а також є важливою частиною підтримки міжмовної
інтеграції у середовищі виконання (MSDN, n.d.).&lt;/p&gt;
&lt;p&gt;Усі типи на платформі &lt;code&gt;.NET Framework&lt;/code&gt; поділяються на типи-значення (&lt;code&gt;Value Type&lt;/code&gt;) та типи-посилання (&lt;code&gt;Rerence Type&lt;/code&gt;). Типи-значення представлені фактичними
значеннями об’єкта, тобто під час присвоєння змінної відбувається
створення нової копії об’єкта. Для типів посилань створення нової копії
не відбувається. Типи посилання вказують на «комірку пам’яті» де
розміщено значення.&lt;/p&gt;
&lt;p&gt;У спрощеному вигляді система типів .NET має такий вигляд:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; типи-значення:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;прості типи;&lt;/li&gt;
&lt;li&gt;структури;&lt;/li&gt;
&lt;li&gt;перелічувані типи;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; типи-посилання:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;класи;&lt;/li&gt;
&lt;li&gt;інтерфейси;&lt;/li&gt;
&lt;li&gt;масиви;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;


















&lt;figure id=&#34;figure-рис-41-система-типів-net&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/svg/lecture-4-types.svg&#34; data-caption=&#34;Рис. 4.1. Система типів .NET&#34;&gt;


  &lt;img src=&#34;/media/courses/csharp-basics/svg/lecture-4-types.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Рис. 4.1. Система типів .NET
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;/center&gt;
&lt;p&gt;Варто також згадати, що типи даних, які підтримуються
компілятором напряму і знаходяться у &lt;code&gt;.NET Framework Class Library&lt;/code&gt;
(&lt;code&gt;FCL&lt;/code&gt;) називаються примітивними. Оскільки типи повинні бути
універсальними між різними мовами, то розрізняються &lt;code&gt;FCL&lt;/code&gt; типи та типи
конкретної мови програмування (Також варто відмітити, що існує загальномовна специфікація типів (&lt;code&gt;Common Language Specification&lt;/code&gt;), проте відповідність
їй не обов’язкова). По суті типи конкретної мови
програмування є псевдонімами &lt;code&gt;FCL&lt;/code&gt; типів. Наприлад, &lt;code&gt;int&lt;/code&gt; у C# — це Int32
у FCL, проте записати можна обидва варіанти:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int a = 0;
Int32 b = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо примітивні типи даних C# та їх відмінності
(табл. 4.1).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.1. Примітивні типи C# та їх характеристики (Биллиг, 2005)&lt;/em&gt;&lt;/p&gt;
&lt;table class=&#34;table table-bordered&#34; style=&#34;width:100%&#34;&gt;
  &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Цілочисельні типи&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;Назва&lt;/th&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;FLC-тип&lt;/th&gt;
    &lt;th style=&#34;width: 30%&#34;&gt;Значення&lt;/th&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Розмір, біт&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sbyte &lt;/td&gt;
    &lt;td&gt;System.SByte &lt;/td&gt;
    &lt;td&gt;$$[-128;127]$$&lt;/td&gt;
    &lt;td&gt;8&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;System.Byte&lt;/td&gt;&lt;td&gt;$$[0;255]$$&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;short&lt;/td&gt;&lt;td&gt; System.Short&lt;/td&gt;&lt;td&gt;$$[-32768;32767]$$&lt;/td&gt;&lt;td&gt; 16&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ushort&lt;/td&gt;&lt;td&gt; System.UShort&lt;/td&gt;&lt;td&gt;$$[0;65535]$$&lt;/td&gt;&lt;td&gt; 16&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt; System.Int32&lt;/td&gt;&lt;td&gt;$$≈(-2*10^9;2*10^9)$$&lt;/td&gt;&lt;td&gt; 32&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;uint&lt;/td&gt;&lt;td&gt; System.UInt32&lt;/td&gt;&lt;td&gt;$$≈(0;4*10^9)$$&lt;/td&gt;&lt;td&gt; 32&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;long&lt;/td&gt;&lt;td&gt; System.Int64&lt;/td&gt;&lt;td&gt;$$≈(-9*10^{18};9*10^{18})$$&lt;/td&gt;&lt;td&gt; 64&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ulong&lt;/td&gt;&lt;td&gt; System.UInt64&lt;/td&gt;&lt;td&gt;$$≈(0;18*10^{18})$$&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Числові типи з дробовою частиною&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;Назва&lt;/th&gt;
    &lt;th style=&#34;width: 25%&#34;&gt;FLC-тип&lt;/th&gt;
    &lt;th style=&#34;width: 30%&#34;&gt;Значення&lt;/th&gt;
    &lt;th style=&#34;width: 20%&#34;&gt;Точність, знаків після коми&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;float&lt;/td&gt;&lt;td&gt;System.Single&lt;/td&gt;&lt;td&gt;$$≈(+1.5*10^{-45}; +3.4*10^{38})$$&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;double&lt;/td&gt;&lt;td&gt;System.Double&lt;/td&gt;&lt;td&gt;$$≈(+5.0*10^{-324}; +1.7*10^{308})$$&lt;/td&gt;&lt;td&gt;15-16&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;decimal&lt;/td&gt;&lt;td&gt;System.Decimal&lt;/td&gt;&lt;td&gt;$$≈(+1.0*10^{-28}; +7.9*10^{28})$$&lt;/td&gt;&lt;td&gt;28-29&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Логічний тип&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Назва&lt;/th&gt;
    &lt;th&gt;FLC-тип&lt;/th&gt;
    &lt;th&gt;Значення&lt;/th&gt;
    &lt;th&gt;Розмір, біт&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;bool&lt;/td&gt;&lt;td&gt;System.Boolean&lt;/td&gt;&lt;td&gt;true/false&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Символи та рядки&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Назва&lt;/th&gt;
    &lt;th&gt;FLC-тип&lt;/th&gt;
    &lt;th&gt;Значення&lt;/th&gt;
    &lt;th&gt;Розмір, біт&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;char&lt;/td&gt;&lt;td&gt;System.Char&lt;/td&gt;&lt;td&gt;U+0000 - U+ffff&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;System.String&lt;/td&gt;&lt;td colspan=2&gt;Рядок символів Unicode&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;
    &lt;th colspan=4&gt;&lt;center&gt;Об&#39;єктний тип&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Назва&lt;/th&gt;
    &lt;th&gt;FLC-тип&lt;/th&gt;
    &lt;th colspan=2&gt;Притмітки&lt;/th&gt;
  &lt;/tr&gt;
   &lt;tr&gt;&lt;td&gt;object&lt;/td&gt;&lt;td&gt;System.Object&lt;/td&gt;&lt;td colspan=2&gt;Базовий тип для усіх інших&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Розглянемо коротко структури, класи та перелічувані типи даних.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Структури.&lt;/strong&gt; Структура є першим визначеним користувачем
типом, який ми розглянемо. Схожі &lt;code&gt;UDT&lt;/code&gt; (&lt;code&gt;User Defined Types&lt;/code&gt;) є і у мовах
&lt;code&gt;Pascal&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt; тощо. По суті структури у C# є спрощеною версією класів із
мінімальними відмінностями та наслідуєть не напряму від &lt;code&gt;System.Object&lt;/code&gt;,
а від &lt;code&gt;System.ValueType&lt;/code&gt;. Структури в С# створюються за допомогою
ключового слова &lt;strong&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/strong&gt; (Лістинг 4.1).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.1. Структура &lt;code&gt;Point&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp,&#34;&gt;public struct Point
{
    // Поле структури
    public int x, y;
  
    //Параметризований конструктор
    public Point(int xPosition, int yPosition) {
        x = xPosition;
        y = yPosition;
    }
    
    //Метод структури
    public void Display() {
        System.Console.WriteLine(&amp;quot;({0}, {1})&amp;quot;, x, y);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Класи.&lt;/strong&gt; Клас є посилальним типом даних, що неявно
наслідується від &lt;code&gt;System.Object&lt;/code&gt;. У класі оголошуються поля, методи,
властивості, конструктори, події та інші елементи, що визначають його
дані та можливості. Оголошення класу відбувається із використанням
ключовго слова class (лістинг 4.2).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.2. Клас &lt;code&gt;Student&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;public class Student
{
    private int _age;
    public int GetAge() 
    {
      return _age;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Перелічувані типи.&lt;/strong&gt; Перелічуваний тип (&lt;code&gt;enum) – це програмна конструкція, що дозволяє у межах типу даних визначити альтернативні значення для базового примітивного типу. Перелічувані типи наслідують напряму &lt;/code&gt;System.Enum`. Перелічувані типи мають значні обмеження у
можливостях порівняно з класами або структурами. Оголошення
перелічуваного типу даних відбувається за допомогою ключового слова
enum (лістинг 4.3).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.3. Перелічуваний тип &lt;code&gt;Character&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public enum Character
{
    Student = 0,
    Teacher = 1,
    Dekan = 2,
    Rector = 3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо відмінності між типами-посиланнями та типами
значеннями (Albahari &amp;amp; Albahari, 2012). &lt;em&gt;Примітка. Детальніша інформація про значимі та посилальні типи даних подана у &lt;a href=&#34;#chapter46&#34;&gt;питанні 4.6&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.2. Порівняння типів-значень та типів-посилань у C#&lt;/em&gt;&lt;/p&gt;
&lt;table style=&#34;width:100%&#34;&gt;
  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;th style=&#34;width:50%&#34;&gt;&lt;center&gt;Тип-значення&lt;/center&gt;&lt;/th&gt;
  &lt;th style=&#34;width:50%&#34;&gt;&lt;center&gt;Тип-посилання&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
public &lt;b&gt;struct&lt;/b&gt; Point
{
    public int X { get;set; }
    public int Y { get;set; }
}
&lt;/pre&gt;
    &lt;/td&gt;
        &lt;td&gt;
&lt;pre&gt;
public &lt;b&gt;class&lt;/b&gt; Point
{
    public int X { get;set; }
    public int Y { get;set; }
}
&lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  &lt;td&gt;3&lt;/td&gt;
  &lt;td colspan=2&gt;
  &lt;pre&gt;
var p1 = new Point { X = 5, Y = 7 };
var p2 = p1;
p2.X = 10;
Console.WriteLine(&#34;p1: X = {0}&#34;, p1.X);
Console.WriteLine(&#34;p2: X = {0}&#34;, p2.X);
  &lt;/pre&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;
&lt;pre&gt;
p1: X = 5
p2: X = 10
&lt;/pre&gt;
    &lt;/td&gt;
        &lt;td&gt;
&lt;pre&gt;
p1: X = 10
p2: X = 10
&lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
  &lt;td&gt;5&lt;/td&gt;
  &lt;td&gt;&lt;div class=&#34;mermaid&#34;&gt;
graph TD;
  p1--&gt;X1[X=5];
  p1--&gt;Y1[Y=7];
  p2--&gt;X2[X=10];
  p2--&gt;Y2[Y=7];
&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div class=&#34;mermaid&#34;&gt;
graph TD;
  p1--&gt;REF[object_ref];
  p2--&gt;REF[object_ref];
  REF--&gt;X3[X=10];
  REF--&gt;Y3[Y=7];
&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Як видно із табл. 4.2 тип-значення створює копію елемента у
пам’яті і працює з копією, не впливаючи на початкові дані. Тип-посилання вказує на ділянку пам’яті і під час зміни значення поля впливає на усі об’єкти, що «прив’язані» до цієї змінної.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter42&#34;&gt;4.2. Оголошення та ініціалізація змінних. Константи&lt;/h2&gt;
&lt;p&gt;Змінна у програмуванні є по суті назвою, що вказує на деякий
об’єкт у пам’яті. Також можна сказати, що змінна вказує на адресу у
пам’яті і надає доступ до значення, що знаходиться за цією адресою.&lt;/p&gt;
&lt;p&gt;Для оголошення змінної використовується запис у вигляді:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;тип ім’я_змінної;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Правила іменування змінних у C#:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ім’я змінної може починатися із латинської букви або
знаку «_».&lt;/li&gt;
&lt;li&gt;Ім’я змінної може складатися із латинських букв, цифр
або знаку «_».&lt;/li&gt;
&lt;li&gt;Якщо ім’я змінної співпадає із ключовим словом мови
програмування, то потрібне використовувати його із
знаком @ (Наприклад: &lt;code&gt;int @class = 1;&lt;/code&gt; ).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.4. Приклад оголошення змінних у C#.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a;
  float myNumber;
  double _salary;
  string name;
  bool isPresent;
  decimal discount;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Під час оголошення змінної створюється екземпляр вказаного
типу. Таким чином, можна сказати, що можливості конкретної змінної
визначаються можливостями типу даних. Наприклад, у змінну
цілочисельного типу не можна записати рядок (&lt;code&gt;string&lt;/code&gt;). Також важливо
відмітити, що у C# не можна змінити тип даних під час існування змінної.
До того як змінна буде використана у коді програми вона повинна
бути оголошеною. Компілятор перевіряє наявність оголошення змінної у
момент її використання.&lt;/p&gt;
&lt;p&gt;Будь-яка змінна до використання повинна бути ініціалізованою.
Ініціалізація змінних – процес виділення у «пам’яті» під конкретний тип
даних із записом значення. Також ініціалізацію змінних можна пояснити
як надання конкретного значення змінній (лістинг 4.5).&lt;/p&gt;
&lt;p&gt;Ініціалізацію змінної можна провести одразу під час оголошення
або у процесі виконання програми (динамічна ініціалізація). Синтаксис
ініціалізації змінної під час оголошення:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;тип ім’я_зміннної = значення;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Оператор &lt;strong&gt;&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt; у записі означає «присвоїти». «Дорівнює»
записується як &lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt; і є оператором відношення.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.5. Ініціалізація змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a = 10;
  float myNumber = 0.2;
  double _salary = 100.9;
  string name = &amp;quot;Ivan&amp;quot;;
  bool isPresent = true;
  decimal discount = 0.02;
  char c = &#39;R&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Під час оголошення двох і більше змінних однакового типу даних
списком (розділення комами) можна здійснювати вибіркове присвоєння
значень (лістинг 4.6).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.6. Оголошення та ініціалізація змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a = 10, b, c = 20;
  char d, f = &#39;F&#39;, s = &#39;3&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Динамічна ініціалізація змінних передбачає присвоєння значення
у процесі виконання програми, наприклад, за результатами обчислень
(лістинг 4.7).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.7. Динамічна ініціалізація змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  double a = 5, b = 7; //Катети
  double c; // гіпотенуза
  c = Math.Sqrt(a * a + b * b);
  Console.WriteLine(&amp;quot;Гіпотенуза дорівнює - {0:F}&amp;quot;, c);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У C# є можливість оголошення та ініціалізації констант.
&lt;code&gt;Константа&lt;/code&gt; у математиці є величиною, значення якої не
змінюється. Константа є протиставленням до змінної. У програмуванні
&lt;code&gt;константа&lt;/code&gt; – це спосіб запису інформації, зміна якої заборонена. Значення
констати повинно бути відомим у момент компіляції програми. По суті
константу потрібно ініціалізувати у момент оголошення (лістинг 4.8).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.8. Оголошення та ініціалізація констант.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  const string spec = &amp;quot;економічна кібернетика&#39;;
  const double PI = 3.14;
  const bool Truth = true;
  43 з 111
  const char _iSymbol = &#39;i&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Область видимості та час існування змінної.&lt;/strong&gt; Усі змінні до цього
часу ми оголошували у межах функції &lt;code&gt;Main()&lt;/code&gt;. Насправді змінна може
бути оголошеною у межах різних блоків програми. Блоки програми
відкремлються «фігурними» дужками (&lt;code&gt;{}&lt;/code&gt;). Блок коду визначає область
видимості та час існування змінної. За межами цього блоку змінної не
існує і доступу до неї немає. Розглянемо приклад коду (лістинг 4.9).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.9. Область видимості змінної.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)
{
   int x; // Змінна відома у межах метода Main()
   x = 10;
   if (x == 10)
   {
     // Початок нової області видимості
     int у = 20; // Змінна відома лише цьому блоку
     Console.WriteLine(&amp;quot;х та у: &amp;quot; + x + &amp;quot; &amp;quot; + у);
     x = у * 2;
   }
   // y = 100; //- помилка &amp;quot;y&amp;quot; - не існує
   Console.WriteLine(&amp;quot;х : &amp;quot; + x);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Якщо видалити коментування у рядку &lt;code&gt;y = 100&lt;/code&gt;, то компілятор
проінформує про помилку &lt;code&gt;~ «Змінна ‘y’ не існує у даному контексті»&lt;/code&gt;,
тобто вона поза областю видимості і доступу немає.&lt;/p&gt;
&lt;p&gt;Зміні створюються у момент входження у область видимості і
видаляються у момент виходу з неї. Таким чином можна зрозуміти, що
повторне входження у область видимості створює змінну із початковим
значенням повторно і не зберігає значення між викликами (лістинг 4.10).&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.10. Область видимості змінних.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int x = 10;
  
  if (x == 10) {
     x = x + 1;
     int a = x;
  }
  
  if (x == 11) {
     x = x + 1;
     int a = x;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;З прикладу лістингу 4.10. видно, що змінна a оголошена двічі,
проте в різних областях видимості. У таком випадку помилки компіляції
не буде. Отже, час існування змінної визначається областю її видимості.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter43&#34;&gt;4.3. Оператори та вирази&lt;/h2&gt;
&lt;p&gt;У С# передбачений широкий набір операторів, які дають в руки програмістові потужні важелі
управління при створенні всіляких виразів і їх обчисленні. У С# є чотири загальні класи операторів:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; арифметичні;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; порозрядні;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; логічні;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; оператори відношення.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter431&#34;&gt;4.3.1. Арифметичні оператори&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.3. Арифметичні оператори&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;th&gt;Дія&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Додавання&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Віднімання, унарний мінус&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;&lt;code&gt;*&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Множення&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;/&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Ділення&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;%&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Ділення по модулю&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;--&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Декремент&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;++&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Інкремент&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Дія С#-операторів &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; і &lt;code&gt;/&lt;/code&gt; збігається з дією аналогічних операторів в будь-якій іншій мові програмування (і в алгебрі). Їх можна застосовувати до даних будь-якого вбудованого числового типу.&lt;/p&gt;
&lt;p&gt;Перш за все хочу нагадати, що після застосування оператора ділення (&lt;code&gt;/&lt;/code&gt;) до цілого числа залишок буде відкинутий. Наприклад, результат цілочисельного ділення &lt;code&gt;10/3&lt;/code&gt; дорівнюватиме &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Залишок від ділення можна отримати за допомогою оператора ділення по модулю (%). Цей оператор працює практично так само, як в інших мовах програмування: повертає залишок від ділення без остачі. Наприклад, &lt;code&gt;10%3&lt;/code&gt; рівне &lt;code&gt;1&lt;/code&gt;. У С# оператор &lt;code&gt;%&lt;/code&gt; можна застосувати як до цілочисельних типів, так і типам з плаваючою крапкою. Наприклад, &lt;code&gt;10,0%3,0&lt;/code&gt; також рівне &lt;code&gt;1&lt;/code&gt;. (У мовах C/C++ операції ділення по модулю застосовні лише до цілочисельних типів.)&lt;/p&gt;
&lt;h3 id=&#34;chapter432&#34;&gt;4.3.2. Інкремент і декремент&lt;/h3&gt;
&lt;p&gt;Оператори інкремента (&lt;code&gt;++&lt;/code&gt;) і декремента (&lt;code&gt;--&lt;/code&gt;) збільшують і зменшують значення операнда на
одиницю, відповідно. Як буде показано нижче, ці оператори володіють спеціальними
властивостями, які роблять їх цікавими для розгляду. Отже, оператор інкремента виконує складання операнда з числом 1, а оператор декремента віднімає 1 зі свого операнда. Це означає, що інструкція&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х = х + 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;аналогічна такій інструкції:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х++&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Так само інструкція&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х = х - 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;аналогічна такій інструкції:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;х--&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Оператори інкремента і декремента можуть стояти як перед своїм операндом, так і після нього.
Наприклад, інструкцію &lt;code&gt;х = х - 1;&lt;/code&gt; можна переписати у вигляді префіксної форми&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;++х; // Префіксна форма оператора інкремента
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;або у вигляді постфіксної форми:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;х++; // Постфіксна форма оператора інкремента
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У попередньому прикладі не мало значення, в якій формі був застосований оператор інкремента:
префіксній або постфіксній. Але якщо оператор інкремента або декремента використовується як
частина більшого виразу, то форма його використання має важливе значення.&lt;/p&gt;
&lt;p&gt;Якщо такий оператор застосований в префіксній формі, то С# спочатку виконає цю операцію, аби операнд набув нового значення, яке потім буде використано останньою частиною вираження. Якщо ж оператор застосований в постфіксній формі, то С# використовує у вираженні його старе значення, а потім виконає операцію, в результаті якої операнд знайде нове значення. Розглянемо наступний фрагмент коду:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;х = 10; 
int a = ++х;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Результат: a = 11;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;х = 10; 
int a = х++;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Результат: a = 10;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;chapter433&#34;&gt;4.3.3. Логічні оператори. Оператори відношення&lt;/h3&gt;
&lt;p&gt;Результат виконання операторів відношення і логічних операторів має тип &lt;code&gt;bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.4. Оператори відношення і логічні оператори&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;th&gt;Дія&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Не рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Більше&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Менше&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Більше або рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Менше або рівно&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;І&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;|&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Або&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Виключаюче або&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;||&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Скорочене або&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Скорочене і&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;!&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Не&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;У С# на рівність або нерівність можна порівнювати (відповідно, за допомогою операторів &lt;code&gt;==&lt;/code&gt; та &lt;code&gt;!=&lt;/code&gt;) всі об&amp;rsquo;єкти. Але такі оператори порівняння, як &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; або &lt;code&gt;&amp;gt;=&lt;/code&gt;, можна застосовувати лише до типів, які підтримують відношення впорядкування. Це означає, що всі оператори відношення можна застосовувати до всіх числових типів. Проте значення типу &lt;code&gt;bool&lt;/code&gt; можна порівнювати лише на рівність або нерівність, оскільки значення &lt;code&gt;true&lt;/code&gt; і &lt;code&gt;false&lt;/code&gt; не упорядковуються. Наприклад, в С# порівняння &lt;code&gt;true &amp;gt; false&lt;/code&gt; не має сенсу.&lt;/p&gt;
&lt;p&gt;Що стосується логічних операторів, то їх операнди повинні мати тип &lt;code&gt;bool&lt;/code&gt;, і результат логічної операції завжди матиме тип &lt;code&gt;bool&lt;/code&gt;. Логічні оператори &lt;em&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;|&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;^&lt;/code&gt;&lt;/em&gt; і &lt;em&gt;&lt;code&gt;!&lt;/code&gt;&lt;/em&gt; виконують базові логічні операції &lt;code&gt;І&lt;/code&gt;, &lt;code&gt;АБО&lt;/code&gt;, &lt;code&gt;взаємовиключення&lt;/code&gt; і &lt;code&gt;НЕ&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.11. Оператори відношення та логічні оператори.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)
{
    int a = 10, b = 11;
    bool abool = true, bbool = false;

    if(a &amp;gt; b) Console.WriteLine(&amp;quot;a &amp;gt; b&amp;quot;);                             //false
    if(a &amp;lt; b) Console.WriteLine(&amp;quot;a &amp;lt; b&amp;quot;);                             //true

    if(a == b) Console.WriteLine(&amp;quot;a == b&amp;quot;);                           //false
    if(a != b) Console.WriteLine(&amp;quot;a != b&amp;quot;);                           //true
    if (abool || bbool) Console.WriteLine(&amp;quot;abool || bbool - true&amp;quot;);   //true
    if (abool &amp;amp;&amp;amp; bbool) Console.WriteLine(&amp;quot;abool &amp;amp;&amp;amp; bbool - true&amp;quot;);   //false
    if (abool ^ bbool) Console.WriteLine(&amp;quot;abool ^ bbool - true&amp;quot;);     //true
    if (!abool) Console.WriteLine(&amp;quot;!abool - true&amp;quot;);                   //false
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;chapter434&#34;&gt;4.3.4. Інші оператори&lt;/h3&gt;
&lt;p&gt;Окрім базовового набору, у C# доступний набір і інших операторів, що використовуються під час написання програм. Опишемо їх коротко у вигляді таблиць з описами.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.5. Інші оператори&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Дія&lt;/th&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Доступ до членів&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Індексація&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**[]**&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Приведення типів&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;()&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Тернарний оператор&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;?:&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Створення нового об’єкта&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Інформація про тип даних&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;is&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Управління виключеннями переповнення&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;unchecked&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Є також і інші оператори у C#. Ми розглянули лише основні, які будемо використовувати у нашому
курсі.&lt;/p&gt;
&lt;p&gt;При присворенні виразів аналогічно до алгебри враховується пріоритет операцій:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.6. Пріоритет операцій&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Пріор.&lt;/th&gt;
&lt;th&gt;Оператор&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;()&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;(постфікс)++&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;(постфікс)––&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;unchecked&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;!&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;~&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;(ім’я типу)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;+(унарний)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;–(унарний)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;++(префікс)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;––(префікс)&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;/&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;%&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;–&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;is&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;==&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;|&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;||&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;?:&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;–=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;|=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;^=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Оператор присвоєння має додаткові можливості.&lt;/p&gt;
&lt;p&gt;Присвоєння можна проводити наступним чином:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int a, b, c; 
  int d = c = b = c = 3.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У результаті виконання коду усі змінні будуть ініціалізовані значенням &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;У &lt;code&gt;C#&lt;/code&gt;, так само як і у &lt;code&gt;С++&lt;/code&gt;, є складений оператор присвоєння. Для виразу &lt;code&gt;x = x + 10&lt;/code&gt; складений оператор матиме вигляд: &lt;code&gt;x += 10&lt;/code&gt;. Складений оператор означає додавання до поточного значення певного числа. Аналогічні операції можна застосовувати і до
інших операторів: &lt;strong&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;chapter44&#34;&gt;4.4. Літерали&lt;/h2&gt;
&lt;p&gt;У програмах на мовах високого рівня (у тому числі C#) &lt;strong&gt;літералами&lt;/strong&gt; називають послідовність
символів, що входять у алфавіт мови програмування, які забезпечують явне представлення значень, які використовуються для позначення початкових значень в оголошенні членів класів, змінних і
констант в методах класу. Розрізняються літерали &lt;code&gt;арифметичні&lt;/code&gt; (різних типів), &lt;code&gt;логічні&lt;/code&gt;, &lt;code&gt;символьні&lt;/code&gt;
(включаючи Escape-послідовності), &lt;code&gt;рядкові&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter441&#34;&gt;4.4.1. Арифметичні літерали&lt;/h3&gt;
&lt;p&gt;Арифметичні літерали кодують значення різних (арифметичних) типів. Тип арифметичного
літерала визначається наступними інтуїтивно зрозумілими зовнішніми ознаками:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;стандартним зовнішнім виглядом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Значення цілочисельного типу зазвичай кодується інтуїтивно
зрозумілою послідовністю символів $1, 2, 3, &amp;hellip; N$.&lt;/p&gt;
&lt;p&gt;Значення чисел з дробовою частиною також передбачає
стандартний вигляд (крапка-роздільник між цілою і дробовою частиною, або наукова або
експоненціальна нотація - $1.2500E+052$).&lt;/p&gt;
&lt;p&gt;Шістнадцяткове представлення цілочисельного значення кодується шістнадцятковим літералом, що складається з символів $0, &amp;hellip;, 9$, а також $&amp;lsquo;a&amp;rsquo; &amp;hellip;, &amp;lsquo;f&amp;rsquo;$, або $&amp;lsquo;A&amp;rsquo; &amp;hellip;,
&amp;lsquo;F&amp;rsquo;$ з префіксом &lt;code&gt;&#39;0x&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;власне значенням&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Так, накприклад, 32768 ніяк не може бути значенням типу &lt;code&gt;short&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;додатковим суфіксом&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Суфікси &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; відповідають типові &lt;code&gt;long&lt;/code&gt;; &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;UL&lt;/code&gt; - &lt;code&gt;unsigned long&lt;/code&gt;; &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt; - &lt;code&gt;float&lt;/code&gt;; &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; -
&lt;code&gt;double&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; - &lt;code&gt;decimal&lt;/code&gt;. Значення типу &lt;code&gt;double&lt;/code&gt; кодуються також без префікса з вказанням розділювача дробової частини, наприклад, $25.0$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter442&#34;&gt;4.4.2. Логічні літерали&lt;/h3&gt;
&lt;p&gt;До логічних літералів відносяться наступні послідовності символів: &lt;code&gt;true&lt;/code&gt; і &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;chapter443&#34;&gt;4.4.3. Символьні літерали&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Символьні літерали&lt;/strong&gt; - це взяті в одинарні лапки символи, що вводяться з клавіатури, наприклад, &lt;code&gt;&#39;X&#39;&lt;/code&gt;, &lt;code&gt;&#39;p&#39;&lt;/code&gt;, &lt;code&gt;&#39;Q&#39;&lt;/code&gt;, &lt;code&gt;&#39;7&#39;&lt;/code&gt;, а також цілочисельні значення в діапазоні від $0$ до $65535$, перед якими розташовується конструкція вигляду &lt;code&gt;(char)&lt;/code&gt; - операція явного приведення до типу &lt;code&gt;char&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Наступні взяті в одинарні лапки послідовності символів є &lt;code&gt;Escape&lt;/code&gt;-послідовностями. Ця категорія
літералів використовується для створення додаткових ефектів (дзвінок), простого форматування
інформації, що виводиться, і кодування символів при виводі і порівнянні (у виразах порівняння).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.7.Символьні Escape-послідовності&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Команда&lt;/th&gt;
&lt;th&gt;Пояснення&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\a&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Звуковий сигнал&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Повернення на одну позицію назад&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\f&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Перехід на нову сторінку&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Перехід на новий рядок&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Повернення каретки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Горизонтальна табуляція&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\v&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Вертикальна табуляція&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\0&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Нуль&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\&#39;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Одинарна лапка&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Подвійна лапка&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Зворотна коса лінія&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Рядкові літерали&lt;/strong&gt; - це послідовність символів і символьних &lt;code&gt;Escape&lt;/code&gt;-послідовностей, взятих у подвійні
лапки.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Verbatim string&lt;/code&gt;&lt;/strong&gt; - рядковий літерал, що інтерпретується компілятором так, як він записаний. &lt;code&gt;Escape&lt;/code&gt;-послідовності сприймаються строго як послідовності символів.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Verbatim string&lt;/code&gt; представляється за допомогою символу &lt;strong&gt;&lt;code&gt;@&lt;/code&gt;&lt;/strong&gt;, який розташовується безпосередньо
перед текстом, взятим в парні подвійні лапки. Представлення подвійних лапок в
&lt;code&gt;Verbatim string&lt;/code&gt; забезпечується їх дублюванням.&lt;/p&gt;
&lt;p&gt;Пара літералів (другий - Verbatim string)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  ...&amp;quot;c:\\My Documents\\sample.txt&amp;quot;...
  ...@&amp;quot;c:\My Documents\sample.txt&amp;quot;...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;мають одне і те ж значення: &lt;code&gt;c:\My Documents\sample.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Рядкові літерали є об&amp;rsquo;єктами типу &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;chapter45&#34;&gt;4.5. Приведення типів даних&lt;/h2&gt;
&lt;p&gt;Приведення типів - один з аспектів безпеки будь-якої мови програмування.&lt;/p&gt;
&lt;p&gt;Використовувані в програмі типи характеризуються власними діапазонами значень, які
визначаються властивостями типів, у тому числі і розміром області пам&amp;rsquo;яті, призначеної для
кодування значень відповідного типу. При цьому області значень різних типів перетинаються.&lt;/p&gt;
&lt;p&gt;Багато значень можна виразити більш ніж одним типом. Наприклад, значення 4 можна
представити як значення типу &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;. При цьому в програмі все повинно бути влаштовано так, щоб логіка перетворення значень одного типу до іншого 
була зрозумілою, а результати цих перетворень - передбачувані.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Інколи приведення значення до іншого типу відбувається автоматично.&lt;/em&gt; Такі перетворення
називаються &lt;strong&gt;неявними&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Але у ряді випадків перетворення вимагає додаткової уваги з боку програміста, який повинен &lt;strong&gt;явним&lt;/strong&gt;
чином вказувати необхідність перетворення, використовуючи вирази приведення типу або звертаючись до спеціальних методів перетворення, визначеним в класі &lt;code&gt;System.Convert&lt;/code&gt;, які забезпечують перетворення значення одного типу до значення іншого.&lt;/p&gt;
&lt;p&gt;Перетворення типу створює значення нового типу, еквівалентне значенню старого типу, проте при
цьому не обов&amp;rsquo;язково зберігається ідентичність (або точні значення) двох об&amp;rsquo;єктів.&lt;/p&gt;
&lt;p&gt;Розрізняють &lt;strong&gt;розширююче&lt;/strong&gt; та &lt;strong&gt;звужуюче&lt;/strong&gt; перетворення.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Розширююче перетворення&lt;/strong&gt; - значення одного типу перетвориться до значення іншого типу, яке має
такий же або більший розмір. Наприклад, значення, представлене у вигляді 32-розрядного цілого
числа із знаком, може бути перетворене в 64-розрядне ціле число із знаком. Розширене
перетворення вважається безпечним, оскільки вихідна інформація при такому перетворенні не
спотворюється.&lt;/p&gt;
&lt;p&gt;Можливість розширеного перетворення представлено у таблиці нижче.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.8. Можливість розширеного перетворення типів даних&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип, що перетворюється&lt;/th&gt;
&lt;th&gt;У який тип перетворюється&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SByte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Single&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Звужуюче перетворення&lt;/strong&gt; - значення одного типу перетвориться до значення іншого типу, яке має
менший розмір (з 64-розрядного в 32-розрядне). Таке перетворення потенційне небезпечне втратою
значення. Звужуючі перетворення можуть призводити до втрати інформації.&lt;/p&gt;
&lt;p&gt;Якщо тип, до якого здійснюється перетворення, не може правильно передати значення джерела, то результат
перетворення виявляється дорівнює константі &lt;code&gt;PositiveInfinity&lt;/code&gt; або &lt;code&gt;NegativeInfinity&lt;/code&gt;. &lt;em&gt;Примітка. Перевірити інформацію!&lt;/em&gt; При цьому значення &lt;code&gt;PositiveInfinity&lt;/code&gt; інтерпретується як результат ділення додатнього числа на нуль, а значення &lt;code&gt;NegativeInfinity&lt;/code&gt; - як результат ділення відємного числа на нуль. Якщо звужуюче перетворення
забезпечується методами класу &lt;code&gt;System.Convert&lt;/code&gt;, то втрата інформації супроводиться генерацією
виключення (про виключення пізніше).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.9. Можливість звужуючого перетворення типів даних&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип, що перетворюється&lt;/th&gt;
&lt;th&gt;У який тип перетворюється&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sbyte&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SByte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt16&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Single&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.12. Звужуюче перетворення&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Main()
{
    int i = 1234567;
    short s = (short)i;
    Console.WriteLine(&amp;quot;int - {0}\n short - {1}&amp;quot;, i,s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  int - 1234567
  short - -10617
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chapter46&#34;&gt;4.6. Робота з памяттю у С#&lt;/h2&gt;
&lt;h3 id=&#34;chapter461&#34;&gt;4.6.1. &amp;ldquo;Стек&amp;rdquo; і &amp;ldquo;купа&amp;rdquo;&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Звершити розділ
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Стек&lt;/strong&gt; (&lt;code&gt;Stack&lt;/code&gt;) відноситься до області пам&amp;rsquo;яті, підтримуваної процесором, в якій зберігаються локальні змінні.
Доступ до стека у багато разів швидший, ніж до загальної області пам&amp;rsquo;яті, тому використання стека
для зберігання даних прискорює роботу вашої програми. У С# розмірні типи (наприклад, цілі
числа) розташовуються в стеку: для їх значень зарезервована область в стеку, і доступ до неї
здійснюється по назві змінної.&lt;/p&gt;
&lt;p&gt;Посилальні типи (наприклад, об&amp;rsquo;єкти) розташовуються в &lt;strong&gt;купі&lt;/strong&gt; (&lt;code&gt;Heap&lt;/code&gt;). &lt;strong&gt;Купа&lt;/strong&gt; — це оперативна пам&amp;rsquo;ять
вашого комп&amp;rsquo;ютера. Доступ до неї здійснюється повільніше, ніж до стека. Коли об&amp;rsquo;єкт
розташовується в купі, то змінна зберігає лише адресу об&amp;rsquo;єкта. Ця адреса зберігається в стеку. За адресою програма має доступ до самого об&amp;rsquo;єкту, всі дані якого зберігаються в загальній пам&amp;rsquo;яті (купі).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;«Збиральник сміття»&lt;/strong&gt; (&lt;code&gt;Garbage Collector&lt;/code&gt;) знищує об&amp;rsquo;єкти, розташовані в стеку, кожен раз, коли
відповідна змінна виходить за область видимості. Таким чином, якщо ви оголошуєте локальну
змінну в межах функції, то об&amp;rsquo;єкт буде помічений як об&amp;rsquo;єкт для «збирання сміття». І він буде
видалений з пам&amp;rsquo;яті після завершення роботи функції. Об&amp;rsquo;єкти у купі теж очищаються
збиральником сміття, після того, як кінцеве посилання на них буде знищено.&lt;/p&gt;
&lt;h3 id=&#34;chapter462&#34;&gt;4.6.2. Типи-посилання та типи-значення&lt;/h3&gt;
&lt;p&gt;Усі типи даних у C# поділяються на &lt;strong&gt;значимі&lt;/strong&gt; (&lt;code&gt;ValueType&lt;/code&gt;) та &lt;strong&gt;типи-посилання&lt;/strong&gt; (&lt;code&gt;ReferenceType&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Значимі типи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;містять у собі об’єкти даних;&lt;/li&gt;
&lt;li&gt;не можуть бути пустими.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Типи-посилання:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;містять у собі посилання на об’єкт даних;&lt;/li&gt;
&lt;li&gt;можуть бути пустими (null).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Які типи даних відносяться до значимих, а які до типів-посилань було розглянуто у &lt;a href=&#34;#chapter41&#34;&gt;питанні 4.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Запишемо простий приклад:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int a = 1000;
int b = a;
b = 2000;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Логічно, що після виконання цього коду &lt;code&gt;a = 1000&lt;/code&gt;, &lt;code&gt;b = 2000&lt;/code&gt; - це принцип роботи значимих типів - у
змінну копіюється значення і не привязується до змінної з якої воно було взяте.&lt;/p&gt;
&lt;p&gt;Тепер давайте створимо просту структуру &lt;code&gt;Point&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.13. Використання структури (значимий тип).&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;struct Point
{
    public int x;
    public int y;
} 

static void Main(string[] args)
{
    Point point1 = new Point();
    point1.x = 111;
    point1.y = 111;

    //Виведемо на екран змінну point1
    Console.WriteLine(&amp;quot;point1.x = {0}; point1.y = {1}&amp;quot;, point1.x, point1.y);

    // Створимо змінну point2
    Point point2 = point1;

    //Виведемо на екран змінну point2
    Console.WriteLine(&amp;quot;point2.x = {0}; point2.y = {1}&amp;quot;, point2.x, point2.y);

    Console.WriteLine(&amp;quot;\t---- Change point 2-----&amp;quot;);
    //Змінимо значення параметрів у point2
    point2.x = 777;
    point2.y = 777;
    //Виведемо point1 та point2
    Console.WriteLine(&amp;quot;point1.x = {0}; point1.y = {1}&amp;quot;, point1.x, point1.y);
    Console.WriteLine(&amp;quot;point2.x = {0}; point2.y = {1}&amp;quot;, point2.x, point2.y);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання коду:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;point1.x = 111; point1.y = 111
point2.x = 111; point2.y = 111
        ---- Change point 2-----
point1.x = 111; point1.y = 111
point2.x = 777; point2.y = 777
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Як бачимо після зміни значень х та у для змінної &lt;code&gt;point2&lt;/code&gt; значення змінної &lt;code&gt;рoint1&lt;/code&gt; не змінилося! Все
правильно, адже структура є значимим типом і тому відбувається копіювання значень при
присвоєнні.&lt;/p&gt;
&lt;p&gt;Тепер давайте замінимо структуру &lt;code&gt;Point&lt;/code&gt; на клас.&lt;/p&gt;
&lt;p&gt;Приклад 12. Використання класу (посилальний тип).

  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 4.14. Використання класу (посилальний тип)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Point
{
  public int x;
  public int y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання коду:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;point1.x = 111; point1.y = 111
point2.x = 111; point2.y = 111
        ---- Change point 2-----
point1.x = 777; point1.y = 777
point2.x = 777; point2.y = 777
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Як бачимо значення &lt;code&gt;point1&lt;/code&gt; змінилося. Посилальні типи даних вказують лише на ділянку пам&amp;rsquo;яті, у
якій знаходиться значення, а не на саме значення. При присвоєнні не відбувається копіювання
значень, а копіювання посилання.&lt;/p&gt;
&lt;p&gt;Для узагальнення опишемо все це у таблиці:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Таблиця 4.10. Можливість звужуючого перетворення типів даних&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Характеристика&lt;/th&gt;
&lt;th&gt;Значимий тип&lt;/th&gt;
&lt;th&gt;Тип-посилання&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Змінна містить&lt;/td&gt;
&lt;td&gt;Значення&lt;/td&gt;
&lt;td&gt;Посилання на значення&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Змінна зберігається&lt;/td&gt;
&lt;td&gt;У стеку&lt;/td&gt;
&lt;td&gt;У кучі&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Значення по замовчуванню&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;\0&#39;&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Оператор присвоєння&lt;/td&gt;
&lt;td&gt;Копіює значення&lt;/td&gt;
&lt;td&gt;Копіює посилання&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Коментар до таблиці:&lt;/p&gt;
&lt;p&gt;Змінна в разі використання типів-значень містить власне значення, а при
використанні типів-посилань – не саме значення, а лише посилання на нього. Місцем зберігання
змінної, визначеної як тип-значення, є стек, а визначеною як посилальний тип – «купа» (останнє
необхідне для динамічного виділення і звільнення пам&amp;rsquo;яті для зберігання змінної довільним чином).&lt;/p&gt;
&lt;p&gt;Значенням, яким змінна ініціалізувалася за умовчанням (необхідність виконання цієї вимоги
диктується ідеологією безпеки Microsoft .NET) в разі визначення за допомогою типу-значення є &lt;code&gt;0&lt;/code&gt;
(для чисельного типу даних), &lt;code&gt;false&lt;/code&gt; (для логічного типу даних), &lt;code&gt;&#39;\0&#39;&lt;/code&gt; (для символьного типу даних), а в
разі визначення за допомогою типу-посилання – значення порожнього посилання &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4t&#34;&gt;Задачі&lt;/h2&gt;
&lt;h4 id=&#34;chapter4task1&#34;&gt;Задача 4.1&lt;/h4&gt;
&lt;p&gt;Виведіть на екран наступний текст:&lt;/p&gt;
 &lt;pre&gt;&#34;Саме знання нікому їсти не дасть.&#34;
                      \І. Я. Франко\&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task1&#34;&gt;Задача 4.2&lt;/h4&gt;
&lt;p&gt;Напишіть програму, яка обчислює суму, добуток, різницю, частку та остачу від ділення двох заданих чисел.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task3&#34;&gt;Задача 4.3&lt;/h4&gt;
&lt;p&gt;Напишіть програму, яка конвертує суму грн. у євро.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task4&#34;&gt;Задача 4.4&lt;/h4&gt;
&lt;p&gt;Напишіть попередню програму з умовою, що суму у грн. та курс валюти задає користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task5&#34;&gt;Задача 4.5&lt;/h4&gt;
&lt;p&gt;Написати програму, яка обчислює квадрат введеного числа.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task6&#34;&gt;Задача 4.6&lt;code&gt;*&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Написати програму, яка замінює місцями значення двох
числових змінних без створення третьої змінної.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task7&#34;&gt;Задача 4.7&lt;/h4&gt;
&lt;p&gt;Обрахувати ціну покупки, якщо відомо:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ціну за одиницю товару;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; кількість товару;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; знижка (у % від загальної суми).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task8&#34;&gt;Задача 4.8&lt;/h4&gt;
&lt;p&gt;Дано катети прямокутного трикутника (вводяться з клавіатури користувачем). Визначити довжину гіпотенузи.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter4task9&#34;&gt;Задача 4.9&lt;/h4&gt;
&lt;p&gt;У C# немає функції, яка обчислює квадрат числа. Написати програму, яка обчислює квадрат введеного числа.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4c&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Що таке тип даних?&lt;/li&gt;
&lt;li&gt;Дайте класифікацію типів даних .NET.&lt;/li&gt;
&lt;li&gt;Що таке змінна? Який синтаксис оголошення змінної.&lt;/li&gt;
&lt;li&gt;Що таке констаната? Який синтаксис оголошення констант?&lt;/li&gt;
&lt;li&gt;Що таке область видимості змінної?&lt;/li&gt;
&lt;li&gt;Які види операторів існують у C#?&lt;/li&gt;
&lt;li&gt;Що таке інкремент та декремент? Яка різниця між постфіксним та
прфіксним записом цих операторів?&lt;/li&gt;
&lt;li&gt;Що таке літерал? Який синтаксис запису літералів для різних типів
даних.&lt;/li&gt;
&lt;li&gt;Що таке привдення типів даних?
10.Яка різниця та синтаксис явного та неявного привдення типів даних?
11.Опишіть основні характеристики значимих типів даних.
12.Опишіть основні характеристики посилальних типів даних.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4s&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter4a&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 6. Основи роботи з масивами</title>
      <link>/courses/csharp-basics/lecture6/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture6/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter61&#34;&gt;6.1. Поняття масиву даних&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter62&#34;&gt;6.2. Одновимірні масиви&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter621&#34;&gt;6.2.1. Оголошення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter622&#34;&gt;6.2.2. Ініціалізація&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter63&#34;&gt;6.3. Багатовимірні масиви&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter64&#34;&gt;6.4. Масиви масивів&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter624&#34;&gt;6.5. Цикл foreach та масиви&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter66&#34;&gt;6.6. Сортування масивів [-]&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter67&#34;&gt;6.7. Робота з класом Array [-]&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6tasks&#34;&gt;Задачі&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6sourses&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter6additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter61&#34;&gt;6.1. Поняття масиву даних&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Масив&lt;/strong&gt; задає спосіб організації даних. &lt;strong&gt;Масивом&lt;/strong&gt; називають впорядковану сукупність елементів одного типу.&lt;/p&gt;
&lt;p&gt;Кожен елемент масиву має індекси, що визначають порядок елементів. Число індексів
характеризує розмір масиву. Кожен індекс змінюється в деякому діапазоні &lt;code&gt;[а,b]&lt;/code&gt;. У мові C#, як і в
багатьох інших мовах, індекси задаються цілочисельним типом. Діапазон &lt;code&gt;[а,b]&lt;/code&gt; називається
граничною парою, &lt;code&gt;а&lt;/code&gt; – нижньою межою, &lt;code&gt;b&lt;/code&gt; – верхньою межею. Якщо межі задані константними
виразами, то число елементів масиву відоме у момент його оголошення і йому може бути виділена
пам&amp;rsquo;ять ще на етапі трансляції. Такі масиви називаються статичними. Якщо ж вирази, які задають
межі, залежать від змінних, то такі масиви називаються динамічними, оскільки пам&amp;rsquo;ять їм може
бути відведена лише динамічно в процесі виконання програми, коли стають відомими значення
відповідних змінних. Масиву, як правило, виділяється безперервна область пам&amp;rsquo;яті.&lt;/p&gt;
&lt;p&gt;У мові C++ всі масиви є статичними. У мові C# знято істотне обмеження мови C++ на статичність масивів. Масиви в мові C# є справжніми динамічними масивами. Як наслідок цього масиви відносяться до посилальних типів (&lt;code&gt;Reference&lt;/code&gt;), пам&amp;rsquo;ять їм відводиться динамічно в &amp;ldquo;купі&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;У мові C++ &amp;ldquo;класичних&amp;rdquo; багатовимірних масивів немає. Тут введені одновимірні масиви і масиви
масивів. Останні є загальнішою структурою даних і дозволяють задати не лише багатовимірний куб,
але і порізану, ступінчасту структуру. У мові C# збережені одновимірні масиви і масиви масивів. На додаток до них в мову додані багатовимірні масиви. Динамічні багатовимірні масиви мови C# є потужною, надійною, зрозумілою і зручною структурою даних, яку сміливо можна рекомендувати до вживання не лише професіоналам, але і новачкам, що програмують на C#.&lt;/p&gt;
&lt;p&gt;Після цього короткого огляду давайте перейдемо до більш систематичного вивчення деталей роботи з масивами в C#.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter62&#34;&gt;6.2. Одновимірні масиви&lt;/h2&gt;
&lt;h3 id=&#34;chapter621&#34;&gt;6.2.1. Оголошення&lt;/h3&gt;
&lt;p&gt;У спрощеному вигляді оголошення одновимірного масиву виглядає таким чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;тип[] ім’я_змінної;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Увага, на відміну від мови C++ квадратні дужки приписані не до імені змінної, а до типу. Вони є
невід&amp;rsquo;ємною частиною визначення класу, так що запис &lt;code&gt;T[]&lt;/code&gt; слід розуміти як клас одновимірний масив
з елементами типу &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Що ж до меж зміни індексів, то ця характеристика до класу не відноситься, вона є характеристикою
змінних - екземплярів, кожен з яких є одновимірним масивом зі своїм числом елементів, що
задаються в оголошенні змінної.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] а, b, с;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Найчастіше при оголошенні масиву використовується ім&amp;rsquo;я з ініціалізацією. І знову-таки, як і в разі
простих змінних, можуть бути два варіанти ініціалізації. У першому випадку ініціалізація є явною і
задається константним масивом. Ось приклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double[] x= {5.5, 6.6, 7.7};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Слідуючи синтаксису, елементи константного масиву слід брати у фігурні дужки.
У другому випадку створення і ініціалізація масиву виконується в об&amp;rsquo;єктному стилі з викликом
конструктора масиву. І це найбільш поширена практика оголошення масивів. Наведу приклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] d= new int[5];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Отже, якщо масив оголошується без ініціалізації, то створюється лише висяче посилання із
значенням void. Якщо ініціалізація виконується конструктором, то в динамічній пам&amp;rsquo;яті створюється
сам масив, елементи якого ініціалізувалися константами відповідного типу, і посилання зв&amp;rsquo;язується з цим масивом. Якщо масив ініціалізувався константним масивом, то в пам&amp;rsquo;яті створюється
константний масив, з яким і зв&amp;rsquo;язується посилання.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter622&#34;&gt;6.2.2. Ініціалізація&lt;/h3&gt;
&lt;p&gt;Ініціалізувати масиви, наприклад, можна наступними способами:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Літералами відповідного типу (лістинг 6.1).&lt;/li&gt;
&lt;li&gt;Випадковими числами (лістинг 6.2).&lt;/li&gt;
&lt;li&gt;Ввести з клавіатури (лістинг 6.3).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Заповнення масиву літералами може відбуватися наступним чином:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.1. Заповнення одновимірного масиву літералами&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[] nums = { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
  int[] nums;
  nums = new int[ ] { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
  int[] nums = new int[10] { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Приклад програми на C#, яка заповнює масив випадковими числами:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.2. Заповнення одновимірного масиву літералами&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[] array = new int[10];
    
  //Параметр фіксується для відтворюваності результатів
  Random rand = new Random(2021);
    
  for (int i = 0; i &amp;lt; 10; ++i)
  {
    array[i] = rand.Next(0, 100);
    Console.Write(&amp;quot; {0}&amp;quot;, array[i]);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  54 81 42 92 65 70 42 34 0 51
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ввести з клавіатури значення масиву можна наступним чином:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.3. Заповнення масиву значеннями, введеними з клавіатури&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  //Додаємо кодування кириличних символів
  Console.OutputEncoding = Encoding.UTF8;
  
  int[] array;
  Console.Write(&amp;quot;\n Введіть розмір масиву &amp;gt;\t&amp;quot;);
  int size = Convert.ToInt32(Console.ReadLine());
  array = new int[size];
  
  for (int i = 0; i &amp;lt; array.Length; ++i)
  {
    Console.Write(&amp;quot; Введіть {0}-й елемент:\t&amp;quot;, i + 1);
    array[i] = Convert.ToInt32(Console.ReadLine());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть розмір масиву &amp;gt;        4
  Введіть 1-й елемент:   7
  Введіть 2-й елемент:   45
  Введіть 3-й елемент:   8
  Введіть 4-й елемент:   11
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter63&#34;&gt;6.3. Багатовимірні масиви&lt;/h2&gt;
&lt;p&gt;Жодної принципової різниці між одновимірними та багатовимірними масивами немає.&lt;/p&gt;
&lt;p&gt;Одновимірні масиви - це окремий випадок багатовимірних. Можна говорити і по-іншому:
&lt;strong&gt;багатовимірні масиви&lt;/strong&gt; є природним узагальненням одновимірних. Одновимірні масиви дозволяють
задавати такі математичні структури як вектори, двовимірні - матриці, тривимірні - куби даних,
масиви більшої розмірності - багатовимірні куби даних. Варто відмітити, що при роботі з базами даних багатовимірні куби, так звані куби &lt;code&gt;OLAP&lt;/code&gt;, зустрічаються часто.&lt;/p&gt;
&lt;p&gt;От як виглядає оголошення багатовимірного масиву в загальному випадку:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[,] array;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Приклад ініціалізації:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[,]matrix = {1,2},{3,4};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Давайте розглянемо класичне завдання додавання прямокутних матриць. Нам знадобиться три
динамічні масиви для представлення матриць і три методи, один з яких заповнюватиме вхідні
матриці випадковими числами (&lt;code&gt;FillArray&lt;/code&gt;), інший - виконувати додавання матриць (&lt;code&gt;AddMatrix&lt;/code&gt;), третій - друкувати самі матриці (&lt;code&gt;PrintArray&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Ось тестовий приклад (програма містить трішки довгий код, але варто його переглянути):&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.4. Приклад додавання матриць&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  static void Main(string[] args)
  {
      //Оголосимо розмірність наших матриць
      int rows = 3, cols = 5;
  
      //Оголосимо матриці
      int[,] a = new int[rows, cols];
      int[,] b = new int[rows, cols];
      int[,] result = new int[rows, cols];
  
      //Заповнимо матриці випадковими числами
      a = FillArray(rows, cols, 1);
      b = FillArray(rows, cols, 2);
      //Виведемо на консоль матрицю А
      Console.WriteLine(&amp;quot;\nArray1: &amp;quot;);
      PrintArray(a);
      //Виведемо на консоль матрицю B
      Console.WriteLine(&amp;quot;\nArray2: &amp;quot;);
      PrintArray(b);
  
      //Додамо і присвоїмо результат
      result = AddMatrix(a, b);
  
      if (result != null)
      {
          Console.WriteLine(&amp;quot;\nResultMatrix: &amp;quot;);
          PrintArray(result);
      }
  }
  
  static int[,] AddMatrix(int[,] a, int[,] b)
  {
      //Оголосимо матрицю у яку будемо записувати результат.
      int[,] res = new int[a.GetLength(0), a.GetLength(1)];
  
      //Перевіримо чи однаковий розмір матриць
      if ((a.GetLength(0) != b.GetLength(0)) || (a.GetLength(1) != b.GetLength(1)))
          Console.WriteLine(&amp;quot;Мариці неоднакового розміру.&amp;quot;);
      else
      {
          for (int i = 0; i &amp;lt; a.GetLength(0); ++i)
          {
              //Виконуємо додавання елементів матриць
              for (int j = 0; j &amp;lt; a.GetLength(1); ++j)
                  res[i, j] = a[i, j] + b[i, j];
          }
          return res;
      }
      return null;
  }
  
  static int[,] FillArray(int rows, int cols, int seed)
  {
      int[,] array = new int[rows, cols];
      //Створює змінну класу Random для генерування значень
      Random rand = new Random(seed);
  
      for (int i = 0; i &amp;lt; rows; ++i)
      {
          for (int j = 0; j &amp;lt; cols; ++j)
          {
              array[i, j] = rand.Next(0, 100);
          }
      }
      return array;
  }
  
  static void PrintArray(int[,] array)
  {
      for (int i = 0; i &amp;lt; array.GetLength(0); ++i)
      {
          for (int j = 0; j &amp;lt; array.GetLength(1); ++j)
          {
              //Виводимо значення на консоль
              Console.Write(&amp;quot; {0}\t&amp;quot;, array[i, j]);
          }
          Console.WriteLine();
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Array1:
   24      11      46      77      65
   43      35      94      10      64
   2       24      32      98      68
  
  Array2:
   77      40      16      98      10
   30      80      44      22      1
   76      2       0       51      38
  
  ResultMatrix:
   101     51      62      175     75
   73      115     138     32      65
   78      26      32      149     106
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter64&#34;&gt;6.4. Масиви масивів&lt;/h2&gt;
&lt;p&gt;Ще одним видом масивів C# є масиви масивів, звані також різаними/рваними масивами (&lt;strong&gt;jagged
arrays&lt;/strong&gt;). Такий масив масивів можна розглядати як одновимірний масив, елементи якого є масивами,
елементи яких, у свою чергу, знову можуть бути масивами, і так може тривати до деякого рівня
вкладеності.&lt;/p&gt;
&lt;p&gt;У яких ситуаціях може виникати необхідність в таких структурах даних? Ці масиви можуть
застосовуватися для представлення дерев, в яких вузли можуть мати довільне число нащадків. Таким
може бути, наприклад, генеалогічне дерево. Вершини першого рівня - &lt;code&gt;Fathers&lt;/code&gt;, що представляють
батьків, можуть задаватися одновимірним масивом, так що &lt;code&gt;Fathers[i]&lt;/code&gt; - це &lt;code&gt;i&lt;/code&gt;-й батько. Вершини
другого рівня представляються масивом масивів - &lt;code&gt;Children&lt;/code&gt;, так що &lt;code&gt;Children[i]&lt;/code&gt; - це масив дітей &lt;code&gt;i&lt;/code&gt;-го батька, а &lt;code&gt;Children[i][j]&lt;/code&gt; - це &lt;code&gt;j&lt;/code&gt;-а дитина &lt;code&gt;i&lt;/code&gt;-го батька. Для представлення внуків знадобиться третій рівень, так що &lt;code&gt;GrandChildren[i][j][k]&lt;/code&gt; представлятиме &lt;code&gt;k&lt;/code&gt;-го внука &lt;code&gt;j&lt;/code&gt;-ї дитини &lt;code&gt;i&lt;/code&gt;-го батька.&lt;/p&gt;
&lt;p&gt;Є деякі особливості в оголошенні і ініціалізації таких масивів. Якщо при оголошенні багатовимірних
масивів для вказівки розмірності використовувалися коми, то для порізаних масивів застосовується
зрозуміліша символіка - сукупності пар квадратних дужок; наприклад, &lt;code&gt;int[][]&lt;/code&gt; задає масив, елементи якого - одновимірні масиви елементів типу &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Складніше зі створенням самих масивів і їх ініціалізацією. Тут не можна викликати конструктор &lt;code&gt;new int[3][5]&lt;/code&gt;, оскільки він не задає порізаний масив. Фактично потрібно викликати конструктор для
кожного масиву на нийнижчому рівні. У цьому і полягає складність оголошення таких масивів.&lt;/p&gt;
&lt;p&gt;Розпочнемо з формального прикладу:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[][] jagger = new int[3][]
  {
    new int[] {5,7,9,11},
    new int[] {2,8},
    new int[] {6,12,4}
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Масив &lt;code&gt;jagger&lt;/code&gt; має всього два рівні. Можна вважати, що у нього три елементи, кожен з яких є
масивом. Для кожного такого масиву необхідно викликати конструктор &lt;code&gt;new&lt;/code&gt;, аби створити
внутрішній масив. У даному прикладі елементи внутрішніх масивів набувають значення, будучи
явно ініціалізовані константними масивами. Звичайно, допустимим є і таке оголошення:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[][] jagger1 = new int[3][]
  {
    new int[4],
    new int[2],
    new int[3]
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;В цьому випадку елементи масиву набудуть при ініціалізації нульових значень. Реальну
ініціалізацію потрібно буде виконувати програмним шляхом. Варто відмітити, що в конструкторі
верхнього рівня константу &lt;code&gt;3&lt;/code&gt; можна опустити і писати просто &lt;code&gt;new int[][]&lt;/code&gt;. Також виклик
цього конструктора можна взагалі опустити - він матиметься на увазі:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int[][] jagger2 =
  {
    new int[4],
    new int[2],
    new int[3]
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оголошувати вкладені масиви обов’язково.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter624&#34;&gt;6.5. Цикл foreach та масиви&lt;/h2&gt;
&lt;p&gt;У лекції про цикли загдувалося, що у мові С# визначений цикл &lt;code&gt;foreach&lt;/code&gt;, але детальний його розгляд
був відкладений «на потім». Час для нього настав.&lt;/p&gt;
&lt;p&gt;Цикл &lt;code&gt;foreach&lt;/code&gt; використовується для опису елементів колекції. &lt;strong&gt;Колекція&lt;/strong&gt; – це група об&amp;rsquo;єктів. С#
визначає декілька типів колекцій, і одним з них є масив. Формат запису циклу &lt;code&gt;foreach&lt;/code&gt; має такий
вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  foreach (тип ім&#39;я_змінної in колекція) 
  {
    інструкції;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Тут елементи тип та ім’я_змінної задають тип та ім&amp;rsquo;я ітераційної змінної, яка при функціонуванні
циклу &lt;code&gt;fоreach&lt;/code&gt; набуватиме значень елементів з колекції. Елемент колекція служить для вказівки
опитуваної колекції (в даному випадку як колекцію ми розглядаємо масив). Таким чином, елемент
тип повинен збігатися (або бути сумісним) з базовим типом масиву. Тут важливо запам&amp;rsquo;ятати, що
ітераційну змінну стосовно масиву можна використовувати лише для читання. Отже, неможливо
змінити вміст масиву, присвоївши ітераційній змінній нове значення.&lt;/p&gt;
&lt;p&gt;Розглянемо простий приклад використання циклу &lt;code&gt;foreach&lt;/code&gt;. Приведена нижче програма створює
масив для зберігання цілих чисел і присвоює його елементам початкові значення. Потім вона
відображає елементи масиву, попутно обчислюючи їх суму.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;em&gt;Лістинг 6.5. Робота з циклом foreach&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.UTF8;
  
  int[] array = new int[10];
  int suma = 0;
  Random r = new Random(2021);
  
  //Заповнюмє масив випадковими числами
  for (int i = 0; i &amp;lt; array.Length; ++i)
      array[i] = r.Next(10, 100);
  
  Console.Write(&amp;quot;Array:\t&amp;quot;);
  foreach (int element in array)
  {
      Console.Write(&amp;quot;{0} &amp;quot;, element);
      suma += element;
  }
  Console.WriteLine(&amp;quot;\n\nСума елементів:\t{0}&amp;quot;, suma);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-play text-muted  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Array:  59 83 48 93 69 73 48 41 10 56

  Сума елементів: 580
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter66&#34;&gt;6.6. Сортування масивів [-]&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Розділ у процесі наповнення
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter67&#34;&gt;6.7. Робота з класом Array [-]&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Розділ у процесі наповнення
  &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6tasks&#34;&gt;Задачі&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task1&#34;&gt;Задача 6.1&lt;/h4&gt;
&lt;p&gt;Написати програму, що знаходить суму парних та суму непарних елементів масиву.Кількість елементів визначає користувач, елементи генеруються випадковим чином у діапазоні [10;100] (цілі числа).&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task2&#34;&gt;Задача 6.2&lt;/h4&gt;
&lt;p&gt;Написати програму, що знаходить і виводить на консоль у цілочисельному масиві усі парні значення кратні $3$-м. Елементи масиву генеруються випадковим чином у діапазоні $[100, 200]$. Кількість елементів визначає користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task3&#34;&gt;Задача 6.3&lt;/h4&gt;
&lt;p&gt;Написати програму, яка знаходить в масиві найменше непарне число і показує його на
екран. Елементи масиву генеруються випадковим чином у діапазоні $[1, 1000]$. Кількість стовпців вводить
користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task4&#34;&gt;Задача 6.4&lt;/h4&gt;
&lt;p&gt;Написати програму, що сортує масив у вказаному користувачем порядку: за зростанням або за спаданням. Елементи масиву генеруються випадковим чином у діапазоні $[100, 200]$. Кількість елементів визначає користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task2x&#34;&gt;Задача 6.2x&lt;/h4&gt;
&lt;p&gt;Дано пустий масив розмірності 5х5 елементів. Заповнити його випадковими значеннями з діапазону [10;20] і вивести на консоль.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task5&#34;&gt;Задача 6.5&lt;/h4&gt;
&lt;p&gt;Задано масив із $n$ дійсних чисел. Обчислити різницю між максимальним та мінімальним
за модулем елементами цього масиву. Елементи масиву генеруються випадковим чином. Кількість
стовпців та рядків вводить користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task6&#34;&gt;Задача 6.6&lt;/h4&gt;
&lt;p&gt;Дано одновимірний масив із дійсних чисел. Відсортувати його таким чином, щоб всі
додатні елементи знаходилися на початку, а всі від&amp;rsquo;ємні – в кінці, і при цьому зберігся початковий
порядок елементів в обох групах.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task7&#34;&gt;Задача 6.7&lt;/h4&gt;
&lt;p&gt;Написати програму, що обчислює середнє значення серед парних елементів масиву. Елементи генеруються випадковим чином у діапазоні [10; 100). Кількість елементів визначає користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task8&#34;&gt;Задача 6.8&lt;/h4&gt;
&lt;p&gt;Написати програму, що генерує вектор випадкових елементів з діапазону $[100;200]$ та виводить його на консоль. Усі елементи вектора повинні бути кратними &lt;code&gt;7&lt;/code&gt;-ми. Генерацію випалкового числа винести в окремий метод.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task9&#34;&gt;Задача 6.9&lt;/h4&gt;
&lt;p&gt;Написати програму, що дозволяє маніпулювати елементами цілочисельного масиву. Суть роботи програми полягає у наступному: через діалог з користувачем потрібно реалізувати функції: додавання, видалення, вставки числа у існуючий масив.&lt;/p&gt;
&lt;p&gt;На початку роботи програми масив уже повинен бути ініціалізований 5-ма випадковими значеннями з діапазону $10;500$.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task10&#34;&gt;Задача 6.10&lt;/h4&gt;
&lt;p&gt;Задано одновимірний масив. Знайти два серед його елементів, модуль різниці яких має
найменше значення.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task4x&#34;&gt;Задача 6.4x&lt;/h4&gt;
&lt;p&gt;Написати програму, яка знаходить суму парних і суму непарних елементів масиву.
Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task11&#34;&gt;Задача 6.11&lt;/h4&gt;
&lt;p&gt;Сформувати цілочисельний масив, елементами якого є випадкові числа із діапазону $[100;300]$.
Знайти суму елементів масиву, значення яких кратні $8$.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task12&#34;&gt;Задача 6.12&lt;/h4&gt;
&lt;p&gt;Знайти мінімальний елемент серед тих елементів масиву $A$, які не є елементами масиву $B$.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task13&#34;&gt;Задача 6.13&lt;/h4&gt;
&lt;p&gt;Визначити, скільки різних чисел міститься в заданому цілочисельному масиві.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task14&#34;&gt;Задача 6.14&lt;/h4&gt;
&lt;p&gt;Написати програму, яка знаходить в масиві значення, що повторюються два і більше разів, і показує їх на екран. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач. Наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  45  12  12  63
  15  12  45  78
  75  56  89  1
  
  Результат: 12, 75
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task15&#34;&gt;Задача 6.15&lt;/h4&gt;
&lt;p&gt;Розробити функцію, що переставляє в зворотному порядку елементи головної діагоналі
квадтаної матриці.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task16&#34;&gt;Задача 6.16&lt;/h4&gt;
&lt;p&gt;Переформатувати марицю (двовимірний масив) таким чином, щоб її рядки розміщувалися за зростанням їх поелементних сум.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task17&#34;&gt;Задача 6.17&lt;/h4&gt;
&lt;p&gt;Відсортувати рядки двохвимірного масиву за зростанням. Кількість рядків і стовпців вводить користувач. Масив заповнюється випадковими числами із діапазону $[10; 100)$.&lt;/p&gt;
&lt;p&gt;Наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  45  12  12  63
  15  12  45  78
  75  56  89  1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  12  12  45  63
  12  15  45  78
  1   56  75  89
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter6task18&#34;&gt;Задача 6.18&lt;/h4&gt;
&lt;p&gt;Згенерувати матрицю значень $n*n$ (квадратну). Знайти максимальний елемент у виділеному кольором діапазоні масиву:&lt;/p&gt;
&lt;figure &gt;
&lt;p&gt;&lt;a data-fancybox=&#34;&#34; href=&#34;/media/courses/csharp-basics/lecture6/lecture-6-task-13.svg&#34; &gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/media/courses/csharp-basics/lecture6/lecture-6-task-13.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;Так, для підзавдання 13.3 і матриці поданої нижче&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  45  12  12  63
  15  12  45  78 
  75  56  89  1
  53  75  78  21
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;максимум становитиме &lt;strong&gt;89&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6sourses&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter6additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 7. Перелічувані типи та структури</title>
      <link>/courses/csharp-basics/lecture7/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture7/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter71&#34;&gt;7.1. Перелічувані типи&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter711&#34;&gt;7.1.1. Оголошення&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter712&#34;&gt;7.1.2. Заміна значень&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter713&#34;&gt;7.1.3. Перетворення&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter72&#34;&gt;7.2. Робота зі структурами&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter721&#34;&gt;7.2.1. Оголошення &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter722&#34;&gt;7.2.2. Поля &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter724&#34;&gt;7.2.4. Методи &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter725&#34;&gt;7.2.5. Конструктори &lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter726&#34;&gt;7.2.6. Масив об&amp;rsquo;єктів &lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7task&#34;&gt;Задачі&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter7sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter71&#34;&gt;7.1. Перелічувані типи&lt;/h2&gt;
&lt;h3 id=&#34;chapter711&#34;&gt;7.1.1. Оголошення&lt;/h3&gt;
&lt;p&gt;Коли ви створюєте програму, часто буває зручно створити множину символьних імен для базових
числових значень.&lt;/p&gt;
&lt;p&gt;Розглянемо практичну задачу. Припустимо, що ви пишете програму у якій використовуєте
інформацію про дні тижня. До цього ми визначали дні тижня по номеру дня. Наприклад:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.1. Визначення дня тижня за номером&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int a = 4;
switch (a)
{
  case 1:
    Console.WriteLine(&amp;quot;Понеділок&amp;quot;);
    break;
  case 2:
    Console.WriteLine(&amp;quot;Вівторок&amp;quot;);
    break;
  case 3:
    Console.WriteLine(&amp;quot;Середа&amp;quot;);
    break;
  case 4:
    Console.WriteLine(&amp;quot;Четвер&amp;quot;);
    break;
  case 5:
    Console.WriteLine(&amp;quot;Пятниця&amp;quot;);
    break;
  case 6:
    Console.WriteLine(&amp;quot;Субота&amp;quot;);
    break;
  case 7:
    Console.WriteLine(&amp;quot;Неділя&amp;quot;);
    break;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проте подібний варіант заставляє програміста постійно пам’ятати, якій цифрі відповідає конкретний день тижня. Краще було б іменувати ці змінні.&lt;/p&gt;
&lt;p&gt;У подібних ситуаціях використовуються перелічувані типи.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Перелічуваний тип&lt;/strong&gt; (&lt;strong&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/strong&gt;) - це визначений програмістом тип, який може приймати тільки обмежений набір значень.&lt;/p&gt;
&lt;p&gt;За своїм внутрішнім представленням перелічуваний тип є цілим чимлом. Для перелічуваних типів затверджені наступні типи: &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; або &lt;code&gt;ulong&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Згалом перелічувані типи є одним із варіантів &lt;code&gt;User Defined Type&lt;/code&gt; (&lt;code&gt;UDT&lt;/code&gt;), тобто визначених користувачем типів. Такі типи у використанні не мають відмінностей від стандарних типів даних, як &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt; тощо.&lt;/p&gt;
&lt;p&gt;Загальний вигляд запису перелічуваного типу:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модиф_доступу enum Назва : тип
  {
    Елемент1,
    Елемент2,
    ...,
    ЕлементN,
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Модифікатори доступу можуть бути:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;public&lt;/code&gt; – доступний для усіх.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;private&lt;/code&gt; – доступний лише всередині поточного класу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Розглянемо приклади опису перелічуваних типів:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.2. Перелічуваний тип &amp;ldquo;Кольори&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public enum MyColors
  {
    Red,
    Yellow,
    Green
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.3. Перелічуваний тип &amp;ldquo;Арифметичні операції&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public enum Operations
  {
    Plus,
    Minus,
    Divide,
    Multiply
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для днів тижня перелічуваний тип матиме вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.4. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon,  //0
    Tue,  //1
    Wed,  //2
    Thu,  //3
    Fri,  //4
    Sat,  //5
    Sun   //6
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter712&#34;&gt;7.1.2. Заміна значень&lt;/h3&gt;
&lt;p&gt;Перелічувальний тип &lt;code&gt;Days&lt;/code&gt; визначає чотири іменовані константи, відповідні деяким числовим
значенням. У С# перший елемент за замовчуванням має нульовий індекс ($0$) і далі по наростаючій ($n + 1$).&lt;/p&gt;
&lt;p&gt;Ви можете змінити цю поведінку, як вам потрібно:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.5. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; зі зміною цілочисельних значень.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon = 10,
    Tue,  //11
    Wed,  //12
    Thu,  //13
    Fri,  //14
    Sat,  //15
    Sun   //16
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Номери елементів перелічувального типу не обов&amp;rsquo;язково мають бути послідовними. Якщо (з будь-якої причини) є сенс визначити Days таким чином, компілятор заперечувати не буде:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.6. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; зі зміною цілочисельних значень.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
    Mon = 10,
    Tue,    //11
    Wed = 75,
    Thu = 100,
    Fri,    //101
    Sat,    //102
    Sun     //103
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Для зберігання кожного елементу перелічувального типу за замовчуванням використовується клас
&lt;code&gt;System.Int32&lt;/code&gt;. Ви також можете змінити цю поведінку. Наприклад, якщо ви хочете, аби внутрішні
елементи &lt;code&gt;Days&lt;/code&gt; зберігалися як значення типу &lt;code&gt;byte&lt;/code&gt;, а не як &lt;code&gt;int&lt;/code&gt;, можна написати наступне:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.7. Перелічуваний тип &amp;ldquo;Дні тижня&amp;rdquo; унаслідуваний від &lt;code&gt;byte&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days : byte
  {
    Mon = 10,
    ...,
    Sat,
    Sun
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад задачі про визначення днів тижня уже з використанням типу &lt;code&gt;Days&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.8. Приклад розв&amp;rsquo;язання задачі з використанням типу &lt;code&gt;Days&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  enum Days
  {
     Mon = 1, 
    Tue,    //2
    Wed,    //3
    Thu,    //4
    Fri,    //5
    Sat,    //6
    Sun     //7
  }

  static void Main(string[] args)
  {
    Days day = Days.Thu;
    switch (day)
    {
      case Days.Mon:
        Console.WriteLine(&amp;quot;Понеділок&amp;quot;);
        break;
      case Days.Tue:
        Console.WriteLine(&amp;quot;Вівторок&amp;quot;);
        break;
      case Days.Wed:
        Console.WriteLine(&amp;quot;Середа&amp;quot;);
        break;
      case Days.Thu:
        Console.WriteLine(&amp;quot;Четвер&amp;quot;);
        break;
      case Days.Fri:
        Console.WriteLine(&amp;quot;Пятниця&amp;quot;);
        break;
      case Days.Sat:
        Console.WriteLine(&amp;quot;Субота&amp;quot;);
        break;
      case Days.Sun:
        Console.WriteLine(&amp;quot;Неділя&amp;quot;);
        break;
    }
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Четвер
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Даний приклад є лише демонстраційним і створювати такий перелічуваний тип немає жодної
потреби, адже існує уже вбудований аналогічний тип &lt;code&gt;DayOfWeek&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Перепишіть попереденю програму із використанням стандартного перелічуваного типу даних
&lt;code&gt;DayOfWeek&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter713&#34;&gt;7.1.3. Перетворення&lt;/h3&gt;
&lt;p&gt;Перелічувані типи можуть бути успішно конвертовані у числа, а також зчитані з тектових та числових значень.&lt;/p&gt;
&lt;p&gt;Якщо для &lt;code&gt;enum&lt;/code&gt;-у оголошеному у &lt;em&gt;лістингу 7.8&lt;/em&gt; використати наступний код:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.9. Перетворення типу даних &lt;code&gt;Days&lt;/code&gt; до &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Days day = Days.Tue;
  Console.WriteLine(day);
  Console.WriteLine((int)day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; то результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Tue
  2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можливий також і зворотній варіант:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.10. Перетворення типу даних &lt;code&gt;int&lt;/code&gt; до &lt;code&gt;Days&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Days day = (Days)5;
  Console.WriteLine(day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Fri
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також для роботи з перелічуваними типами варто скоритатися класом &lt;code&gt;Enum&lt;/code&gt;, який має ряд корисних методів та властивостей. Коротко розглянемо один із них, а саме &lt;code&gt;Enum.Parse&amp;lt;&amp;gt;()&lt;/code&gt;. Цей метод дозволяє введений (у вигляді рядка) текст перетворити в об&amp;rsquo;єкт перелічуваного типу.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.11. Перетворення типу даних &lt;code&gt;string&lt;/code&gt; до &lt;code&gt;Days&lt;/code&gt; за допомогою &lt;code&gt;Enu.Parse&amp;lt;&amp;gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть значення enum:\t&amp;quot;);
  Days day = Enum.Parse&amp;lt;Days&amp;gt;(Console.ReadLine());
  Console.WriteLine(&amp;quot;Enum:\t\t&amp;quot; + day);
  Console.WriteLine(&amp;quot;Integer:\t&amp;quot; + (int)day);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Введіть значення enum:  Sun //вводиться користувачем
  Enum:           Sun
  Integer:        7

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Детальніше про клас &lt;code&gt;Enum&lt;/code&gt; можна ознайомитися у &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.enum&#34;&gt;документації на сайті компанії Microsoft&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;chapter72&#34;&gt;7.2. Робота зі структурами&lt;/h2&gt;
&lt;h3 id=&#34;chapter721&#34;&gt;7.2.1. Оголошення &lt;/h3&gt;
&lt;p&gt;У C# існує багато різних типів даних для представлення інформації. Проте всі об&amp;rsquo;єкти реального світу описати розробникам усе-таки не вдалося 😄. Наприклад, якщо потрібно описати поняття студент, квартира, веб-сайт, комп&amp;rsquo;ютер та ін. є потреба створювати користувацькі типи даних. 
До таких типів даних належать класи та структури, а також розглянуті вище перелічувані типи. Класи по суті є розширенням структур, вони будуть розглянуті пізніше.&lt;/p&gt;
&lt;p&gt;Структури в C# практично нічим не відрізняються від структур на будь-яких інших мовах.
Відмінності спостерігаються лише на більш низькому рівні. В основному це стосується того, що для
структур в C# не існує базового класу. Але в той же час структури є похідними від типу &lt;code&gt;ValueType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Дуже узагальнивши поняття структури можна визначити його, як згруповану сукупність
ознак(даних) певного об&amp;rsquo;єкта, методів управління цими ознаками та доступу до них.
Структури визначаються за допомогою ключового слова &lt;code&gt;struct&lt;/code&gt;, наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  модиф_доступу struct Назва
  {
    // Поля, властивості, методи...
  } 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Структури використовують велику частину того ж синтаксису, що і класи, проте вони більш
обмежені в порівнянні з ними:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; У оголошенні структури поля не можуть ініціалізувати до тих пір, поки вони будуть оголошені як постійні або статичні.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура може не оголошувати використовуваний за замовчуванням конструктор (конструктор без параметрів) або деструктор.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури копіюються при присвоєнні. При присвоєнні структури у нову змінну виконується копіювання всіх даних, а будь-яка зміна нової копії не впливає на дані у вихідній копії.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури є значимими типами, а класи - посилальними типами.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть бути створені без використання оператора &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть оголошувати конструктори, що мають параметри.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура не може наслідуватися від іншої структури або класу і не може бути основою для інших класів. Всі структури наслідуються безпосередньо від &lt;code&gt;System.ValueType&lt;/code&gt;, який наслідується від &lt;code&gt;System.Object&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структури можуть реалізовувати інтерфейси.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Структура може використовуватися як тип, що допускає значення &lt;code&gt;NULL&lt;/code&gt;, і їй можна призначити значення &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Структура&lt;/strong&gt; - це набір залежних один від одного змінних. Залежність тут виключно логічна і визначається умовами задачі. Аби стало зрозуміло, розглянемо простий приклад.&lt;/p&gt;
&lt;h3 id=&#34;chapter722&#34;&gt;7.2.2. Поля &lt;/h3&gt;
&lt;p&gt;Припустимо, ми пишемо програму, що друкує довідки для студентів. Всі довідки мають один і той же вигляд і текст, окрім наступних полів: імя, прізвище, курс, факультет, дата народження. Це залежні дані і їх можна представити у вигляді структури, наприклад так:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.12. Опис структури &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
    public string _firstName;
    public string _lastName; 
    public DateTime _dateOfBirth;
    public string _faculty;
    public int _course;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Усі елементи у представленій вище структурі є полями. Модифікатор доступу &lt;code&gt;public&lt;/code&gt; до полів означає, що доступ до цього поля є повним у всіх блоках програми.
На рис. 7.1. зображено різницю, коли поле оголошено &lt;code&gt;private&lt;/code&gt;, і коли &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td style=&#34;width:50%&#34;&gt;&lt;img style=&#34;width:100%&#34; src=&#34;/media/courses/csharp-basics/lecture7/public_img.png&#34; alt=&#34;&#34;/&gt;&lt;/td&gt;
     &lt;td style=&#34;width:45%&#34;&gt;&lt;img style=&#34;width:100%&#34; src=&#34;/media/courses/csharp-basics/lecture7/private_img.png&#34; alt=&#34;&#34;/&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;center&gt;
&lt;p&gt;Рис. 7.1. Відмінність у доступі до поля залежно від модифікатора &lt;code&gt;public&lt;/code&gt;/&lt;code&gt;private&lt;/code&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Наша структура називається &lt;code&gt;Student&lt;/code&gt; і має 5 полів. Після того, як структура оголошена, ми можемо з нею працювати.&lt;/p&gt;
&lt;p&gt;Розглянемо &lt;strong&gt;приклад&lt;/strong&gt;: &lt;em&gt;потрібно вивести довідку з інформацією про студента.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.13. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student();
      student.firstName = &amp;quot;Дмитро&amp;quot;;
      student.lastName = &amp;quot;Попов&amp;quot;;
      student.faculty = &amp;quot;гуманітарний&amp;quot;;
      student.course = 3;
      student.dateOfBirth = DateTime.Parse(&amp;quot;02/05/1990&amp;quot;);
  
      Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
      Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
      Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
          student.firstName, student.lastName, student.course);
      Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + student.dateOfBirth.ToShortDateString());
      Console.WriteLine(&amp;quot; Факультет: &amp;quot; + student.faculty);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: гуманітарний
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter724&#34;&gt;7.2.4. Методи &lt;/h3&gt;
&lt;p&gt;Структури підримують також і &lt;strong&gt;методи&lt;/strong&gt;. Виведення інформації про студента можна винести у метод структури і викликати у програмі. Для цього створимо метод &lt;code&gt;Print&lt;/code&gt;. Також напишемо метод, який буде повертати повне ім&amp;rsquo;я студента, наприклад, Попов Дмитро.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.14. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;. Додавання методів.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  
      public void Print()
      {
          Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
          Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
          Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
              firstName, lastName, course);
          Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + dateOfBirth.ToShortDateString());
          Console.WriteLine(&amp;quot; Факультет: &amp;quot; + faculty);
      }
  
      public string GetFullName()
      {
          return firstName + &amp;quot; &amp;quot; + lastName;
      }
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student();
      student.firstName = &amp;quot;Дмитро&amp;quot;;
      student.lastName = &amp;quot;Попов&amp;quot;;
      student.faculty = &amp;quot;гуманітарний&amp;quot;;
      student.course = 3;
      student.dateOfBirth = DateTime.Parse(&amp;quot;02/05/1990&amp;quot;);
  
      student.Print();
      Console.WriteLine(&amp;quot;\n &amp;quot; + student.GetFullName() + &amp;quot;\n&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: гуманітарний

 Дмитро Попов
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter725&#34;&gt;7.2.5. Конструктори &lt;/h3&gt;
&lt;p&gt;Структури підтримують також і конструктори.&lt;/p&gt;
&lt;p&gt;У об&amp;rsquo;єктно-орієнтованому програмуванні конструктор класу (від англ. &lt;code&gt;constructor&lt;/code&gt;, інколи скорочують &lt;code&gt;ctor&lt;/code&gt;) - спеціальний блок інструкцій, що викликається при створенні об&amp;rsquo;єкту з використанням ключового слова &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Конструктор схожий з методом, але відрізняється від методу тим, що не має явно оголошеного типу повертаємого значення, не наслідується. Конструктори виділяються наявністю однакового імені з ім&amp;rsquo;ям класу, в якому оголошуються. Конструкторів може бути одразу кілька.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.15. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;. Додавання конструктора.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  struct Student
  {
      // Поля
      public string firstName;
      public string lastName;
      public DateTime dateOfBirth;
      public string faculty;
      public int course;
  
      // Конструктор
      public Student(string _firstName, string _lastName, DateTime _dateOfBirth, string _faculty, int _course)
      {
          this.firstName = _firstName;
          this.lastName = _lastName;
          dateOfBirth = _dateOfBirth;
          faculty = _faculty;
          course = _course;
      }
  
      // Методи
      public void Print()
      {
          Console.WriteLine(&amp;quot;\t\tДОВIДКА&amp;quot;);
          Console.WriteLine(&amp;quot; пiдтвреджує, що&amp;quot;);
          Console.WriteLine(&amp;quot; {0} {1} дiйсно навчається на {2}-му курсі.&amp;quot;,
              firstName, lastName, course);
          Console.WriteLine(&amp;quot; Дата народження: &amp;quot; + dateOfBirth.ToShortDateString());
          Console.WriteLine(&amp;quot; Факультет: &amp;quot; + faculty);
      }
  
      public string GetFullName()
      {
          return firstName + &amp;quot; &amp;quot; + lastName;
      }
  }
  
  static void Main(string[] args)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Student student = new Student(&amp;quot;Дмитро&amp;quot;, &amp;quot;Попов&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;гуманітарний&amp;quot;, 3);
      student.Print();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат виконання аналогічних до результату з лістингу 7.13.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter726&#34;&gt;7.2.6. Масив об&amp;rsquo;єктів &lt;/h3&gt;
&lt;p&gt;Якщо порівняти приклад та 7.13, то коду приблизно однаково. Але при зростанні кількості обєктів типу Студент буде видно суттєву оптимізацію. Напишемо програму, яка виводить на екран довідки 3-х студентів.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 7.16. Приклад роботи зі структурою &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  static void Main(string[] args)
  {
    Console.OutputEncoding = Encoding.Unicode;
     
    Student[] group = new Student[3];
    group[0] = new Student(&amp;quot;Дмитро&amp;quot;, &amp;quot;Попов&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
    group[1] = new Student(&amp;quot;Іван&amp;quot;, &amp;quot;Петров&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
    group[2] = new Student(&amp;quot;Олена&amp;quot;, &amp;quot;Чуприна&amp;quot;, DateTime.Parse(&amp;quot;02/05/1990&amp;quot;), &amp;quot;економічний&amp;quot;, 3);
  
    foreach (Student student in group)
      student.Print();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Результат роботи програми матиме вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                ДОВIДКА
 пiдтвреджує, що
 Дмитро Попов дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
                ДОВIДКА
 пiдтвреджує, що
 Іван Петров дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
                ДОВIДКА
 пiдтвреджує, що
 Олена Чуприна дiйсно навчається на 3-му курсі.
 Дата народження: 2/5/1990
 Факультет: економічний
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Детальніше про роботу з обєктами буде розглянуто в Темі 8. ООП.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7task&#34;&gt;Задачі&lt;/h2&gt;
&lt;h4 id=&#34;chapter7task1&#34;&gt;Задача 7.1&lt;/h4&gt;
&lt;p&gt;Написати програму, що дозволяє маніпулювати даними про товари у магазині. Товар описати як окрему структуру (struct) з полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва (&lt;code&gt;Title&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Категорія (&lt;code&gt;Category&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Ціна (&lt;code&gt;Price&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Кількість (&lt;code&gt;Quantity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Категорії товарів визначені як перелічуваний тип (enum) і мають наперед визначені значення, наприклад:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Промислові товари (&lt;code&gt;Industrial products&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Побутова хімія (&lt;code&gt;Household  chemicals&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Продукти харчування (&lt;code&gt;Food&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Реалізувати функції:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вивести список товарів&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Додавати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Редагувати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Видалити товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вийти з програми&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Взаємодію з користувачем реалізувати через меню.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter7task2&#34;&gt;Задача 7.2&lt;/h4&gt;
&lt;p&gt;Описати структуру &lt;strong&gt;Книга&lt;/strong&gt; (&lt;code&gt;Book&lt;/code&gt;) з даними:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Автор&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Рік видання&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Місце видання&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Реалізувати метод для виведення інформації про книгу, наприклад &lt;code&gt;Print()&lt;/code&gt;, який приймає 1 параметр &lt;code&gt;showFullInfo&lt;/code&gt; типу &lt;code&gt;bool&lt;/code&gt; і в залежності від його значення виводить інформацію про книгу у форматі:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; якщо &lt;code&gt;showFullInfo == true&lt;/code&gt;, то виводиться стрічка з інформацією про усі поля книги;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; якщо &lt;code&gt;showFullInfo == false&lt;/code&gt;, то виводиться стрічка з інформацією тільки про поля &lt;strong&gt;Назва&lt;/strong&gt; та &lt;strong&gt;Автор&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Автора&lt;/strong&gt; реалізувати як окрему структуру з полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Імя&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Прізвище&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Дата народження&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Створити масив з 5-ти книг та вивети його на консоль методом &lt;code&gt;Print()&lt;/code&gt; з різними параметрами.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;chapter7task1&#34;&gt;Задача 7.3&lt;/h4&gt;
&lt;p&gt;На основі структур, створених у &lt;a href=&#34;#chapter7task2&#34;&gt;&lt;strong&gt;завданні 7.2&lt;/strong&gt;&lt;/a&gt; написати програму для маніпулюванням інформації про книги у каталозі.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle fa-2x text-warning  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h4 id=&#34;chapter7task5&#34;&gt;Задача 7.4&lt;/h4&gt;
&lt;p&gt;Написати програму для маніпулювання даними про товари у магазині.
Кожен товар повинен обов&amp;rsquo;язково описуватися полями:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Артикул (ідентифікатор товару)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Назва&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Бренд&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Ціна&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Залишок на складі (кількість)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Бренди товарів реаліузвати як перелічуваний тип.&lt;/p&gt;
&lt;p&gt;Реалізувати меню:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Список товарів&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Продати товар&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вивести товари по бренду&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Додати товар у каталог&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Вийти&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter7questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book fa-2x text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter7sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція 8. Вступ до об&#39;єктно-орієнтовного програмування</title>
      <link>/courses/csharp-basics/lecture8/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecture8/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter81&#34;&gt;8.1. Поняття об&amp;rsquo;єкта та класу. Основні елементи класу&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter82&#34;&gt;8.2. Будова класу&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter821&#34;&gt;8.2.1. Поля класу&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter822&#34;&gt;8.2.2. Методи класу&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#chapter822&#34;&gt;8.2.3. Конструктори&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#83-інкапсуляція&#34;&gt;8.3. Інкапсуляція&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#831-реалізація-інкапсуляції-традиційними-методами-доступу-і-зміни-даних&#34;&gt;8.3.1. Реалізація інкапсуляції традиційними методами доступу і зміни даних&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#832-друга-форма-інкапсуляції---властивості-класу&#34;&gt;8.3.2. Друга форма інкапсуляції - властивості класу&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#834-властивості-лише-для-читання-і-лише-для-запису&#34;&gt;8.3.4. Властивості лише для читання і лише для запису&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#84-підтримка-наслідування-у-с&#34;&gt;8.4. Підтримка наслідування у С#&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#841-наслідування&#34;&gt;8.4.1. Наслідування&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#842-ключове-слово-protected&#34;&gt;8.4.2. Ключове слово &lt;code&gt;protected&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#843-запобігання-наслідування---запаковані-класи-sealed&#34;&gt;8.4.3. Запобігання наслідування - запаковані класи (sealed)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#844-програмування-включення-делегування&#34;&gt;8.4.4. Програмування включення/ делегування&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#845-вкладені-визначення-типів&#34;&gt;8.4.5. Вкладені визначення типів&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#85-підтримка-поліморфізму-у-c&#34;&gt;8.5. Підтримка поліморфізму у C#&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#851-реалізація-поліморфізму-у-с&#34;&gt;8.5.1. Реалізація поліморфізму у С#&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#852-ключові-слова-virtual-і-override&#34;&gt;8.5.2. Ключові слова &lt;code&gt;virtual&lt;/code&gt; і &lt;code&gt;override&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#853-поняття-абстрактного-класу&#34;&gt;8.5.3. Поняття абстрактного класу&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#презентація&#34;&gt;Презентація&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8task&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8questions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8sources&#34;&gt;Де почитати?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter81&#34;&gt;8.1. Поняття об&amp;rsquo;єкта та класу. Основні елементи класу&lt;/h2&gt;
&lt;p&gt;Об&amp;rsquo;єктно-орієнтоване програмування і проектування побудоване на класах. Будь-яку програмну систему, побудовану в об&amp;rsquo;єктному стилі, можна розглядати як сукупність класів, можливо, об&amp;rsquo;єднаних в проекти, простори імен, рішення, як це робиться при програмуванні у Visual Studio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Клас&lt;/strong&gt; - це шаблон, який визначає форму об&amp;rsquo;єкту. Він задає як дані, так і код, який оперує цими даними.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Об&amp;rsquo;єкти&lt;/strong&gt; - це екземпляри класу.&lt;/p&gt;
&lt;p&gt;Клас складається із:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; полів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; властивостей;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; методів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; подій;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; конструкторів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; деструкторів;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; делегатів.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Елементи класу називаються членами класу.&lt;/p&gt;
&lt;p&gt;Клас оголошується за допомогою ключового слова &lt;code&gt;class&lt;/code&gt;. Синтаксис має наступний вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.1. Синтаксис оголошення класу.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class ім’я_класу
  {
    //Оголошення полів
    доступ тип імя_змінної;
    доступ тип імя_змінної;
  
    //Оголошення методів
    доступ тип_повернення імя_метода(параметри)
    {
      тіло метода;
    }
  
    доступ тип_повернення імя_метода(параметри)
    {
      тіло метода;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розглянемо приклад базового створення класу &amp;ldquo;Комплексне число&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.2. Оголошення класу &lt;code&gt;ComplexNumber&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  public class ComplexNumber
  {
    //Поля
    private double a;
    private double b;
  
    //Конструктор
    public ComplexNumber(double a, double b)
    {
      this.a = a;
      this.b = b;
    }
  
  //Метод
    public override string ToString()
    {
      return a + &amp;quot; + &amp;quot; + b + &amp;quot;i&amp;quot;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Доступ до полів, методів та інших членів класу може здійснюватися з різним рівнем доступу:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;private&lt;/code&gt; доступний лише всередині класу (типу);&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;protected&lt;/code&gt; доступний лише всередині класу та класів-нащадків;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;internal&lt;/code&gt; доступний лише в межах збірки;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;protected internal&lt;/code&gt; доступний лише в межах збірки, лише всередині класу та класів-нащадків;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;code&gt;public&lt;/code&gt; доступний для усіх.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapter82&#34;&gt;8.2. Будова класу&lt;/h2&gt;
&lt;h3 id=&#34;chapter821&#34;&gt;8.2.1. Поля класу&lt;/h3&gt;
&lt;p&gt;Поля класу синтаксично є звичайними змінними (об&amp;rsquo;єктами) мови. Їх опис задовольняє звичайним правилам оголошення змінних, про що детально говорилося раніше. Змістовно поля задають представлення тій самій абстракції даних, яку реалізує клас.&lt;/p&gt;
&lt;p&gt;Поля характеризують властивості об&amp;rsquo;єктів класу. Коли створюється новий об&amp;rsquo;єкт класу, то цей об&amp;rsquo;єкт є набором полів класу. Два об&amp;rsquo;єкти одного класу мають один і той же набір полів, але різняться значеннями, що зберігаються в цих полях.&lt;/p&gt;
&lt;p&gt;Синтаксис оголошення полів:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  модифікатор_доступу тип назва;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Наприклад, оголосимо клас &lt;code&gt;Worker&lt;/code&gt;, який має 3 поля: розмір з/п, прізвище, вік.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.3. Оголошення полів класу &lt;code&gt;Worker&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class Worker
  {
    public double salary;         //Розмір з/п
    public string firstname;   //Ім&#39;я
    public string lastname;    //Прізвище
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Зараз клас працівник нагадує структуру! І це не дивно, адже клас є більш розвиненою структурую.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter822&#34;&gt;8.2.2. Методи класу&lt;/h3&gt;
&lt;p&gt;Змінні(поля) екземплярів і методи - дві основні складові класів. Поки наш клас &lt;code&gt;Worker&lt;/code&gt; містить лише дані. Хоча такі класи (без методів) допустимі, більшість класів мають методи.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Методи&lt;/strong&gt; - це процедури (підпрограми), які маніпулюють даними, визначеними в класі, і у багатьох випадках забезпечують доступ до цих даних. Зазвичай різні частини програми взаємодіють з класом за допомогою його методів. Будь-який метод містить одну або декілька інструкцій.&lt;/p&gt;
&lt;p&gt;Кожен метод має ім&amp;rsquo;я, і саме це ім&amp;rsquo;я використовується для його виклику. У загальному випадку методу можна привласнити будь-яке ім&amp;rsquo;я. Але пам&amp;rsquo;ятаєте, що ім&amp;rsquo;я &lt;code&gt;Main()&lt;/code&gt; зарезервовано для методу, з якого починається виконання програми. Крім того, як імена методів не можна використовувати ключові слова С#.&lt;/p&gt;
&lt;p&gt;Імена методів супроводжуються парою круглих дужок. Наприклад, якщо метод має ім&amp;rsquo;я &lt;code&gt;GetVal&lt;/code&gt;, то в тексті буде написано &lt;code&gt;GetVal()&lt;/code&gt;. Це допомагає відрізняти імена змінних від імен методів. Формат запису методу такий:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  доступ тип_повернення імя_метода(параметри)
  {
    тіло метода;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.4. Оголошення класу &lt;code&gt;Worker&lt;/code&gt;. Метод.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class Worker
  {
    public double salary;         //Розмір з/п
    public string firstname;   //Ім&#39;я
    public string lastname;    //Прізвище
  
    //Метод, виводить інформацію про працівника на консоль
    public void DisplayInfo()
    {
      Console.WriteLine(&amp;quot;{0} {1}, - {2} грн.&amp;quot;, lastname, firstname, salary);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Зверніть увагу ось на що. Змінні екземпляра &lt;code&gt;salary&lt;/code&gt;, &lt;code&gt;lastname&lt;/code&gt; і &lt;code&gt;firstname&lt;/code&gt; використовуються всередині методу &lt;code&gt;DisplayInfo()&lt;/code&gt; без будь-яких атрибутів, тобто їм не передує ні ім&amp;rsquo;я об&amp;rsquo;єкту, ні оператор &amp;ldquo;крапка&amp;rdquo;. Це дуже важливий момент: якщо метод задіює змінну екземпляра, яка визначена в його класі, він робить це безпосередньо, без явного посилання на об&amp;rsquo;єкт і без оператора &amp;ldquo;крапка&amp;rdquo;. І Це логічно. Адже метод завжди викликається для деякого об&amp;rsquo;єкту конкретного класу. Таким чином, немає необхідності вказувати усередині методу об&amp;rsquo;єкт удруге. Це означає, що значення &lt;code&gt;salalry&lt;/code&gt;, &lt;code&gt;lastname&lt;/code&gt; і &lt;code&gt;firstname&lt;/code&gt; всередині методу &lt;code&gt;DisplayInfo()&lt;/code&gt; неявно вказують на копії цих змінних, що належать об&amp;rsquo;єкту, який викликає метод &lt;code&gt;DisplayInfo()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.5. Інші приклади методів&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  public int GetAge() {...}
  protected string GetByName(string name) {...}
  protected static bool IsEquals(Class obj1, Class obj2) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Повернення значення методом.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;У загальному випадку існує два варіанти умов для повернення з методу. Перший пов&amp;rsquo;язаний з виявленням закриваючої фігурної дужки, що позначає кінець тіла методу (як продемонстровано на прикладі методу &lt;code&gt;DisplayInfo()&lt;/code&gt;). Другий варіант полягає у виконанні інструкції return. Можливі дві форми використання інструкції &lt;code&gt;return&lt;/code&gt;: одна призначена для void-методів (які не повертають значень), а інша - для повернення значень.&lt;/p&gt;
&lt;p&gt;Негайне завершення &lt;code&gt;void&lt;/code&gt;-методу можна організувати за допомогою наступної форми інструкції &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.5. Інші приклади методів&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  public void DisplayInfo()
  {
    if(salary &amp;lt; 0)
      return;
    Console.WriteLine(&amp;quot;{0} {1}, {2}&amp;quot;, lastname, firstname, salary);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Хоча &lt;code&gt;void&lt;/code&gt;-методи - не рідкість, більшість методів все ж повертають значення. І справді, здатність повертати значення - одна з найкорисніших якостей методу. Ми вже розглядали приклад повернення значення під час роботи з масивами. Значення, які повертаються методами, використовуються в програмуванні по різному. У одних випадках повернене значення є результатом обчислень, в інших - воно просто означає, успішно чи ні виконана певна операція, а в третіх - воно може бути кодом-стану. Методи повертають викликаючим їх процедурам, використовуючи наступну форму інструкції &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return значення;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Додамо до нашого класу Працівник ще кілька полів і методів.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.6. Клас &amp;ldquo;Працівник&amp;rdquo;. Методи. Продовження.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class Worker
  {
      public string firstname;   //Ім&#39;я
      public string lastname;    //Прізвище
      public double salary;         //Розмір з/п
      public double bonus;       //Бонус до з/п у % від з/п
  
      //Метод, виводить інформацію про працівника на консоль
      public void DisplayInfo()
      {
          Console.WriteLine(&amp;quot;{0} {1}, - {2} грн.&amp;quot;, lastname, firstname, salary);
      }
      //Повертає суму бонусу, яку отримає працівник.
      public double GetBonusSum()
      {
          return bonus * salary;
      }
      //Повертає повну суму, яку отримає працівник.
      public double GetFullSum()
      {
          return salary + GetBonusSum();
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У цьому прикладі створено поле «бонус» та три додаткових методи, функціональність яких подана у коментарях. Розглянемо приклад програми:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.7. Приклад роботи з класом &amp;ldquo;Працівник&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  static void Main(string[] args)
  {
    Console.OutputEncoding = Encoding.Unicode;
    Worker worker1 = new Worker();
    worker1.salary = 250;
    worker1.firstname = &amp;quot;Петро&amp;quot;;
    worker1.lastname = &amp;quot;Петров&amp;quot;;
    worker1.bonus = 0.12;
    Console.WriteLine(&amp;quot;Розмір бонусу: {0}\nВсього з/п: {1}&amp;quot;,worker1.GetBonusSum(), worker1.GetFullSum());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;або&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  static void Main(string[] args)
  {
    Console.OutputEncoding = Encoding.Unicode;
    Worker worker1 = new Worker();
    worker1.salary = 250;
    worker1.firstname = &amp;quot;Петро&amp;quot;;
    worker1.lastname = &amp;quot;Петров&amp;quot;;
    worker1.bonus = 0.12;
       
    double bonusSum = worker1.GetBonusSum();
    double fullSum = worker1.GetFullSum();
      
    Console.WriteLine(&amp;quot;Розмір бонусу: {0}\nВсього з/п: {1}&amp;quot;,bonusSum,fullSum);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат виконання:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Розмір бонусу: 30
Всього з/п: 280
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Як бачимо, результат виконання для обох програм ідентичний. Функції &lt;code&gt;GetBonusSum()&lt;/code&gt; та &lt;code&gt;GetFullSum()&lt;/code&gt; повертають значення типу &lt;code&gt;double&lt;/code&gt; та передають його у першому випадку одразу для виведення на консоль, у другому записують у проміжні змінні. Аналогічні повернення типів даних можна виконувати для усіх типів даних, як базових так і створених користувачем.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Використання параметрів&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Під час виклику методу можна передати одне або декілька значень. Значення, яке передається методу, називається аргументом. Змінна всередині методу, яка набуває значення аргументу, називається параметром. Параметри оголошуються всередині круглих дужок, які слідують за ім&amp;rsquo;ям методу. Синтаксис оголошення параметрів аналогічний синтаксису, вживаному для змінних.&lt;/p&gt;
&lt;p&gt;Наприклад, ми можемо визначати суму бонусу, передаючи процент бонусу від з/п у функцію і не записуючи бонус як окреме поле, оскільки є багато працівників, які можуть взагалі не отримати бонус.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  public double GetBonusSum(double bonusPercent)
  {
    return bonusPercent*salary;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Тоді виклик буде мати вигляд:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;worker1.GetBonusSum(0.12);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У метод можна передавати безліч аргументів різного типу.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;chapter822&#34;&gt;8.2.3. Конструктори&lt;/h3&gt;
&lt;p&gt;У попередніх прикладах змінні кожного об’єкта встановлювалися &amp;ldquo;вручну&amp;rdquo; за допомогою наступної послідовності інструкцій:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  worker1.salary = 250;
  worker1.firstname = &amp;quot;Петро&amp;quot;;
  worker1.lastname = &amp;quot;Петров&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Професіонал ніколи б не використав подібний підхід. І річ не стільки в тому, що таким чином можна просто &amp;ldquo;забути&amp;rdquo; про одне або декілька полів, скільки в тому, що існує набагато зручніший спосіб це зробити. Цей спосіб - використання конструктора.&lt;/p&gt;
&lt;p&gt;Конструктор ініціалізує об&amp;rsquo;єкт при його створенні. Він має таке ж ім&amp;rsquo;я, що і сам клас, а синтаксично подібний до методу. Проте у визначенні конструкторів не вказується тип значення, що повертається. Формат запису конструктора такий:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  доступ імя_класу() 
  {
    // тіло конструктора
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Зазвичай конструктор використовується, аби додати змінним екземпляра, визначеним у класі, початкові значення або виконати вихідні дії, необхідні для створення повністю сформованого об&amp;rsquo;єкту. Крім того, зазвичай як елемент «доступ» використовується модифікатор доступу public, оскільки конструктори, як правило, викликаються поза їх класом.&lt;/p&gt;
&lt;p&gt;Всі класи мають конструктори незалежно від того, визначите ви їх чи ні, оскільки С# автоматично надає конструктор за замовчуванням, який ініціалізував всі змінні-члени, що мають типи-значення, нулями, а змінні-члени посилального типу - &lt;code&gt;null&lt;/code&gt;-значеннями.&lt;/p&gt;
&lt;p&gt;Отже створимо конструктор для класу Worker:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.8. Приклад роботи з класом &amp;ldquo;Працівник&amp;rdquo;. Конструктор&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class Worker
  {
      public string firstname;   //Ім&#39;я
      public string lastname;    //Прізвище
      public double salary;      //Розмір з/п
      public double bonus;       //Бонус до з/п у % від з/п
  
      //Конструктор класу Worker
      public Worker()
      {
          firstname = &amp;quot;empty&amp;quot;;
          lastname = &amp;quot;empty&amp;quot;;
          salary = 0.0;
          bonus = 0.0;
      }
  
      //Перевантажений конструктор класу Worker
      public Worker(string fname, string lname, double salary, double bonus)
      {
          firstname = fname;
          lastname = lname;
          this.salary = salary;
          this.bonus = bonus;
      }
  
      //Метод, виводить інформацію про працівника на консоль
      public void DisplayInfo()
      {
          Console.WriteLine(&amp;quot;{0} {1}, - {2} грн.&amp;quot;, lastname, firstname, salary);
      }
      //Повертає суму бонусу, яку отримає працівник.
      public double GetBonusSum()
      {
          return bonus * salary;
      }
      //Повертає повну суму, яку отримає працівник.
      public double GetFullSum()
      {
          return salary + GetBonusSum();
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Як бачимо, створено два конструктори! Перший (public Worker()) не приймає значень, другий (public Worker(string fname, string lname, double salary, double bonus)) є параметризованим, тобто приймає значення.
Створення двох методів з однаковими іменами, але різними сигнатурами називається перевантаженням методів. Сигнатурою методу є тип повертаємого значення та перелік параметрів. Аналогічно можна перевантажувати конструктори. Детальніше перевантаження методів ми розглянемо під час вивчення наслідування.
Тепер програма маттиме вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.9. Приклад роботи з класом &amp;ldquo;Працівник&amp;rdquo;. Конструктор. Приклад&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  Worker worker1 = new Worker();
  worker1.DisplayInfo();
  Worker worker2 = new Worker(&amp;quot;Степан&amp;quot;, &amp;quot;Петров&amp;quot;, 25.5, 0.5);
  worker2.DisplayInfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  empty empty, - 0 грн.
  Петров Степан, - 25.5 грн.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;83-інкапсуляція&#34;&gt;8.3. Інкапсуляція&lt;/h2&gt;
&lt;h3 id=&#34;831-реалізація-інкапсуляції-традиційними-методами-доступу-і-зміни-даних&#34;&gt;8.3.1. Реалізація інкапсуляції традиційними методами доступу і зміни даних&lt;/h3&gt;
&lt;p&gt;Інкапсуляція у програмуванні це приховування внутрішньої реалізації та даних класу від зовнішнього доступу. Зазвичай це відбувається закриванням полів за допомогою модифікатора &lt;code&gt;private&lt;/code&gt; та доступом до них через методи.&lt;/p&gt;
&lt;p&gt;Продовжимо розвивати попередні приклади&amp;hellip;&lt;/p&gt;
&lt;p&gt;Якщо ви хочете, аби зовнішній світ міг взаємодіяти із закритим полем даних &lt;code&gt;salary&lt;/code&gt;, потрібно визначити метод доступу (&lt;code&gt;get&lt;/code&gt;) і метод зміни (&lt;code&gt;set&lt;/code&gt;). Наприклад:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.10. Реалізація інкапсуляції у класі &amp;ldquo;Працівник&amp;rdquo;. Методи&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class Worker
  {
      private string firstname;   //Ім&#39;я
      private string lastname;    //Прізвище
      private double salary;      //Розмір з/п
      private double bonus;       //Бонус до з/п у % від з/п
  	  ...
  	  ...
      public double GetSalary()
      {
          return salary;
      }
      
      public void SetSalary(double s)
      {
  	      //здійснити перевірки
          salary = s;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Тепер за допомогою методів &lt;code&gt;GetSalary()&lt;/code&gt; та &lt;code&gt;SetSalary()&lt;/code&gt; ми можемо маніпулювати змінною &lt;code&gt;salary&lt;/code&gt; всередині класу. Назвати ваші методи ви можете і по іншому, адже це просто методи, проте бажано робити їх назви відповідно до функцій. Тоді виклик у коді програми матиме наступний вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.11. Реалізація інкапсуляції у класі &amp;ldquo;Працівник&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  Worker worker2 = new Worker(&amp;quot;Степан&amp;quot;, &amp;quot;Петров&amp;quot;, 25.5,0.5);
  Console.WriteLine(&amp;quot;Salary: {0}&amp;quot;,worker2.GetSalary());
  worker2.SetSalary(150.6);
  Console.WriteLine(&amp;quot;Salary: {0}&amp;quot;, worker2.GetSalary());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Salary: 25.5
  Salary: 150.6
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;832-друга-форма-інкапсуляції---властивості-класу&#34;&gt;8.3.2. Друга форма інкапсуляції - властивості класу&lt;/h3&gt;
&lt;p&gt;На противагу традиційним методам доступу і зміни в &lt;code&gt;.NET&lt;/code&gt;-мовах інкапсуляцію переважно реалізовують за допомогою властивостей, які моделюють відкриті поля даних. Замість того аби заставляти користувача викликати два різні методи для отримання і зміни даних стану, користувач може викликати те, що здається відкритим полем. Для ілюстрації розглянемо властивість &lt;code&gt;Salary&lt;/code&gt;, яка замінить два наші методи &lt;code&gt;GetSalary()&lt;/code&gt; та &lt;code&gt;SetSalary()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Синтаксис оголошення властивості:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  доступ тип_повертаємого_ значення назва
  {
  	get{return змінна(поле);}
  	set{змінна(поле) = value;}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.12. Реалізація інкапсуляції у класі &amp;ldquo;Працівник&amp;rdquo;. Властивості&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;class Worker
{
    private string firstname;   //Ім&#39;я
    private string lastname;    //Прізвище
    private double salary;      //Розмір з/п

	  ...

    public double Salary
    {
        get { return salary; }
        set { salary = value; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;834-властивості-лише-для-читання-і-лише-для-запису&#34;&gt;8.3.4. Властивості лише для читання і лише для запису&lt;/h3&gt;
&lt;p&gt;При створенні класів ви можете налаштувати властивість доступну лише для запису або лише для читання. Щоб це зробити, просто створіть властивість без відповідного блоку &lt;code&gt;set&lt;/code&gt; або &lt;code&gt;get&lt;/code&gt;. 
Наприклад, властивість тільки для читання:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  public double Salary
  {
      get { return salary; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Властивість тільки для запису:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public double Salary
  {
      set { salary = value; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;84-підтримка-наслідування-у-с&#34;&gt;8.4. Підтримка наслідування у С#&lt;/h2&gt;
&lt;h3 id=&#34;841-наслідування&#34;&gt;8.4.1. Наслідування&lt;/h3&gt;
&lt;p&gt;Тепер, коли ми познайомилися з різними способами створення інкапсульованого класу, настав час звернути свою увагу на створення сімейства зв&amp;rsquo;язаних класів.&lt;/p&gt;
&lt;p&gt;Як вже наголошувалося, наслідування - це той аспект ООП, який сприяє багатократному використанню коду. 
Наслідування — метод утворення нових класів на основі використання вже існуючих. Наслідування буває двох типів: класичне наслідування (відношення «є») і наслідування відповідно до моделі включения/делегування (відношення «має»).&lt;/p&gt;
&lt;p&gt;Давайте почнемо з дослідження класичної моделі «є».&lt;/p&gt;
&lt;p&gt;При створенні між класами відношення «є» ви створюєте залежність між типами. Основна ідея класичного наслідування полягає у тому, що нові класи можуть використовувати (і можливо розширювати) функціональність інших класів. Для ілюстрації припустимо, що ви хочете задіювати функціональність класу Worker для створення двох нових класів: &lt;code&gt;SalesPerson&lt;/code&gt; (торгівельний агент) і &lt;code&gt;Manager&lt;/code&gt; (менеджер). В цьому випадку ієрархія класів виглядатиме так, як показано на малюнку нижче.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    Worker &lt;|-- Manager
    Worker &lt;|-- SalesManager
&lt;/div&gt;
&lt;center&gt;&lt;small&gt;Рис. 1. Ієрархія класів Worker, Manager, SalesManager&lt;/small&gt;&lt;/center&gt;
&lt;p&gt;Як показано на рис. 1, торгівельний агент «є» співробітником (так само як і менеджер). У класичній моделі наслідування базові класи (такі як &lt;code&gt;Worker&lt;/code&gt;) використовуються для визначення загальних характеристик всіх наслідників. Підкласи (такі як &lt;code&gt;SalesPerson&lt;/code&gt; і &lt;code&gt;Manager&lt;/code&gt;) розширюють цю загальну функціональність, додаючи більш специфічну поведінку.&lt;/p&gt;
&lt;p&gt;Для нашого прикладу припустимо, що клас Manager розширює клас &lt;code&gt;Worker&lt;/code&gt;, додаючи запис про кількість акцій, якими володіє співробітник, а клас &lt;code&gt;SalesPerson&lt;/code&gt; містить обсяги продажів, здійснені цим агентом. У С# розширення класу виконується за допомогою оператора &lt;code&gt;:&lt;/code&gt; (двокрапка) у визначенні класу.&lt;/p&gt;
&lt;p&gt;Тоді похідний клас «Торговий агент» матиме наступний вигляд:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.13. Реалізація класу &amp;ldquo;SalesManager&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class SalesPerson : Worker
  {
      private double salesQuantity;
      public double SalesQuantity
      {
          get { return salesQuantity; }
          set { salesQuantity = value; }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проте, як видно з прикладу, немає конструткора, який би передавав інформацію про агента для класу. Тому розширимо клас і додамо конструтор:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.14. Реалізація класу &amp;ldquo;SalesManager&amp;rdquo;. Властивість SalesQuantity&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  class SalesPerson : Worker
  {
      private double salesQuantity;
      public SalesPerson(string fname, string lname, double salary, double bonus, double sQuantity)
          : base(fname, lname, salary, bonus)
      {
          salesQuantity = sQuantity;
      }
      public double SalesQuantity
      {
          get { return salesQuantity; }
          set { salesQuantity = value; }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Розберемо код:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Наслідування здіснюється за домогою оператора &lt;code&gt;:&lt;/code&gt; (двокрапка)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Наслідуватися можна одночасно лише від одного класу та багатьох інтерфейсів.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ми не створюємо полів &lt;code&gt;firstname&lt;/code&gt;, &lt;code&gt;lastname&lt;/code&gt;, &lt;code&gt;salary&lt;/code&gt; і так далі, всі вони неявно наслідуються від базового класу Worker;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;У конструктор ми передаємо всю ту ж саму інформацію яку передавали для конструктора &lt;code&gt;Worker&lt;/code&gt; + наше нове поле &lt;code&gt;salesQuantity&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;За допомогою ключовго слова base викликаємо конструктор базовго класу і передаємо йому параметри.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Використовуємо властивість для доступу до інформації про обсяги продаж.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Реалізуємо у класі Worker властивості для усіх полів і визначимо метод, який дозволить виводити усю інформацію про працівника на екран:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.15. Реалізація класу &amp;ldquo;Worker&amp;rdquo;. Властивості&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  public double Salary
  {
      get { return salary; }
      set { salary = value; }
  }
  public string FirstName
  {
      get { return firstname; }
      set { firstname = value; }
  }
  public string LastName
  {
      get { return lastname; }
      set { lastname = value; }
  }
  
  public double Bonus
  {
      get { return bonus; }
      set
      {
          if (bonus &amp;gt;= 0 &amp;amp;&amp;amp; bonus &amp;lt; 1)
              bonus = value;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Тепер напишемо наступну програму:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.15. Приклад роботи з класом &lt;code&gt;SalesPerson&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  
  SalesPerson sPerson = new SalesPerson(&amp;quot;Петро&amp;quot;, &amp;quot;Петренко&amp;quot;, 125, 0.21, 154);
  sPerson.FirstName = &amp;quot;Остап&amp;quot;;
  sPerson.DisplayInfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Петренко Остап - 125 грн.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У нашому класі &lt;code&gt;SalesPerson&lt;/code&gt; немає явно реалізованого методу &lt;code&gt;DisplayInfo()&lt;/code&gt; або властивості &lt;code&gt;FirstName&lt;/code&gt;, проте ми їх можеми викликати! Тобто ми їх успадкували від батьківського класу &lt;code&gt;Worker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Майте на увазі, що при наслідуванні інкапсуляція зберігається. Тому похідний клас не може безпосередньо звертатися до закритих членів, визначених в його базовому класі. Тобто не можна наприклад у конструкторі класу &lt;code&gt;SalesPerson&lt;/code&gt; записати:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.16. Приклад роботи з класом &lt;code&gt;SalesPerson&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;public SalesPerson(string fname, string lname, double salary, double bonus, double sQuantity) 
            : base(fname,lname,salary,bonus)
{
		//Не можна присвоїти значення.
    firstname = fname; //Помилка
    salesQuantity = sQuantity; //Помилка
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Нагадаємо, що усі поля класі Worker приватні (&lt;code&gt;private&lt;/code&gt;), тобто закриті від «зовнішнього світу».&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;842-ключове-слово-protected&#34;&gt;8.4.2. Ключове слово &lt;code&gt;protected&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Як ви вже знаєте, відкриті елементи безпосередньо доступні звідки завгодно, тоді як до закритих елементів не можна дістати доступ з якого-небудь об&amp;rsquo;єкту, окрім класу, що визначив їх. С# наслідує приклад багатьох інших сучасних об&amp;rsquo;єктно-орієнтованих мов і надає додатковий рівень доступу - захищений (&lt;code&gt;protected&lt;/code&gt;) доступ.&lt;/p&gt;
&lt;p&gt;Коли базовий клас визначає захищені дані або члени, він створює множину елементів, які можуть бути безпосередньо доступні будь-якому насліднику. Якщо ви хочете дозволити класам &lt;code&gt;SalesPerson&lt;/code&gt; і Manager безпосередньо звертатися до даних, визначених в класі &lt;code&gt;Worker&lt;/code&gt;, початкове визначення класу Worker можна змінити таким чином:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.17. Оголошення класу &lt;code&gt;Worker&lt;/code&gt;. Поля&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;class Worker
{
  protected string firstname;   //Ім&#39;я
  protected string lastname;    //Прізвище
  protected double salary;      //Розмір з/п
  protected double bonus;       //Бонус до з/п у % від з/п
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Після цього конструкція &lt;code&gt;firstname = fname&lt;/code&gt;; стане доступною і програма відкомпілюється.&lt;/p&gt;
&lt;p&gt;Перевага визначення захищених членів в базовому класі полягає в тому, що похідним класам більше не доведеться діставати доступ до даних за допомогою відкритих методів або властивостей. Вочевидь, є і негатив: коли похідний клас має безпосередній доступ до внутрішніх даних його батьківського класу, існує можливість неумисного обходу бізнес-правил, визначених у відкритих властивостях. При визначенні захищених членів ви створюєте певний рівень довіри між батьківським і дочірнім класом, оскільки компілятор не намагатиметься виявляти які-небудь порушення бізнес-правил. І нарешті, знайте, що з точки зору користувача об&amp;rsquo;єкту захищені дані вважаються закритими (оскільки користувач знаходиться «поза родинним колом»).&lt;/p&gt;
&lt;p&gt;Тому наступний код недопустимий:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{csharp}&#34;&gt;SalesPerson sPerson = new SalesPerson(&amp;quot;Петро&amp;quot;, &amp;quot;Петров&amp;quot;,125, 0.21, 154);
sPerson.firstname = &amp;quot;Іван&amp;quot;; // Помилка
sPerson.DisplayInfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;843-запобігання-наслідування---запаковані-класи-sealed&#34;&gt;8.4.3. Запобігання наслідування - запаковані класи (sealed)&lt;/h3&gt;
&lt;p&gt;При створенні відношень базовий клас/підклас можна використовувати поведінку існуючих типів. Проте що якщо ви хочете визначити клас, від якого не можна створювати похідні класи? Наприклад, припустимо, що ви додали ще один клас в простір імен, який розширює існуючий тип &lt;code&gt;SalesPerson&lt;/code&gt;. На рис. 2. показана зміна ієрархії.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    Worker &lt;|-- Manager
    Worker &lt;|-- SalesManager
    SalesManager &lt;|-- PSalesPerson
&lt;/div&gt;
&lt;center&gt;&lt;small&gt;Рис. 2. Ієрархія класів Worker, Manager, SalesManager, PSalesPerson&lt;/small&gt;&lt;/center&gt;
&lt;p&gt;Класом, що представляє торгівельного агента, що працює за сумісництвом, є PSalesPerson. Припустимо, що нам потрібно гарантувати, що ніхто не зможе створити підклас від &lt;code&gt;PSalesPerson&lt;/code&gt;. Аби цей клас не можна було розширювати, в С# використовується ключове слово &lt;code&gt;sealed&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  sealed class PSalesPerson: SalesPerson
  {
      //Поля
      //Властивості
      //Методи
      public PSalesPerson(string fname, string lname, double salary, double bonus, double sQuantity) 
            : base(fname, lname, salary, bonus, sQuantity)
      {
		    //Інструкції конструктора
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оскільки клас &lt;code&gt;PSalesPerson&lt;/code&gt; запечатано, він не може служити базовим класом для інших типів. Отже якщо спробувати розширити &lt;code&gt;PSalesPerson&lt;/code&gt;, ви отримаєте помилку компіляції:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class PPSalesPerson: PSalesPerson {}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;844-програмування-включення-делегування&#34;&gt;8.4.4. Програмування включення/ делегування&lt;/h3&gt;
&lt;p&gt;Як наголошувалося раніше, наслідування буває двох видів. Тільки що ми розглянули класичне відношення «є». Аби завершити дослідження цього другого стовпа ООП, давайте дослідимо відношення «має» (відоме так само, як модель включення/делегування). Припустимо, що ми створили новий клас, що моделює соціальний пакет співробітника:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class SocialPackage
  {
      //Сума виплати
      private double socialSum;

      public double SocialSum
      {
          get { return socialSum; }
          set { socialSum = value; }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Вочевидь, було б досить дивним встановлювати відношення «є» між соціальним пакетом (класом &lt;code&gt;SocialPackage&lt;/code&gt;) і посадами співробітників. (Менеджер «є» соціальним пакетом? Сумнівно).) Проте повинно бути зрозуміло, що деякий тип відношення між цими двома класами може бути встановлений. Якщо не вдаватися до деталей, можна сказати, що кожен співробітник «має» (&lt;code&gt;has-а&lt;/code&gt;) соціальний пакет. Для цього можна додати до полів класу &lt;code&gt;Worker&lt;/code&gt; поле &lt;code&gt;SocialPackage&lt;/code&gt; таким чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  protected SocialPackage socPackage;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Таким чином, ми успішно включили в клас інший об&amp;rsquo;єкт. Проте для надання функціональності об&amp;rsquo;єкту, що включається, зовнішньому світу необхідний делегування. &lt;strong&gt;Делегування&lt;/strong&gt; - це просто додавання у клас членів, які використовують функціональність об&amp;rsquo;єкту, що включається. Найпростіший варіант – реалізація властивостей для включеного поля або методів &lt;code&gt;Get&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;845-вкладені-визначення-типів&#34;&gt;8.4.5. Вкладені визначення типів&lt;/h3&gt;
&lt;p&gt;Перш ніж досліджувати останній стовп ООП (поліморфізм), давайте познайомимося з технікою програмування під назвою вкладені типи. У С# можна визначити тип (перерахування, клас, інтерфейс, структуру або делегат) безпосередньо в області класу або структури. В цьому випадку вкладений (або «внутрішній») тип вважається членом класу, в який він вкладений (тобто «зовнішнього класу»), і з точки зору механізму часу виконання ним можна маніпулювати так само, як будь-яким іншим членом (полем, властивістю, методом, подією і т. д.). Синтаксис, що використовується для створення вкладених типів, досить простий. Розглянемо клас &lt;code&gt;SocialPackage&lt;/code&gt; як вкладений.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Worker
  {
      protected string firstname;   //Ім&#39;я
      protected string lastname;    //Прізвище
      protected double salary;      //Розмір з/п
      protected double bonus;       //Бонус до з/п у % від з/п
      
      public class SocialPackage
      {
          //Сума виплати
          private double socialSum;

          public double SocialSum
          {
            get { return socialSum; }
            set { socialSum = value; }
          }
      }
	    ...
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Хоча цей синтаксис досить наочний, не завжди зрозуміло, навіщо потрібно так робити. Далі представлені аргументи, покликані допомогти в цьому розібратися:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Модель вкладених типів схожа на відношення «має» за винятком того, що у вас є повний контроль над рівнем доступу не до об&amp;rsquo;єкту, що включається, а до внутрішнього типу.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Оскільки вкладений тип - це член включеного класу, він може звертатися до закритих членів цього класу.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Частенько вкладений тип корисний лише як допоміжний для класу і не призначений для використання зовнішнім світом.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Коли тип містить інший тип-клас, він може створювати змінні-члени цього типу так само, як і інші елементи даних. Проте, якщо ви хочете використовувати вкладений тип ззовні включаючого типу, тип необхідно кваліфікувати вкладеним типом.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;85-підтримка-поліморфізму-у-c&#34;&gt;8.5. Підтримка поліморфізму у C#&lt;/h2&gt;
&lt;h3 id=&#34;851-реалізація-поліморфізму-у-с&#34;&gt;8.5.1. Реалізація поліморфізму у С#&lt;/h3&gt;
&lt;p&gt;Тепер давайте дослідимо завершальний стовп ООП - &lt;strong&gt;поліморфізм&lt;/strong&gt;.
Реалізуємо у класі &lt;code&gt;Worker&lt;/code&gt; метод &lt;code&gt;GiveBonus()&lt;/code&gt; таким чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public void GiveBonus(float bon)
  {
    salary += bon;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Оскільки цей метод був визначений як відкритий, ми можемо надавати бонуси як торгівельним агентам, так і менеджерам (а також торгівельним агентам, що працюють за сумісництвом):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  SalesPerson sPerson = new SalesPerson(&amp;quot;Петро&amp;quot;, &amp;quot;Петров&amp;quot;,125, 0.21, 154);
  Console.WriteLine(&amp;quot;З/п: {0}&amp;quot;, sPerson.Salary);
  Console.WriteLine(&amp;quot;Додамо бонус - 12.5!&amp;quot;);
  sPerson.GiveBonus(12.5f);
  Console.WriteLine(&amp;quot;З/п: {0}&amp;quot;, sPerson.Salary);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Результат:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  З/п: 125
  Додамо бонус: 12.5!
  З/п: 137.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Проблема поточного дизайну полягає в тому, що успадкований метод &lt;code&gt;GiveBonus()&lt;/code&gt; працює ідентично для всіх підкласів. У ідеалі в бонусі торгівельного представника або торгівельного представника за сумісництвом повинен враховуватися об&amp;rsquo;єм продажів. Можливо, менеджери повинні отримувати додаткові акції на додаток до збільшення зарплати.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;852-ключові-слова-virtual-і-override&#34;&gt;8.5.2. Ключові слова &lt;code&gt;virtual&lt;/code&gt; і &lt;code&gt;override&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Поліморфізм надає підкласам можливість зміни реалізації методів, визначених у їх базовому класі. Для зміни поточного дизайну необхідно розуміти значення ключових слів &lt;code&gt;virtual&lt;/code&gt; та &lt;code&gt;override&lt;/code&gt; мови С#. Якщо у базовому класі визначається метод, який може бути перекритий підкласом, цей метод має бути віртуальним:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Worker
  {
    ...
    public virtual void GiveBonus(float bon)
    {
      salary += bon;
    }
  	...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Коли підкласу потрібно перевизначити віртуальний метод, це робиться за допомогою ключового слова &lt;code&gt;override&lt;/code&gt;. Наприклад, типи &lt;code&gt;SalesPerson&lt;/code&gt; і &lt;code&gt;Manager&lt;/code&gt; можуть перекрити метод &lt;code&gt;GiveBonus()&lt;/code&gt; таким чином:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class SalesPerson : Worker
  {
	  ...
    public override void GiveBonus(float bon)
    {
      if (salesQuantity &amp;gt; 100)
          bon += bon * 0.1f;
      salary += bon;
    }
	  ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Зверніть увагу, як кожен перекритий метод може використовувати поведінку за замовчуванням за допомогою ключового слова base. Toбто вам не потрібно повністю повторно реалізовувати логіку методу &lt;code&gt;GiveBonus()&lt;/code&gt;, ви можете багато разів задіювати (і, можливо, розширювати) поведінку за замовчуванням батьківського класу.&lt;/p&gt;
&lt;p&gt;Наприклад:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public override void GiveBonus(float bon)
  {
    if (salesQuantity &amp;gt; 100)
        bon += bon * 0.1f;
    base.GiveBonus(bon);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;853-поняття-абстрактного-класу&#34;&gt;8.5.3. Поняття абстрактного класу&lt;/h3&gt;
&lt;p&gt;В даний момент базовий клас Worker надає захищені змінні-члени своїм наслідникам, а також підтримує віртуальний метод (&lt;code&gt;GiveBonus()&lt;/code&gt;), який може бути перекритий наслідниками.&lt;/p&gt;
&lt;p&gt;Хоча це все і чудово, в поточному дизайні є дивний побічний ефект, що полягає в тому, що ви можете безпосередньо створити екземпляри базового класу &lt;code&gt;Worker&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Що ж це на справді означає?
Worker worker = new Worker();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;У даному прикладі єдине дійсне призначення базового класу Worker полягає у визначенні загальних полів і членів для всіх підкласів. Зрозуміло, що немає сенсу створювати безпосередній екземпляр цього класу, оскільки тип Worker сам по собі дуже узагальнений. Наприклад, якби я підійшов до вас і сказав: «Я співробітник!», ваше перше питання було б: «Ну і що ти за співробітник?» (консультант, тренер, помічник адміністратора, редактор, співробітник Білого дому і т. д.).&lt;/p&gt;
&lt;p&gt;Враховуючи, що багато базових класів є досить туманними сутностями, набагато краще в нашому прикладі було б запобігти можливості безпосереднього створення об&amp;rsquo;єктів класу Worker в коді. У С# це можна зробити програмно, використовуючи ключове слово &lt;code&gt;abstract&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  abstract class Worker
  {
  	// Поля
  	// Методи
  	// Властивості
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Таким чином створити обєкт класу не вдасться.&lt;/p&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-file-powerpoint fa-2x text-danger  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;презентація&#34;&gt;Презентація&lt;/h2&gt;
&lt;br&gt;
&lt;iframe src=&#34;https://onedrive.live.com/embed?cid=0A1340BA71B3F0AA&amp;amp;resid=A1340BA71B3F0AA%213939&amp;amp;authkey=ALTJQw7LlW8LZMk&amp;amp;em=2&amp;amp;wdAr=1.7777777777777777&#34; width=&#34;100%&#34; height=&#34;400px&#34; frameborder=&#34;0&#34;&gt;Це вбудований документ &lt;a target=&#34;_blank&#34; href=&#34;https://office.com&#34;&gt;Microsoft Office&lt;/a&gt; на платформі &lt;a target=&#34;_blank&#34; href=&#34;https://office.com/webapps&#34;&gt;Office&lt;/a&gt;.&lt;/iframe&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8task&#34;&gt;Задачі&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle text-warning fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8questions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;far fa-bookmark text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8sources&#34;&gt;Де почитати?&lt;/h2&gt;
&lt;p&gt;Книги:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Назва книги&lt;/p&gt;
&lt;p&gt;Сторінки: 1254-1284.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Блоги, статті:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fas fa-link text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt; (RU)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Відео-контент:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fab fa-youtube text-danger  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fab fa-microsoft text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Лекція X. Додаткові матеріали</title>
      <link>/courses/csharp-basics/lecturex/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecturex/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterX1&#34;&gt;X.1. Основи роботи з математичними функціями у C# (&lt;code&gt;System.Math&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterX2&#34;&gt;X.2. Генерація випадкових чисел у C# (&lt;code&gt;Random&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterXtask&#34;&gt;Задачі&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterXquestions&#34;&gt;Контрольні запитання&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterXsources&#34;&gt;Де почитати?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterX1&#34;&gt;X.1. Основи роботи з математичними функціями у C# (&lt;code&gt;System.Math&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг 8.1. Синтаксис оголошення класу.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class ім’я_класу
  {
    //Оголошення полів
    доступ тип імя_змінної;
    доступ тип імя_змінної;
  
    //Оголошення методів
    доступ тип_повернення імя_метода(параметри)
    {
      тіло метода;
    }
  
    доступ тип_повернення імя_метода(параметри)
    {
      тіло метода;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterX2&#34;&gt;X.2. Генерація випадкових чисел у C# (&lt;code&gt;Random&lt;/code&gt;)&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-list-alt fa-2x text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapterXtask&#34;&gt;Задачі&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-question-circle text-warning fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapterXquestions&#34;&gt;Контрольні запитання&lt;/h2&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;far fa-bookmark text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapterXsources&#34;&gt;Де почитати?&lt;/h2&gt;
&lt;p&gt;Книги:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Назва книги&lt;/p&gt;
&lt;p&gt;Сторінки: 1254-1284.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Блоги, статті:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/intro-to-csharp/object-oriented-programming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fas fa-link text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Microsoft. Documentation. Object-Oriented programming (C#)&lt;/a&gt; (EN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fas fa-link text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt; (RU)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Відео-контент:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fab fa-youtube text-danger  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://metanit.com/sharp/tutorial/3.29.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
  &lt;i class=&#34;fab fa-microsoft text-primary  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Metanit. Объектно-ориентированное программирование. Практика&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Розв&#39;язки до задач</title>
      <link>/courses/csharp-basics/lecturey/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/courses/csharp-basics/lecturey/</guid>
      <description>&lt;hr&gt;
&lt;span style=&#34;float:right; opacity:0.3&#34;&gt;

  &lt;i class=&#34;fas fa-atlas fa-3x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterY4&#34;&gt;Тема 4. Типи даних та змінні&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterY5&#34;&gt;Тема 5. Розгалуження та цикли&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterY6&#34;&gt;Тема 6. Масиви&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterY7&#34;&gt;Тема 7. Перелічувані типи та структури&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapterY8&#34;&gt;Тема 8. Об&amp;rsquo;єктно-орієнтовне програмування&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8sources&#34;&gt;Список використаних джерел&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterY4&#34;&gt;Тема 4. Типи даних та змінні&lt;/h2&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.4.1. Рішення до &lt;a href=&#34;../lecture4/#chapter4task1&#34;&gt;задачі 4.1&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  //Для виведення тексту українською мовою
  Console.OutputEncoding = Encoding.Unicode;
  Console.WriteLine(&amp;quot;\&amp;quot;Саме знання нікому їсти не дасть.\&amp;quot;\n\t\t\t\\І.Я.Франко\\&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterY5&#34;&gt;Тема 5. Розгалуження та цикли&lt;/h2&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.1. Рішення до &lt;a href=&#34;../lecture5/#chapter5task1&#34;&gt;задачі 5.1&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть нижню межу:&amp;quot;);
  int low = int.Parse(Console.ReadLine());
  Console.Write(&amp;quot;Введіть верхню межу:&amp;quot;);
  int high = int.Parse(Console.ReadLine());
  
  int mult = 1;
  for (int i = low; i &amp;lt;= high; i++)
  {
    mult *= i;
  }
  
  Console.WriteLine($&amp;quot;Mult: {mult}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Також код алгоритму можна скоротити наступним чином:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  int mult = 1;
  for (; low &amp;lt;= high; mult *= low++) ;
  Console.WriteLine($&amp;quot;Mult: {mult}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.3. Рішення до &lt;a href=&#34;../lecture5/#chapter5task3&#34;&gt;задачі 5.3&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.WriteLine($&amp;quot;x\ty&amp;quot;);
  for (int x = 10; x &amp;lt;= 100; x++)
  {
    if (x % 7 == 0)
    {
      double y = Math.Pow(x + 5, 3) / Math.Sqrt(x + 1);
      Console.WriteLine($&amp;quot;{x}\t{y:f2}&amp;quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.4. Рішення до &lt;a href=&#34;../lecture5/#chapter5task4&#34;&gt;задачі 5.4&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.WriteLine(&amp;quot;x\ty&amp;quot;);
  for(int x = 100; x &amp;lt;= 200; x+=10)
  {
      double y = Math.Pow(Math.Cos(Math.Pow(x, 2)), 3) / Math.Sqrt(x - Math.Log(x));
      Console.WriteLine(&amp;quot;{0}\t{1:f4}&amp;quot;, x, y &amp;gt; 0 ? &amp;quot; &amp;quot; + Math.Round(y, 4): y);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.5. Рішення до &lt;a href=&#34;../lecture5/#chapter5task3&#34;&gt;задачі 5.5&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.Write(&amp;quot;Enter number:\t&amp;quot;);
  int num = int.Parse(Console.ReadLine());
  for (int i = 1; i &amp;lt; 10; i++)
    Console.WriteLine($&amp;quot;{num} x {i} = {num*i}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.10. Рішення до &lt;a href=&#34;../lecture5/#chapter5task10&#34;&gt;задачі 5.10&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  for (int i = 90; i &amp;gt;= 5; i--)
    if(i % 3 == 0 &amp;amp;&amp;amp; i % 5 != 0 &amp;amp;&amp;amp; i % 2 == 1)
      Console.WriteLine(i);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.11. Рішення до &lt;a href=&#34;../lecture5/#chapter5task11&#34;&gt;задачі 5.11&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  while (true)
  {
      Console.OutputEncoding = Encoding.Unicode;
      Console.Write(&amp;quot;\n--- МЕНЮ ---\n[+] - Додати\n[-] - Відняти\n[*] - Множити\n&amp;quot; +
          &amp;quot;[/] - Ділити\n[0] - Вийти з програми\n\nВаш вибір :&amp;gt;\t&amp;quot;);
  
      string choise = Console.ReadLine();
  
      Console.Write(&amp;quot;\nВведіть число 1:\t&amp;quot;);
      double num1 = double.Parse(Console.ReadLine());
      Console.Write(&amp;quot;Введіть число 2:\t&amp;quot;);
      double num2 = double.Parse(Console.ReadLine());
  
      switch (choise)
      {
          case &amp;quot;+&amp;quot;:
              double sum = num1 + num2;
              Console.WriteLine($&amp;quot;\nРезультат: {sum}&amp;quot;);
              break;
          default:
              Console.WriteLine(&amp;quot;Помилка! Введіть операцію або 0.&amp;quot;);
              break;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.14. Рішення до &lt;a href=&#34;../lecture5/#chapter5task14&#34;&gt;задачі 5.14&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Фігура 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть кількість рядків: \t&amp;quot;);
  int rows = int.Parse(Console.ReadLine());
  
  Console.Write(&amp;quot;Введіть кількість стовпців: \t&amp;quot;);
  int cols = int.Parse(Console.ReadLine());
  
  for (int i = 0; i &amp;lt; rows; i++)
  {
      for (int j = 0; j &amp;lt; cols; j++)
      {
          Console.Write(&amp;quot;*&amp;quot;);
      }
      Console.WriteLine();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Фігура 2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть кількість рядків: \t&amp;quot;);
  int rows = int.Parse(Console.ReadLine());
  
  Console.Write(&amp;quot;Введіть кількість стовпців: \t&amp;quot;);
  int cols = int.Parse(Console.ReadLine());
  
  for (int i = 0; i &amp;lt; rows; i++)
  {
      for (int j = 0; j &amp;lt; cols; j++)
      {
          if (i == 0 || i == rows - 1 || j == 0 || j == cols - 1)
              Console.Write(&amp;quot;*&amp;quot;);
          else
              Console.Write(&amp;quot; &amp;quot;);
      }
      Console.WriteLine();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Фігура 3&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  Console.Write(&amp;quot;Введіть кількість: \t&amp;quot;);
  int count = int.Parse(Console.ReadLine());
  
  for (int i = count; i &amp;gt; 0; i--)
  {
      for (int j = 0; j &amp;lt; i; j++)
      {
          Console.Write(&amp;quot;*&amp;quot;);
      }
      Console.WriteLine();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-code text-success  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Лістинг Y.5.16. Рішення до &lt;a href=&#34;../lecture5/#chapter5task16&#34;&gt;задачі 5.16&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  Console.OutputEncoding = Encoding.Unicode;
  
  Random r = new Random();
  int number = r.Next(1, 10000);
  Console.WriteLine(&amp;quot;Привіт! Я загадав число у діапазоні [1; 10000).&amp;quot;);
  
  // ставимо @ перед параметром, оскільки try є ключовим словом у C#
  int @try = 0;
  
  while (true)
  {
      ++@try;
      Console.Write(&amp;quot;\nЯке число я загадав?\t&amp;gt;&amp;quot;);
      int userNumber = int.Parse(Console.ReadLine());
  
      if (userNumber &amp;gt; number)
      {
          Console.WriteLine(&amp;quot;PC &amp;gt; Неправильно. Моє число є меншим.&amp;quot;);
          continue;
      }
  
      if (userNumber &amp;lt; number)
      {
          Console.WriteLine(&amp;quot;PC &amp;gt; Неправильно. Моє число є більшим.&amp;quot;);
          continue;
      }
  
      if (userNumber == number)
      {
          Console.WriteLine(&amp;quot;PC &amp;gt; Вітаю! Ти вгадав за {0} спроб&amp;quot;, @try);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterY6&#34;&gt;Тема 6. Масиви&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterY7&#34;&gt;Тема 7. Перелічувані типи та структури&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chapterY8&#34;&gt;Тема 8. Об&amp;rsquo;єктно-орієнтовне програмування&lt;/h2&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-book text-primary fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8sources&#34;&gt;Список використаних джерел&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Albahari, J., &amp;amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;Cardelli, L., &amp;amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з &lt;a href=&#34;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&#34;&gt;http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.&lt;/li&gt;
&lt;li&gt;MSDN. (без дати). Отримано з Microsoft Developer Network: &lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;http://msdn.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.&lt;/li&gt;
&lt;li&gt;Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО &amp;ldquo;И.Д. Вильямс&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;span style=&#34;float:right&#34;&gt;

  &lt;i class=&#34;fas fa-download fa-2x  pr-1 fa-fw&#34;&gt;&lt;/i&gt;
&lt;/span&gt;
&lt;h2 id=&#34;chapter8additional&#34;&gt;Додаткові матеріали для завантаження&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі DOCX &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-word  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Лекція у форматі PDF &lt;a href=&#34;&#34;&gt;
  &lt;i class=&#34;fas fa-file-pdf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Завантажити&lt;/a&gt;&lt;/del&gt; (у розробці)&lt;/li&gt;
&lt;li&gt;Діаграми до лекції у форматі &lt;code&gt;
  &lt;i class=&#34;fas fa-project-diagram  pr-1 fa-fw&#34;&gt;&lt;/i&gt;draw.io&lt;/code&gt; на &lt;code&gt;
  &lt;i class=&#34;fab fa-github  pr-1 fa-fw&#34;&gt;&lt;/i&gt;github&lt;/code&gt; &lt;a href=&#34;https://github.com/kleban/csharp-basics-public/tree/master/diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Перейти&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту.
Дякую.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
