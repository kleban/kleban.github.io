[{"authors":null,"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n  Download my resumé.\n","date":1618617600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Yurii Kleban","type":"authors"},{"authors":null,"categories":null,"content":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"da99cb196019cc5857b9b3e950397ca9","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"吳恩達","type":"authors"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  Передмова Вимоги до програмного забезпечення План курсу  Тема 1. Вступ до основ програмування на платформі .NET Тема 2. Основи алгоритмізації Тема 3. Основи роботи з Visual Studio та платформою .NET (у процесі наповення) Тема 4. Типи даних та змінні у .NET Тема 5. Оператори розгалуження та цикли Тема 6. Основи роботи з масивами у C# Тема 7. Перелічувані типи та структури у C# (у процесі наповення) Тема 8. Вступ до обєктно-орієнтовного програмування       \r\rПередмова Матеріли створені з метою компактного та зрозумілого викладення матеріалу з основ програмування на мові C#. Завдання та приклади орієнтовані на студентів, що мають середній рівень математичної підготовки і вміють розв\u0026rsquo;язувати задачі з алгебри, геометрії, логіки, а також курсів, що повязані із основами математичного моделювання (статистика, економетрика, економічна кібернетика, дослідження операцій тощо).\nВикладений матеріал не претендує на повноту у описі можливостей мови програмування C#, проте, на думку автора, може стати базою для написання нескладних програм або фундаментом для подальшого поглиблення знань та умінь.\nЗауваження, побажання та відгуки прошу надсилати на елетронну адресу yurakleban@gmail.com. Також додаткові матеріали та приклади програм, що використовуються у посібнику можна завантажити на сайті автора: http://kleban.page.\n \r\rВимоги до програмного забезпечення Під час курсу використовується операційна система Windows7/8/10.\nУ якості середовища розробки (IDE) може бути використано Visual Studio Community Edition (Microsoft) або Rider (JetBrains).\n \r\rПлан курсу Тема 1. Вступ до основ програмування на платформі .NET 1.1.\tЗагальні категорії та поняття програмування\r1.2.\tКоротка історія програмування та виникнення мови C#\r\r1.2.1.\tПарадигми програмування\r1.2.2. Процедурне програмування\r1.2.3. Об’єктне (модульне) програмування\r1.2.4. Об’єктно-орієнтовне програмування\r\r\r1.3\tЕволюція мови програмування C#\r\r1.3.1\tСтворення ООП та C++\r1.3.2\tInternet та поява мови Java\r1.3.3.\tВиникнення C#\r\r\r1.4\t.NET Framework: поняття та структура\rКонтрольні запитання\rСписок використаних джерел\r\r\rТема 2. Основи алгоритмізації 2.1.\tПоняття та характеристики алгоритмів\r2.2. Побудова алгоритмів з використанням блок-схем \r2.3.\tСтвоерення блок-схем з використанням Diagramm Designer \r2.4.\tСтвоерення блок-схем з використанням draw.io \rКонтрольні запитання \rСписок використаних джерел \rДодаткові матеріали для завнатаження \r\r Тема 3. Основи роботи з Visual Studio та платформою .NET (у процесі наповення)  Тема 4. Типи даних та змінні у .NET 4.1. Поняття типу даних. Система типів .NET.\r4.2. Оголошення та ініціалізація змінних. Константи\r4.3. Оператори та вирази\r\r4.3.1. Арифметичні оператори\r4.3.2. Інкремент і декремент\r4.3.3. Логічні оператори. Оператори відношення\r4.3.4. Інші оператори\r\r\r4.4. Літерали\r\r4.4.1. Арифметичні літерали\r4.4.2. Логічні літерали\r4.4.3. Символьні літерали\r\r\r4.5. Приведення типів даних\r4.6. Робота з памяттю у С#\r\r4.6.1. \u0026ldquo;Стек\u0026rdquo; і \u0026ldquo;купа\u0026rdquo;\r4.6.2. Типи-посилання та типи-значення\r\r\rЗадачі\rКонтрольні запитання\rСписок використаних джерел\rДодаткові матеріали для завантаження\r\r Тема 5. Оператори розгалуження та цикли \r5.1. Оператори розгалуження\r\r5.1.1. Оператор if-else\r5.1.2. Оператор switch\r5.1.3. Тернарний оператор\r\r\r5.2. Використання циклів під час написання програм\r\r5.2.1. Цикл for\r5.2.2.Цикли while та do-while\r\r\rПриклади розв\u0026rsquo;язання задач\rЗадачі\rРішення до задач\rКонтрольні запитання\rСписок використаних джерел\rДодаткові матеріали для завантаження\r\r Тема 6. Основи роботи з масивами у C# \r6.1. Поняття масиву даних\r6.2. Одновимірні масиви\r\r6.2.1. Оголошення\r6.2.2. Ініціалізація\r\r\r6.3. Багатовимірні масиви\r6.4. Масиви масивів\r6.5. Цикл foreach та масиви\r6.6. Сортування масивів [-]\r6.7. Робота з класом Array [-]\rЗадачі\rКонтрольні запитання\rСписок використаних джерел\rДодаткові матеріали для завантаження\r\r Тема 7. Перелічувані типи та структури у C# (у процесі наповення)  Тема 8. Вступ до обєктно-орієнтовного програмування  ","date":1594166400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1594166400,"objectID":"a983c318211a7b1035347f51a290123d","permalink":"/courses/csharp-basics/","publishdate":"2020-07-08T00:00:00Z","relpermalink":"/courses/csharp-basics/","section":"courses","summary":"Курс вивчається економістами-кібернетиками 2-го року навчання у 1-му семестрі (кафедра економіко-математичного моделюваання та інформаційних технологій, економічний факультет, Національни.","tags":null,"title":"Загальний опис курсу","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  1.1.\tЗагальні категорії та поняття програмування 1.2.\tКоротка історія програмування та виникнення мови C#  1.2.1.\tПарадигми програмування 1.2.2. Процедурне програмування 1.2.3. Об’єктне (модульне) програмування 1.2.4. Об’єктно-орієнтовне програмування   1.3\tЕволюція мови програмування C#  1.3.1\tСтворення ООП та C++ 1.3.2\tInternet та поява мови Java 1.3.3.\tВиникнення C#   1.4\t.NET Framework: поняття та структура Контрольні запитання Список використаних джерел Додаткові матеріали для завнатаження      1.1.\tЗагальні категорії та поняття програмування Перед початком вивчення програмування варто розглянути та розібрати базові поняття та категорії. Дамо визначення понять: алгоритм, задача, програмування, мова програмування, програма, програмне забезпечення, розробка програмного забезпечення.\nПрограмування – розробка програм за допомогою мов програмування.\nМова програмування – це формальна система знаків, що призначена для написання програм, зрозуміла для виконавця (комп’ютера).\nПрограма (program, routine) — впорядкована послідовність команд (інструкцій) комп\u0026rsquo;ютера для розв\u0026rsquo;язання задачі.\nПрограмне забезпечення (software) — сукупність програм обробки даних та необхідних для їх експлуатації документів. Програми призначені для машинної реалізації завдань (Задач). Терміни завдання і застосування (програма) мають дуже широке вживання в контексті інформатики і програмного забезпечення.\nЗавдання або задача (problem, task) — проблема, що підлягає вирішенню.\nЗастосування або програма (application) — програмна реалізація на комп\u0026rsquo;ютері рішення задачі.\nРозробка програмного забезпечення (англ. software engineering, software development) — це рід діяльності (професія) і процес, спрямований на створення і підтримку працездатності, якості та надійності програмного забезпечення, використовуючи технології, методологію та практики з інформатики, управління проектами, математики, інженерії та інших сфер знань.\nАлгоритм (Algorithmi, від імені перського математика IX ст. аль-Хорезмі) — система правил виконання обчислювального процесу, що обов\u0026rsquo;язково приводить до розв\u0026rsquo;язання певного класу задач після скінченного числа операцій. При написанні комп\u0026rsquo;ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми. Засоби швидкої розробки додатків (RAD) дозволяють створити програмний продукт, що складається з ряду застосувань, що дозволяють користувачам вводити дані в таблиці або редагувати вже існуючі дані, аналізувати введені дані і представляти їх у більш зручному для сприйняття вигляді - графіків, зведених таблиць або звітів (у тому числі у вигляді \u0026ldquo;паперових\u0026rdquo; документів).\n 1.2.\tКоротка історія програмування та виникнення мови C# 1.2.1.\tПарадигми програмування Усе програмування прийнято поділяти на два основних види:\n Декларативне. Імперативне.  Декларативне програмування — термін з двома різними значеннями. Згідно першому визначенню, програма «декларативна», якщо вона описує щось, а не як його створити. Наприклад, веб-сторінки на HTML декларативні, оскільки вони описують що повинна містити сторінка, а не як відображати сторінку на екрані. Цей підхід відрізняється від мов імперативного програмування, що вимагають від програміста вказувати алгоритм для виконання.\nЗгідно другому визначенню, програма «декларативна», якщо вона написана на виключно функціональній, логічній або константній мові програмування.\nІмперативне програмування — парадигма програмування, згідно з якою описується процес отримання результатів як послідовність інструкцій зміни стану програми. Подібно до того, як з допомогою наказового способу в мовознавстві перелічується послідовність дій, що необхідно виконати, імперативні програми є послідовністю операцій комп\u0026rsquo;ютеру для виконання.\nПарадигма програмування — це спосіб мислення розробника програми. Мова програмування може підтримувати або не підтримувати ту чи іншу парадигму. В першому випадку застосування парадигми стає зручним, тобто простим, безпечним і ефективним. Ми розглянемо три основних наказових парадигми — процедурне, об’єктне (модульне) і об’єктно-орієнтовне (ієрархічне) програмування.\n1.2.2. Процедурне програмування Процедурне програмування подає програму у вигляді набору алгоритмів, для оформлення яких можуть застосовуватися іменовані програмні блоки — процедури і функції. В останньому випадку передбачається наявність механізмів передачі параметрів і поверненні результату.\nСпочатку процедурне програмування користувалося довільними засобами керування, в тому числі, переходом за міткою — одним з найбільш вживаних операторів керування в Фортрані.\nДо мов процедурного програмування відносяться Fortran, Cobol, Pascal, Basic, та інші.\nВ 1968 році голландський вчений Е. Дейкстра вперше звернув увагу на проблеми, що виникають у програмах з неконтрольованими переходами, в 1970 році проголосив новий напрямок, який він назвав структур(ова)ним програмуванням.\nСтруктурне програмування — це варіант процедурного, що вживає три типи структур керування: послідовне виконання дій, розгалуження і цикл. Не дивно, що Фортран не підтримував цю парадигму — в наборі його засобів не було циклів за умовами. Починаючи з Алголу, а особливо в Паскалі, цикли стають основним засобом організації обчислень в програмі.\nАвтор Паскалю, професор Н. Вірт, відібрав до створюваної ним мови програмування лише прості в поясненні і легкі в реалізації конструкції. Завдяки сильній типізації програми в Паскалі відзначаються високою надійністю, вони мобільні завдяки закладеній в них концепції Паскаль-машини, їх легко читати і розуміти завдяки дисципліні програмування, продиктованої вжитою парадигмою.\nАле разом з цим застосування Паскалю гальмувалося саме складністю виходу за межі віртуальної машини, потребою ефективного використання наявної апаратури. Головним критерієм, вжитим Б.Керніганом і Д.Річі до створеної ними мови С, стала саме гнучкість використання особливостей конкретної апаратури і ефективність виконання програм.\n1.2.3. Об’єктне (модульне) програмування Процедурна парадигма віддала належне алгоритмічній компоненті програмування. Але з ростом обсягу програм і складності даних з\u0026rsquo;явилася нова проблема структурної організації даних, найбільш ємко висловлена Віртовською формулою алгоритми + структури даних = програми.\nПоняття модуля як абстракції даних було вперше запропоноване Парнасом у 1972 році, правда на той час уже існувала мова програмування Симула 67, в якій використовувалася парадигма об\u0026rsquo;єктів. У найбільш повному виді поняття абстракції даних було реалізоване в мові програмування Модула-2.\nГоловна ідея полягає в забезпеченні доступу до даних, не залежному від їх конкретного представлення. Самі дані і програми їх обробки вбудовуються (інкапсулюються) в окремій одиниці програми.\n1.2.4. Об’єктно-орієнтовне програмування Об\u0026rsquo;єктно-орієнтована парадигма наділила класи ієрархією.\nОб\u0026rsquo;єктно-орієнтоване програмування за метафорою Б.Страуструпа, автора С++ — однієї з найпопулярніших мов об\u0026rsquo;єктно-орієнтованого програмування, — це високоінтелектуальний синонім доброго програмування. Дійсно, нові парадигми програмування з\u0026rsquo;являються не так часто, не частіше однієї в десятиліття. Той факт, що об\u0026rsquo;єктно-орієнтована парадигма успішно використовується протягом 20 років, сам по собі служить вагомим підтвердженням її життєздатності.\nАлгоритми, реалізовані в процедурному програмуванні, надто конкретні. Будь-яка модифікація — це вже новий алгоритм і таким чином кількість процедур і функцій, що знаходяться у використанні, надмірно зростає. Модульне програмування групує алгоритми в модулі, одночасно інкапсулюючи структури даних. Тепер залишається зробити наступний крок — побудувати ієрархію модулів або класів.\nТаких ієрархій може бути дві. Перша з них — бути частиною чогось. Наприклад, грань є частиною многогранника, ребро — частиною грані, вершина — частиною ребра. Інша ієрархія — бути узагальненням або конкретизацією.\nНаприклад, овал і многокутник служать конкретизацією плоскої фігури, коло — конкретизацією овалу, чотирикутник — конкретизацією многокутника, подальшими конкретизаціями чотирикутника можуть служити паралелограм, прямокутник, ромб, квадрат. Той факт, що квадрат, ромб, прямокутник є повноцінними паралелограмами дозволяє їм користуватися усіма програмними засобами, створеними для паралелограма, паралелограм в свою чергу є повноцінним чотирикутником і так далі. Цей принцип, відомий під назвою reusable — знову вживаний — став одним з найважливіших досягнень об\u0026rsquo;єктно-орієнтованої парадигми. Знову вживаючи вже існуюче програмне забезпечення в більш конкретизованих умовах, ми дописуємо лише ту його частину, яка стосується особливостей наявної конкретизації. Цей принцип дістав назву programming by difference або дописування програм.\nІ, нарешті, об\u0026rsquo;єктно-орієнтована парадигма доводить до логічної завершеності принцип моделювання реального світу, а точніше тієї його частини, абстракцією якої служить програма. При цьому підході програма складається з об\u0026rsquo;єктів, що відповідають реальним поняттям або предметам. Виконання програми зводиться до взаємодії об\u0026rsquo;єктів, яке служить абстракцією реальної взаємодії їх прототипів. Все це разом забезпечило об\u0026rsquo;єктно-орієнтованому підходу беззаперечне лідерство в галузі розробки програм.\nСьогодні в сімействі мов об\u0026rsquo;єктно-орієнтованого програмування три найбільш відомих представника: С++, Java і C# ( читається Сі шарп ). С++ і сьогодні залишається визнаним лідерів в розробці великих і складних програмних систем. Java і C# виросли з С++.\n 1.3\tЕволюція мови програмування C# 1.3.1\tСтворення ООП та C++ До кінця 1970-х розмір проектів став наближатися до критичного, при перевищенні якого методика структурного програмування і мова С \u0026ldquo;опускали руки\u0026rdquo;. Тому стали з\u0026rsquo;являтися нові підходи до програмування, що дозволяють вирішити цю проблему. Один з них отримав назву об\u0026rsquo;єктно-орієнтованого програмування (ООП). Використовуючи ООП, програміст міг справлятися з програмами набагато більшого розміру, ніж раніше. Але проблема полягала у тому, що С, найпопулярніша на той час мова, не підтримувала ООП. Бажання працювати з об\u0026rsquo;єктно-орієнтованою версією мови С врешті-решт і привело до створення C++.\nМова C++ була розроблена Бьорном Страуструпом (Bjarne Stroustrup) в компанії Bell Laboratories (Нью-Джерсі), роком створення вважається 1979-й. Спочатку творець нової мови назвав її \u0026ldquo;С з класами\u0026rdquo;, але в 1983 році це ім\u0026rsquo;я було змінене на C++. C++ повністю включає елементи мови С. Таким чином, С можна вважати фундаментом, на якому побудований C++. Більшість доповнень, які Страуструп вніс до С, були призначені для підтримки об\u0026rsquo;єктно-орієнтованого програмування. По суті, C++ - це об\u0026rsquo;єктно-орієнтована версія мови С. Створюючи С++ на основі С Страуструп забезпечив плавний перехід багатьох програмістів на ООП.\nЗамість необхідності вивчати абсолютно нову мову, С-програмістові досить було освоїти лише нові засоби, що дозволяють використовувати переваги об\u0026rsquo;єктно-орієнтованої методики.\nВпродовж 1980-х років C++ інтенсивно розвивалася і на початок 1990-х вже була готовп для широкого використання. Зростання її популярності носило вибухоподібний характер, і до кінця цього десятиліття вона стала найбільш використовуваною мовою програмування. В наші дні мова C++ як і раніше має безперечну перевагу при розробці високопродуктивних програм системного рівня.\n1.3.2\tInternet та поява мови Java Наступним рівнем на сходах прогресу мов програмування стала мова Java, яка спочатку називалася Oak (у перекладі з англ. \u0026ldquo;дуб\u0026rdquo;). Робота над її створенням почалася в 1991 році в компанії Sun Microsystems. Основною рушійною силою розробки Java був Джеймс Гослінг (James Gosling).\nJava - це структурна об\u0026rsquo;єктно-орієнтована мова програмування, синтаксис і принципи якої \u0026ldquo;родом\u0026rdquo; з C++. Своїми новаторськими аспектами Java зобов\u0026rsquo;язана не стільки прогресу в мистецтві програмування (хоча і це мало місце), скільки змінам в комп\u0026rsquo;ютерному середовищі. Ще до настання ери Internet більшість програм писалися, компілювалися і призначалися для виконання з використанням певного процесора і під управлінням конкретної операційної системи. Не дивлячись на те що програмісти завжди прагнули робити свої програми так, щоб їх можна було застосовувати неодноразово, можливість легко переносити програму з одного середовища в іншу не була ще досягнута, до того ж проблема переносимості постійно вікладалися, вирішувалися ж більш насущні проблеми. Проте з появою всесвітньої мережі Internet, в якій виявилися зв\u0026rsquo;язаними різні типи процесорів і операційних систем, стара проблема портативності заявила про себе вже в повний голос. Для її вирішення знадобилася нова мова програмування, і нею стала Java.\nЦікаво відзначити, що, хоча єдиним найбільш важливим аспектом Java (і причиною швидкого визнання) є можливість створювати на ній кросплатформений (сумісний з декількома операційними середовищами) переносимий програмний код, вихідним імпульсом для виникнення Java стала не мережа Internet, а наполеглива потреба у незалежній від платформи мові, яку можна було б використовувати в процесі створення програмного забезпечення для вбудованих контролерів. У 1993 році стало очевидним, що проблеми міжплатформеної переносимості, що чітко виявилися при створенні коду в вбудованих контролерів, також виявилися актуальними при спробі написати код для Internet. Адже Internet - це величезне комп\u0026rsquo;ютерне середовище, в якому \u0026ldquo;мешкає\u0026rdquo; безліч комп\u0026rsquo;ютерів різних типів. І виявилось, що одні і ті ж методи вирішення проблеми переносимості в малих масштабах можна успішно застосувати і до набагато більших, тобто в Internet У Java переносимість досягається за допомогою перетворення вихідного коду програми в проміжний код, що іменується байт-кодом), тобто машинно-незалежний код, що генерується Java-компілятором. Байт-код виконується віртуальною машиною Java (Java Virtual Machine - JVM) - спеціальною операційною системою. Отже, Java-программа могла б працювати в будь-якому середовищі, де доступна JVM. А оскільки JVM відносно проста для реалізації, вона швидко стала доступною для великої кількості середовищ.\nВикористання Java-програмами байт-коду радикально відрізняло їх від С- і С++-програм. Якщо С/С++-программу потрібно виконати в іншій системі, її необхідно перекомпілювати в машинний код, відповідний цьому середовищу. Отже, аби створити С/С++-програму, призначену для виконання в різних середовищах, необхідно мати декілька різних виконуваних (машинних) версій цієї програми. Це було непрактично і дорого. І навпаки, використання для виконання Java-программ проміжної мови було елегантним і рентабельним рішенням. Саме це рішення було адаптоване для мови С#.\n1.3.3.\tВиникнення C# Розробники Java успішно вирішили багато проблем, пов\u0026rsquo;язаних з переносимістю в середовищі Internet, але далеко не всі. Одна з них - міжмовна можливість взаємодії (cross-language interoperability) програмних і апаратних виробів різних постачальників, або багатомовне програмування (mixed-language programming). В разі вирішення цієї проблеми програми, написані на різних мовах, могли б успішно працювати одна з іншою. Така взаємодія необхідна для створення великих систем з розподіленим програмним забезпеченням (ПЗ), а також для програмування компонентів ПЗ, оскільки найціннішим є компонент, який можна використовувати у широкому діапазоні комп\u0026rsquo;ютерних мов і операційних середовищ.\nКрім того, в Java не досягнута повна інтеграція з платформою Windows. Хоча Java-програми можуть виконуватися в середовищі Windows (за умови встанолення віртуальної машини Java), Java і Windows не є міцно зв\u0026rsquo;язаними середовищами. А оскільки Windows - це найбільш широко використовувана операційна система в світі, відсутність прямої підтримки Windows - серйозний недолік Java.\nАби задовольнити ці потреби, Microsoft розробила мову С#, С# була створена в кінці 1990-х років і стала частиною спільної .NET-стратегії Microsoft. Вперше вона побачила світло як альфа-версія в середині 2000 року. Головним архітектором С# був Андерс Хейлсберг (Anders Hejlsberg) - один з провідних фахівців в області мов програмування, що отримав визнання у всьому світі. Досить сказати, що в 1980-х він був автором успішного продукту Turbo Pascal, витончена реалізація якого встановила стандарт для всіх майбутніх компіляторів.\ngraph TD;\rC--C++;\rC++--Java;\rC++--C#;\r Рис. 1.1. Розвиток мов програмування C/C++/Java/C#\rС# безпосередньо пов\u0026rsquo;язаний із С, C++ і Java. І це не випадково. Ці три мови - найпопулярніші і найулюбленіші мови програмування в світі. Більш того, майже всі професійні програмісти сьогодні знають С і C++, і більшість знає Java. Оскільки С# побудований на міцному, зрозумілому фундаменті, то перехід від цих \u0026ldquo;фундаментальних\u0026rdquo; мов до \u0026ldquo;надбудови\u0026rdquo; відбувається без особливих зусиль з боку програмістів. Оскільки Андерс Хейлсберг не збирався винаходити нову мову, він зосередився на введенні удосконалень.\nПрамовою С# є мова С. Від С мова С# успадкувала синтаксис, багато ключових слів і оператори. Крім того, С# побудований на покращеній об\u0026rsquo;єктній моделі, визначеній в C++.\nС# і Java зв\u0026rsquo;язані між собою дещо складніше. Як згадувалося вищим, Java також є нащадком С і C++. У неї теж загальний з нею синтаксис і схожа об\u0026rsquo;єктна модель. Подібно Java C# призначений для створення переносимого коду. Проте С# - не нащадок Java. Швидше С# і Java можна вважати двоюрідними братами, що мають загальних предків, але що отримали від батьків різні набори \u0026ldquo;генів\u0026rdquo;.\n 1.4\t.NET Framework: поняття та структура Платформа — у контексті інформаційних технологій - середовище, що забезпечує виконання програмного коду. Платформа визначається характеристиками процесорів, особливостями операційних систем.\nFramework — це інфраструктура середовища виконання програм, щось, що визначає особливості розробки і виконання програмного коду на даній платформі. Передбачає засоби організації взаємодії з операційною системою і прикладними програмами, методи доступу до баз даних, засоби підтримки розподілених (мережевих) додатків, мови програмування, безліч базових класів, уніфіковані інтерфейси користувача, парадигми програмування. Microsoft .NET — платформа.\n.NET Framework — інфраструктура платформи Microsoft .NET. Включає наступні основні компоненти: Common Language Runtime (CLR) і .NET Framework Class Library (.NET FCL).\nCLS (Common Language Specification) — загальна специфікація мов програмування. Це набір конструкцій і обмежень, які є інструкцією для розробників бібліотек і компіляторів в середовищі .NET Framework. Бібліотеки, побудовані відповідно до CLS, можуть бути використані у будь-якій мові програмування, що підтримує CLS. Мови, відповідні CLS (до їх числа відносяться мови Visual C#, Visual Basic, Visual C++), можуть інтегруватися один з одним. CLS - це основа міжмовної взаємодії в рамках платформи Microsoft .NET.\nCLR (Common Language Runtime) — Середовище Часу Виконання або Віртуальна Машина. Забезпечує виконання збірки. Основний компонент .NET Framework. Під Віртуальною Машиною розуміють абстракцію інкапсульованої (відособленої) керованої операційної системи високого рівня, яка забезпечує виконання (керованого) програмного коду.\nКерований код — програмний код, який під час виконання здатний використовувати служби, що надаються CLR. Відповідно, некерований код подібною здатністю не володіє.\nТобто, CLR - це набір служб, необхідних для виконання керованого коду. Сама CLR складається з двох головних компонентів: ядра (mscoree.dll) і бібліотеки базових класів (mscorlib.dll). Наявність цих файлів на диску - ознака того, що на комп\u0026rsquo;ютері, принаймні, була зроблена спроба встановлення платформи .NET.\nFCL (.NET Framework Class Library) — відповідна CLS-спеціфікаціії об\u0026rsquo;єктно-орієнтована бібліотека класів, інтерфейсів і системи типів (типів-значень), які включаються до складу платформи Microsoft .NET. Ця бібліотека забезпечує доступ до функціональних можливостей системи і призначена служити основою при розробці .NET-додатків, компонент, елементів управління.\n.NET бібліотека класів є другим компонентом CLR. .NET FCL можуть використовувати усі\n.NET-додатки, незалежно від призначення архітектури використовуваного при розробці мови програмування, і зокрема:\n  вбудовані (елементарні) типи, представлені у вигляді класів (на платформі .NET все побудовано на структурах або класах);\n  класи для розробки графічного користувацького інтерфейсу (Windows Forms);\n  класи для розробки web-додатків і web-служб на основі технології ASP.NET (Web Forms);\n  класи для розробки XML і Internet-протоколів (FTP, HTTP, SMTP, SOAP);\n  класи для розробки додатків, що працюють з базами даних (ADO .NET) і багато що інших.\n  .NET-застосування — програма, розроблена для виконання на платформі Microsoft .NET. Реалізується на мовах програмування, відповідних CLS.\nMSIL (Microsoft Intermediate Language) — проміжна мова платформи Microsoft .NET. Вихідні тексти програм для .NET-додатків пишуться на мовах програмування, відповідних специфікації CLS. Для таких мов може бути побудований перетворювач в MSIL. Таким чином, програми на цих мовах можуть транслюватися в проміжний код на MSIL. Завдяки відповідності CLS, в результаті трансляції програмного коду, написаного на різних мовах, виходить сумісний IL-код.\nСхема виконання .NET додатків у середовищі CLR:\n\r  1.2. Процес запуску .NET-програми   \r Усі блок-схеми створено у draw.io.\nФайли можна знайти у github репозиторії курсу.   У середовищі CLR допускається спільна робота і взаємодія компонентів програмного забезпечення, реалізованих на різних мовах програмування. CLR бере на себе вирішення багатьох проблем, які традиційно знаходилися в зоні особливої уваги розробників програмного забезпечення.\nДо функцій, виконуваних CLR, відносяться:\n Перевірка і динамічна (JIT) компіляція MSIL-коду у команди процесора. Управління пам\u0026rsquo;яттю, процесами і потоками. Організація взаємодії процесів. Вирішення проблем безпеки (в рамках безпеки, що існує в системі політики).   \r\rКонтрольні запитання   Дати визначення поняття алгоритм?\n  Дати визначення поняття програма?\n  Дати визначення поняття задача?\n  Дати визначення поняття програмне забезпечення?\n  Дати визначення поняття розробка програмного забезпечення?\n  Яка відмінність між програмою та програмним забезпеченням?\n   \r\rСписок використаних джерел \r## Задачі\r--\r \r\rДодаткові матеріали для завнатаження    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1617318000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617318000,"objectID":"fab8c528e21c76ad901736461f7e9d9c","permalink":"/courses/csharp-basics/lecture1/","publishdate":"2021-04-02T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture1/","section":"courses","summary":"Table of Contents  1.1.\tЗагальні категорії та поняття програмування 1.2.\tКоротка історія програмування та виникнення мови C#  1.2.1.\tПарадигми програмування 1.2.2. Процедурне програмування 1.2.3. Об’єктне (модульне) програмування 1.","tags":["csharp","economic cybernetics","ostroh academy","C#"],"title":"Лекція 1. Вступ до основ програмування на платформі .NET","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  2.1.\tПоняття та характеристики алгоритмів 2.2. Побудова алгоритмів з використанням блок-схем  2.3.\tСтвоерення блок-схем з використанням Diagramm Designer  2.4.\tСтвоерення блок-схем з використанням draw.io  Контрольні запитання  Список використаних джерел  Додаткові матеріали для завнатаження      2.1.\tПоняття та характеристики алгоритмів Слово алгоритм походить від імені перського вченого, астронома та математика Аль-Хорезмі. Близько 825 до н. е. він написав трактат, в якому описав придуману в Індії позиційну десяткову систему числення. В першій половині XII століття книжка потрапила до Європи в перекладі латинською мовою під назвою Algoritmi de numero Indorum. Вважається, що перше слово в перекладі відповідає невдалій латинізації імені Аль-Хорезмі, а назва перекладу звучить як «Алгорітмі про індійську лічбу».\nПерший алгоритм, призначений для виконання на автоматичному обчислювальному пристрої (комп\u0026rsquo;ютері), описала Ада Лавлейс в 1843 році. Алгоритм мав обчислювати числа Бернуллі й працювати на аналітичній машині Беббіджа. Цей алгоритм вважається першою комп\u0026rsquo;ютерною програмою, а його розробниця, Ада Лавлейс — першим програмістом.\n\r  Рис. 2.1. Баронеса Ада Лавлейс, яку вважають першим програмістом. Джерело: Wikipedia   \rРозглянемо визначення поняття алгоритм.\nАлгоритм являє собою послідовність розпоряджень виконавцю. Виконавець повинен неухильно виконувати ці розпорядження. Число таких розпоряджень не є обов\u0026rsquo;язковим: воно може складати кілька тисяч, мільйонів і навіть трильйонів, але воно не може бути нескінченним. І коли виконавець виконає всі розпорядження, задача, для якої був створений алгоритм, буде вирішена.\nАлгоритм — система правил виконання обчислювального процесу, що обов\u0026rsquo;язково приводить до розв\u0026rsquo;язання певного класу задач після скінченного числа операцій. При написанні комп\u0026rsquo;ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми.\nКожен алгоритм є списком точно визначених інструкцій для розв\u0026rsquo;язання задачі. Починаючи з початкового стану, інструкції алгоритму описують процес обчислення, які відбуваються через послідовність станів, які, зрештою, завершуються кінцевим станом. Перехід з одного стану до наступного не обов\u0026rsquo;язково детермінований — деякі алгоритми містять елементи випадковості.\nАлгоритм — це опис процесу вирішення того чи іншого завдання. Алгоритмом називається кінцевий набір правил, розташованих у певному логічному порядку, що дозволяє виконавцю вирішувати будь-яку конкретну задачу з деякого класу однотипних задач.\nАлгоритми мають ряд важливих властивостей:\n Скінченність. Алгоритм має завжди завершуватись після виконання скінченної кількості кроків. Процедуру, яка має решту характеристик алгоритму, без, можливо, скінченності, називають методом обчислень. Дискретність. Процес, що визначається алгоритмом, можна розчленувати (розділити) на окремі елементарні етапи (кроки), кожен з яких називається кроком алгоритмічного процесу чи алгоритму. Визначеність. Кожен крок алгоритму має бути точно визначений. Дії, які необхідно здійснити, повинні бути чітко та недвозначно визначені для кожного можливого випадку. Вхідні дані. Алгоритм має деяку кількість (можливо, нульову) вхідних даних, тобто, величин, заданих до початку його роботи або значення яких визначають під час роботи алгоритму. Вихідні дані. Алгоритм має одне або декілька вихідних даних, тобто, величин, що мають досить визначений зв\u0026rsquo;язок із вхідними даними. Ефективність. Алгоритм вважають ефективним, якщо всі його оператори досить прості для того, аби їх можна було точно виконати за скінченний проміжок часу з допомогою олівця та аркушу паперу.  Виділяють наступні основні способи запису алгоритмів:\n вербальний - алгоритм описується на природній мові; символьний - алгоритм описується за допомогою набору символів; графічний - алгоритм описується за допомогою набору графічних зображень.  Розглянемо приклад розв\u0026rsquo;язання задачі.\n  Задача 1. Скласти алгоритм ров’язання квадратного рівняння на комп’ютері та записати його вербальним способом (описати словами). Нагадаємо, квадратне рівняння має вигляд: $ {ax^2 + bx + c = 0} $.\n  Етапи розв\u0026rsquo;язання задачі:\n Вводимо значення $ a $, $ b $, $ c $. Обчислюємо дискримінант за фрмулою $ d = b^2 - 4ac $. Якщо $ d \u0026gt; 0 $ обчислити корені $ x_1 $, $ x_2 $ за формулою $ x=\\frac {b ± \\sqrt{d}}{2a} $ та вивести їх значення на екран. Інакше, якщо $ d = 0 $ – обчислити $ x_1=-\\frac{b}{2a} $ і вивести на екран. Інакше вивести на екран «Коренів немає». Вийти з програми.  Ця ж задача на мові програмування C# має вигляд (символьний запис):\n  Лістинг 2.1. Розв’язання квадратного рівняння.\nstatic void Main(string[] args)\r{\r//Оголошуємо змінні\rdouble a, b, c, d, x1, x2;\r//Вводимо значення змінних з клавіатури\rConsole.WriteLine(\u0026quot;Введіть a:\u0026quot;);\ra = Convert.ToDouble(Console.ReadLine());\rConsole.WriteLine(\u0026quot;Введіть b:\u0026quot;);\rb = Convert.ToDouble(Console.ReadLine());\rConsole.WriteLine(\u0026quot;Введіть c:\u0026quot;);\rc = Convert.ToDouble(Console.ReadLine());\r//Знаходимо дискримінант\rd = b * b - 4 * a * c;\rif (d \u0026gt; 0)\r{\rx1 = (-b + Math.Sqrt(d)) / (2 * a);\rx2 = (-b - Math.Sqrt(d)) / (2 * a);\rConsole.WriteLine(\u0026quot;x1 = {0}, x2 = {1}\u0026quot;, x1, x2);\r}\relse if (d == 0)\r{\rx1 = -b / (2 * a);\rConsole.WriteLine(\u0026quot;x = {0}\u0026quot;, x1);\r}\relse\rConsole.WriteLine(\u0026quot;Коренів не існує.\u0026quot;);\r//Вихід з програми\r}\r  2.2. Побудова алгоритмів з використанням блок-схем  Для зображення алгоритмів використовуватимемо блок-схеми, що формуються з типових блоків:\n\r  Рис. 2.2. Типові блоки для формування блок-схем алгоритмів.   \r Усі блок-схеми створено у draw.io.\nФайли можна знайти у github репозиторії курсу.   У теорії алгоритмів доведено, що будь-який, скільки завгодно складний алгоритм може бути складений з трьох основних алгоритмічних структур: лінійної, розгалуження і циклу, показаних, відповідно на рис. 2.3.\n\r  Рис. 2.3. Основні алгоритмічні структури   \rЛінійна структура передбачає послідовне виконання дій, без їх повторення або пропуску деяких дій. Зазвичай програмісти прагнуть до того, аби алгоритм мав лінійну структуру.\nСтруктура \u0026ldquo;розгалуження\u0026rdquo; передбачає виконання однієї з двох груп дій залежно від виконання умови у блоці розгалуження. На рис. 3 знаком \u0026ldquo;+\u0026rdquo; показано виконання умови, а знаком \u0026ldquo;-\u0026rdquo; - його невиконання. Часто використовується неповна команда розгалуження, коли один з блоків дії відсутній.\nСтруктура \u0026ldquo;цикл\u0026rdquo; має декілька різновидів. На рис. 3 показаний цикл типу \u0026ldquo;доки\u0026rdquo; (while) з передумовою. Дії всередині цього циклу повторюються доки виконується умова у блоці розгалуження, причому спочатку перевіряється умова, а потім виконується дія. Досить часто використовуються інші типи циклу, показані на рис. 2.4.\n\r  Рис. 2.4. Зображення циклів за допомогою блок-схем   \rУ циклі з після умовою перевірка умови виходу з циклу виконується після чергової дії. Цикл \u0026ldquo;для (for)\u0026rdquo; є модифікацією циклу \u0026ldquo;доки (while)\u0026rdquo; для ситуації, коли заздалегідь відома кількість повторень деяких дій. Запис у блоці заголовка циклу на рис.3 показує приклад опису заголовка циклу, в якому дії повторюються стільки раз, скільки цілих значень набуває параметра циклу i від свого початкового значення 1 до кінцевого N з кроком 1. Зазвичай крок не вказується, якщо він дорівнює 1.\nТепер запишемо алгоритм розв’язання задачі 1 у графічному вигляді.\n\r  Рис. 2.5. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №1   \rДля закріплення знань по лінійних структурах та розгалуженнях побудуємо графічне відображення алгоритмів для кількох задач.\n   Задача 2. Побудувати блок-схему алгоритму перевірки введеного числа на невід’ємність.\n  Розвязання задачі графічним способом:\n\r  Рис. 2.6. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №2   \r   Задача 3. Побудувати блок-схему алгоритму зходження периметра та площі трикутника за формулою Герона.\n  Розвязання задачі графічним способом:\n\r  Рис. 2.7. Блок-схема алгоритму до задачі №3   \r   Задача 4. Побудувати блок-схему алгоритму порівняння двох чисел.\n  Розвязання задачі графічним способом:\n\r  Рис. 2.8. Блок-схема до задачі №4   \r Для закріплення знань по циклічних структурах побудуємо графічне відображення алгоритмів для кількох задач.\n  Задача 5. Побудувати блок-схему алгоритму знаходження суми елементів у масиву.\n  Введемо позначення: $ n $ – кількість елементів масиву, $ sum $ – змінна, що визначає суму, $ x_i $ – $ і $-й елемент масиву.\n  Розвязання задачі графічним способом:\n\r  Рис. 2.9. Блок-схема до задачі №5   \r   Задача 6. Побудувати блок-схему алгоритму знаходження середнього значення елементів масиву.\n  Ця задача відрізнється від попередньої лише появою нової змінної $ avg $ – середнє значення.\n  Розвязання задачі графічним способом:\n\r  Рис. 2.10. Блок-схема до задачі №6   \r   Задача 7. Побудувати блок-схему алгоритму знаходження максимального елемента у масиві.\n  Введемо позначення: $ max $ – максимальний елемент, $ n $ - кількість елементів у масиві, $ x_i $ – $ і $-й елемент масиву. Припускаємо що масив уже заповнений і наперед відомо кількість елементів у масиві.\n  Розвязання задачі графічним способом:\n\r  Рис. 2.11. Блок-схема до задачі №7   \r 2.3.\tСтвоерення блок-схем з використанням Diagramm Designer  Diagramm Designer - програмне забезпечення для побудови блок-схем, UML-діаграм, та інших зображень на основі векторної графіки.  Завантажити актуальну версію DiagramDesigner можна тут.\nПерелік базових функцій Diagramm Designer:\n Налаштовувана палітра шаблонів. Перевірка правопису. Імпорт / експорт зображень WMF, EMF, BMP, JPEG, PNG, MNG, ICO, GIF та PCX. Переглядач слайд-шоу. Зручний графічний редактор для відображення математичних виразів. Калькулятор для розв\u0026rsquo;язання рівнянь. Інтеграція з MeeSoft Image Analyzer для редагування растрових зображень. Мінімізація розміру файлів.  Розглянемо графічний інтерфейс продукту:\n\r  Рис. 2.12. Головне вікно програми Diagramm Designer 1.23   \rДля створення діаграм використовуєть технологія Drag\u0026amp;Drop, тобто елементи можна перетягувати на робочу область. Приклад створення діаграми можна переглянути на відео (у онлайн версії лекції).\nДокумент DiagrammDesigner може мати кілька сторінок, переключення між сторінками за допомогою меню Diagram - Rearrange pages (рис. 2.13).\n\r  Рис. 2.13. Вибір сторінки у програмі Diagramm Designer   \rДля форматування тексту у межах графічних блоків (фігур) використовують наступні теги:\n\r  Рис. 2.14. Редагування тексту у блоці Diagramm Designer.   \rТаблиця 2.1. Теги для форматування тексту у графічних блоках DiagrammDesigner\n   Код Стиль     \\B…\\b Напівжирний   \\U…\\u Підкреслений   \\I…\\i Курсив   \\O…\\o Закреслений   \\\\ \\   \\H…\\h Припіднятий до верху   \\S…\\s Символьний шрифт   \\p Номер сторінки   \\L…\\l Опущений до низу   \\C###### Колір у HTML   \\P Загловок сторінки   \\c Кількість сторінок   \\_ Горизонтальний розділювач   \\n Новий рядок   \\N Підказка    Таблиця 2.2. Приклади форматування тексту у графічних блоках DiagrammDesigner\n   Код з тегами Текст     \\B\\ID=b\\H2\\h-4ac $ D=b^2-4ac $   Вводимо значення \\Ba, b, c Вводимо значення $ a $, $ b $, $ c $   \\ID \u0026gt; 0 $\tD \u0026gt; 0 $   Вводимо \\B\\Ix\\Li\\i Вводимо $ x_i $    З іншими можливостями програмного подукту Diagramm Designer можна ознайомитися використовуючи вбудовану довідку програми.\n Підтримка даного розділу лекції у майбутньому не планується і його варто використовувати швидше для ознайомлення та розширення кругозору слухачів курсу. Рекомендую використовувати draw.io.    2.4.\tСтвоерення блок-схем з використанням draw.io  Варто звернути увагу, що усі діаграми для лекцій створені саме у draw.io і можете завантажити їх у публічному репозиторії курсу на github.\nНа даний момент проект є безкоштовним і розміщується за адресою http://diagrams.net/.\nДосить зручною функцією є інтеграція сервісами для зберігання файлів діаграм:\n   Google Drive.   OneDrive.   Dropbox.   GitHub.   GitLab.  \r  Рис. 2.15. Вибір джерела для збереження draw.io   \rГрафічний інтерфейс draw.io є досить зручним у користуванні і дозволяє доповнити перелік доступних зображень, блоків, логотипів продуктів для створення схем будь-якого рівня складності.\n\r  Рис. 2.16. UI головного вікна програми draw.io для Windows   \rДосить зручною є функція збереження діаграм для публікації у веб або на паперових носіях формати файлів (png, jpeg, svg, pdf, html, xml), а також вбудовування їх у різні типи документів, що надають сервіси Google та Microsoft.\nДля початку ознайомлення з сервісом draw.io рекомендую переглянути коротке відео:\n  Джерело: youtube канал draw.io\n \r\rКонтрольні запитання   Дати визначення поняття «алгоритм»? Перелічіть властивості алгоритмів. Якими способами можна представити алгоритм? Які типові блоки для формування блок-схем алгоритмів ви знаєте? Як вони зображуються графічно?   \r\rСписок використаних джерел    Ada Lovelace on Wikipedia. Url: https://en.wikipedia.org/wiki/Ada_Lovelace\n  DiagramDesigner. Url: https://logicnet.dk/DiagramDesigner/\n  Draw.IO. Url: https://www.diagrams.net/\n  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.\n  Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf\n  Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.\n  MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/\n  Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.\n  Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;.\n  Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.\n  \r## Задачі\r--\r \r\rДодаткові матеріали для завнатаження   Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1617318000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617318000,"objectID":"b7bc3c1f3def7c2fa24111c15ddb9567","permalink":"/courses/csharp-basics/lecture2/","publishdate":"2021-04-02T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture2/","section":"courses","summary":"Table of Contents  2.1.\tПоняття та характеристики алгоритмів 2.2. Побудова алгоритмів з використанням блок-схем  2.3.\tСтвоерення блок-схем з використанням Diagramm Designer  2.4.\tСтвоерення блок-схем з використанням draw.","tags":["csharp","economic cybernetics","ostroh academy","C#","algorithm","draw.io","Diagramm Designer"],"title":"Лекція 2. Основи алгоритмізації","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  3.1\tКоротка характеристика та історія розвитку середовища розробки Visual Studio. Контрольні запитання Список використаних джерел Додаткові матеріали для завнатаження      Розділ у процесі наповнення.   3.1\tКоротка характеристика та історія розвитку середовища розробки Visual Studio. Microsoft Visual Studio - лінійка продуктів компанії Майкрософт, що включають інтегроване середовище розробки програмного забезпечення і ряд інших інструментальних засобів.\nСередовище розробки Visual Studio представляє собою повний набір інструментів для створення як настільних додатків, так і корпоративних веб-додатків для спільної роботи груп. Використовуючи ефективні інструменти розробки Visual Studio, засновані на використанні компонентів, та інші технології, можна не тільки створювати ефективно працюючі настільні додатки, але і спрощувати спільне проектування, розробку і розгортання корпоративних рішень.\nVisual Studio включає один або декілька компонентів з наступних:\n Visual Basic .NET, а до його появи - Visual Basic. Visual C++. Visual C#. Visual F# (включений у Visual Studio 2010).  Багато варіантів поставки також включають\tMicrosoft SQL Server або Microsoft SQL Server Express.\nНа сьогодні Visual Studio уже підтримує досить велику кількість мов програмування та фреймворків не лише зі стеку .NET-технологій.\nОпишемо коротко найважливіші версії IDE Visual Studio:\n  Visual Studio 97 - перша випущена версія Visual Studio, у ній вперше були зібрані разом різні засоби розробки ПЗ. Вона була випущена в двох версіях Professional та Enterprise. Вона включала в себе Visual Basic 5.0, Visual C++ 5.0, Visual J++ 1.1, Visual FoxPro 5.0, вперше з\u0026rsquo;явилося середовище розробки ASP - Visual InterDev. Visual Studio 97 - була першою спробою Microsoft створити єдине середовище для розробки на різних мовах програмування: Visual C++, Visual J++, Visual InterDev, і MSDN використовували одне середовище, так зване Developer Studio. Visual Basic і Visual FoxPro використовували окремі середовища для розробки.\n  Visual Studio. NET (кодове ім\u0026rsquo;я Rainier; внутрішня версія 7.0) - випущена в лютому 2002 (включає .NET Framework 1.0).\n  Visual Studio. NET 2003 (кодове ім\u0026rsquo;я Everett; внутрішня версія 7.1) - випущена в квітні 2003 (включає .NET Framework 1.1).\n  Visual Studio 2005 (кодове ім\u0026rsquo;я Whidbey; внутрішня версія 8.0) - випущена в кінці жовтня 2005, остання що офіційно працює на Windows 2000, (включає .NET Framework 2.0). На початку листопада 2005 також вийшла серія продуктів в редакції Express: Visual C++ 2005 Express, Visual Basic 2005 Express, Visual C # 2005 Express і ін. 19 квітня 2006 редакція Express стала безкоштовною.\n  Visual Studio 2008 (кодове ім\u0026rsquo;я Orcas) - випущена 19 листопада 2007, одночасно з . NET Framework 3.5. Націлена на створення додатків для ОС Windows Vista (але підтримує і XP), Office 2007 та веб-додатків. Включає в себе LINQ, нові версії мов C# і Visual Basic. До студії не увійшов Visual J#. З 28 жовтня 2008 вперше доступна версія російською мовою.\n  Visual Studio 2010 (кодове ім\u0026rsquo;я Hawaii, для Ultimate - Rosario) - випущена 12 квітня 2010 разом з .NET Framework 4.0. Visual Studio включає підтримку мов C# 4.0 і Visual Basic. NET 10.0, а також мову F#, яка була відсутня в попередніх версіях.\n    \r\rКонтрольні запитання  \r\rСписок використаних джерел   Ada Lovelace on Wikipedia. Url: https://en.wikipedia.org/wiki/Ada_Lovelace\n  DiagramDesigner. Url: https://logicnet.dk/DiagramDesigner/\n  Draw.IO. Url: https://www.diagrams.net/\n  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.\n  Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf\n  Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.\n  MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/\n  Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.\n  Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;.\n  Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.\n  \r## Задачі\r--\r \r\rДодаткові матеріали для завнатаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1618614000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618614000,"objectID":"5560c0f41c2bea77f76041f323bfa46b","permalink":"/courses/csharp-basics/lecture3/","publishdate":"2021-04-17T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture3/","section":"courses","summary":"Table of Contents  3.1\tКоротка характеристика та історія розвитку середовища розробки Visual Studio. Контрольні запитання Список використаних джерел Додаткові матеріали для завнатаження      Розділ у процесі наповнення.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application"],"title":"Лекція 3. Основи роботи з Visual Studio та платформою .NET","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  4.1. Поняття типу даних. Система типів .NET. 4.2. Оголошення та ініціалізація змінних. Константи 4.3. Оператори та вирази  4.3.1. Арифметичні оператори 4.3.2. Інкремент і декремент 4.3.3. Логічні оператори. Оператори відношення 4.3.4. Інші оператори   4.4. Літерали  4.4.1. Арифметичні літерали 4.4.2. Логічні літерали 4.4.3. Символьні літерали   4.5. Приведення типів даних 4.6. Робота з памяттю у С#  4.6.1. \u0026ldquo;Стек\u0026rdquo; і \u0026ldquo;купа\u0026rdquo; 4.6.2. Типи-посилання та типи-значення   Задачі     Контрольні запитання Список використаних джерел Додаткові матеріали для завантаження     4.1. Поняття типу даних. Система типів .NET. Тип (загальне поняття) — це стійка сукупність елементів зі спільними характеристиками, яку можна виділити серед множини інших об’єктів.\nТип даних як у математиці, так і у програмуванні має обмеження на значення, що дозволяє зменшити невизначеність у записах та уникнути частини помилок. Тип даних вказує яким чином об’єкти цього типу можуть взаємодіяти з іншими елементами мови програмування або між собою (Джерело: Cardelli \u0026amp; Wegner, 1985).\nСистеми типів у мовах програмування мають ряд властивостей та діляться за різними класифікаціями: статичні і динамічні, строго типізовані і не строго типізовані тощо. Також на сьогодні існують елементи мов програмування, що перемішують дані поняття або підміняють їх (наприклад var у C#).\nСистема типів .NET називається Common Type System (далі CTS). CTS визначає спосіб оголошення використання та керування типами у середовищі CLR, а також є важливою частиною підтримки міжмовної інтеграції у середовищі виконання (MSDN, n.d.).\nУсі типи на платформі .NET Framework поділяються на типи-значення (Value Type) та типи-посилання (Rerence Type). Типи-значення представлені фактичними значеннями об’єкта, тобто під час присвоєння змінної відбувається створення нової копії об’єкта. Для типів посилань створення нової копії не відбувається. Типи посилання вказують на «комірку пам’яті» де розміщено значення.\nУ спрощеному вигляді система типів .NET має такий вигляд:\n  типи-значення:\n прості типи; структури; перелічувані типи;    типи-посилання:\n класи; інтерфейси; масиви;    \r  Рис. 4.1. Система типів .NET   \rВарто також згадати, що типи даних, які підтримуються компілятором напряму і знаходяться у .NET Framework Class Library (FCL) називаються примітивними. Оскільки типи повинні бути універсальними між різними мовами, то розрізняються FCL типи та типи конкретної мови програмування (Також варто відмітити, що існує загальномовна специфікація типів (Common Language Specification), проте відповідність їй не обов’язкова). По суті типи конкретної мови програмування є псевдонімами FCL типів. Наприлад, int у C# — це Int32 у FCL, проте записати можна обидва варіанти:\nint a = 0;\rInt32 b = 0;\r Розглянемо примітивні типи даних C# та їх відмінності (табл. 4.1).\nТаблиця 4.1. Примітивні типи C# та їх характеристики (Биллиг, 2005)\n\rЦілочисельні типи\r\r\rНазва\rFLC-тип\rЗначення\rРозмір, біт\r\r\rsbyte \rSystem.SByte \r$$[-128;127]$$\r8\r\rbyteSystem.Byte$$[0;255]$$8\rshort System.Short$$[-32768;32767]$$ 16\rushort System.UShort$$[0;65535]$$ 16\rint System.Int32$$≈(-2*10^9;2*10^9)$$ 32\ruint System.UInt32$$≈(0;4*10^9)$$ 32\rlong System.Int64$$≈(-9*10^{18};9*10^{18})$$ 64\rulong System.UInt64$$≈(0;18*10^{18})$$64\r\rЧислові типи з дробовою частиною\r\r\rНазва\rFLC-тип\rЗначення\rТочність, знаків після коми\r\rfloatSystem.Single$$≈(+1.5*10^{-45}; +3.4*10^{38})$$7\rdoubleSystem.Double$$≈(+5.0*10^{-324}; +1.7*10^{308})$$15-16\rdecimalSystem.Decimal$$≈(+1.0*10^{-28}; +7.9*10^{28})$$28-29\r\rЛогічний тип\r\r\rНазва\rFLC-тип\rЗначення\rРозмір, біт\r\rboolSystem.Booleantrue/false8\r\rСимволи та рядки\r\r\rНазва\rFLC-тип\rЗначення\rРозмір, біт\r\rcharSystem.CharU+0000 - U+ffff16\rstringSystem.StringРядок символів Unicode\r\rОб'єктний тип\r\r\rНазва\rFLC-тип\rПритмітки\r\robjectSystem.ObjectБазовий тип для усіх інших\r\r Розглянемо коротко структури, класи та перелічувані типи даних.\nСтруктури. Структура є першим визначеним користувачем типом, який ми розглянемо. Схожі UDT (User Defined Types) є і у мовах Pascal, C тощо. По суті структури у C# є спрощеною версією класів із мінімальними відмінностями та наслідуєть не напряму від System.Object, а від System.ValueType. Структури в С# створюються за допомогою ключового слова struct (Лістинг 4.1).\n  Лістинг 4.1. Структура Point\npublic struct Point\r{\r// Поле структури\rpublic int x, y;\r//Параметризований конструктор\rpublic Point(int xPosition, int yPosition) {\rx = xPosition;\ry = yPosition;\r}\r//Метод структури\rpublic void Display() {\rSystem.Console.WriteLine(\u0026quot;({0}, {1})\u0026quot;, x, y);\r}\r}\r Класи. Клас є посилальним типом даних, що неявно наслідується від System.Object. У класі оголошуються поля, методи, властивості, конструктори, події та інші елементи, що визначають його дані та можливості. Оголошення класу відбувається із використанням ключовго слова class (лістинг 4.2).\n  Лістинг 4.2. Клас Student\npublic class Student\r{\rprivate int _age;\rpublic int GetAge() {\rreturn _age;\r}\r}\r Перелічувані типи. Перелічуваний тип (enum) – це програмна\rконструкція, що дозволяє у межах типу даних визначити альтернативні\rзначення для базового примітивного типу. Перелічувані типи наслідують\rнапряму System.Enum`. Перелічувані типи мають значні обмеження у можливостях порівняно з класами або структурами. Оголошення перелічуваного типу даних відбувається за допомогою ключового слова enum (лістинг 4.3).\n  Лістинг 4.3. Перелічуваний тип Character\npublic enum Character\r{\rStudent = 0,\rTeacher = 1,\rDekan = 2,\rRector = 3\r}\r Розглянемо відмінності між типами-посиланнями та типами значеннями (Albahari \u0026amp; Albahari, 2012). Примітка. Детальніша інформація про значимі та посилальні типи даних подана у питанні 4.6\nТаблиця 4.2. Порівняння типів-значень та типів-посилань у C#\n1Тип-значення\rТип-посилання\r2\r\r\rpublic struct Point\r{\rpublic int X { get;set; }\rpublic int Y { get;set; }\r}\r\r\r\r\rpublic class Point\r{\rpublic int X { get;set; }\rpublic int Y { get;set; }\r}\r\r\r\r\r3\r\rvar p1 = new Point { X = 5, Y = 7 };\rvar p2 = p1;\rp2.X = 10;\rConsole.WriteLine(\"p1: X = {0}\", p1.X);\rConsole.WriteLine(\"p2: X = {0}\", p2.X);\r\r\r4\r\r\rp1: X = 5\rp2: X = 10\r\r\r\r\rp1: X = 10\rp2: X = 10\r\r\r\r\r5\rgraph TD;\rp1--X1[X=5];\rp1--Y1[Y=7];\rp2--X2[X=10];\rp2--Y2[Y=7];\r\rgraph TD;\rp1--REF[object_ref];\rp2--REF[object_ref];\rREF--X3[X=10];\rREF--Y3[Y=7];\r\r\r\rЯк видно із табл. 4.2 тип-значення створює копію елемента у пам’яті і працює з копією, не впливаючи на початкові дані. Тип-посилання вказує на ділянку пам’яті і під час зміни значення поля впливає на усі об’єкти, що «прив’язані» до цієї змінної.\n 4.2. Оголошення та ініціалізація змінних. Константи Змінна у програмуванні є по суті назвою, що вказує на деякий об’єкт у пам’яті. Також можна сказати, що змінна вказує на адресу у пам’яті і надає доступ до значення, що знаходиться за цією адресою.\nДля оголошення змінної використовується запис у вигляді:\nтип ім’я_змінної;\nПравила іменування змінних у C#:\n Ім’я змінної може починатися із латинської букви або знаку «_». Ім’я змінної може складатися із латинських букв, цифр або знаку «_». Якщо ім’я змінної співпадає із ключовим словом мови програмування, то потрібне використовувати його із знаком @ (Наприклад: int @class = 1; ).    Лістинг 4.4. Приклад оголошення змінних у C#.\nint a;\rfloat myNumber;\rdouble _salary;\rstring name;\rbool isPresent;\rdecimal discount;\r Під час оголошення змінної створюється екземпляр вказаного типу. Таким чином, можна сказати, що можливості конкретної змінної визначаються можливостями типу даних. Наприклад, у змінну цілочисельного типу не можна записати рядок (string). Також важливо відмітити, що у C# не можна змінити тип даних під час існування змінної. До того як змінна буде використана у коді програми вона повинна бути оголошеною. Компілятор перевіряє наявність оголошення змінної у момент її використання.\nБудь-яка змінна до використання повинна бути ініціалізованою. Ініціалізація змінних – процес виділення у «пам’яті» під конкретний тип даних із записом значення. Також ініціалізацію змінних можна пояснити як надання конкретного значення змінній (лістинг 4.5).\nІніціалізацію змінної можна провести одразу під час оголошення або у процесі виконання програми (динамічна ініціалізація). Синтаксис ініціалізації змінної під час оголошення:\nтип ім’я_зміннної = значення;\n Оператор = у записі означає «присвоїти». «Дорівнює» записується як == і є оператором відношення.     Лістинг 4.5. Ініціалізація змінних.\nint a = 10;\rfloat myNumber = 0.2;\rdouble _salary = 100.9;\rstring name = \u0026quot;Ivan\u0026quot;;\rbool isPresent = true;\rdecimal discount = 0.02;\rchar c = 'R';\r Під час оголошення двох і більше змінних однакового типу даних списком (розділення комами) можна здійснювати вибіркове присвоєння значень (лістинг 4.6).\n  Лістинг 4.6. Оголошення та ініціалізація змінних.\nint a = 10, b, c = 20;\rchar d, f = 'F', s = '3';\r Динамічна ініціалізація змінних передбачає присвоєння значення у процесі виконання програми, наприклад, за результатами обчислень (лістинг 4.7).\n  Лістинг 4.7. Динамічна ініціалізація змінних.\ndouble a = 5, b = 7; //Катети\rdouble c; // гіпотенуза\rc = Math.Sqrt(a * a + b * b);\rConsole.WriteLine(\u0026quot;Гіпотенуза дорівнює - {0:F}\u0026quot;, c);\r У C# є можливість оголошення та ініціалізації констант. Константа у математиці є величиною, значення якої не змінюється. Константа є протиставленням до змінної. У програмуванні константа – це спосіб запису інформації, зміна якої заборонена. Значення констати повинно бути відомим у момент компіляції програми. По суті константу потрібно ініціалізувати у момент оголошення (лістинг 4.8).\n  Лістинг 4.8. Оголошення та ініціалізація констант.\nconst string spec = \u0026quot;економічна кібернетика';\rconst double PI = 3.14;\rconst bool Truth = true;\r43 з 111\rconst char _iSymbol = 'i';\r Область видимості та час існування змінної. Усі змінні до цього часу ми оголошували у межах функції Main(). Насправді змінна може бути оголошеною у межах різних блоків програми. Блоки програми відкремлються «фігурними» дужками ({}). Блок коду визначає область видимості та час існування змінної. За межами цього блоку змінної не існує і доступу до неї немає. Розглянемо приклад коду (лістинг 4.9).\n  Лістинг 4.9. Область видимості змінної.\nstatic void Main(string[] args)\r{\rint x; // Змінна відома у межах метода Main()\rx = 10;\rif (x == 10)\r{\r// Початок нової області видимості\rint у = 20; // Змінна відома лише цьому блоку\rConsole.WriteLine(\u0026quot;х та у: \u0026quot; + x + \u0026quot; \u0026quot; + у);\rx = у * 2;\r}\r// y = 100; //- помилка \u0026quot;y\u0026quot; - не існує\rConsole.WriteLine(\u0026quot;х : \u0026quot; + x);\r}\r Якщо видалити коментування у рядку y = 100, то компілятор проінформує про помилку ~ «Змінна ‘y’ не існує у даному контексті», тобто вона поза областю видимості і доступу немає.\nЗміні створюються у момент входження у область видимості і видаляються у момент виходу з неї. Таким чином можна зрозуміти, що повторне входження у область видимості створює змінну із початковим значенням повторно і не зберігає значення між викликами (лістинг 4.10).\n  Лістинг 4.10. Область видимості змінних.\nint x = 10;\rif (x == 10) {\rx = x + 1;\rint a = x;\r}\rif (x == 11) {\rx = x + 1;\rint a = x;\r}\r З прикладу лістингу 4.10. видно, що змінна a оголошена двічі, проте в різних областях видимості. У таком випадку помилки компіляції не буде. Отже, час існування змінної визначається областю її видимості.\n 4.3. Оператори та вирази У С# передбачений широкий набір операторів, які дають в руки програмістові потужні важелі управління при створенні всіляких виразів і їх обчисленні. У С# є чотири загальні класи операторів:\n арифметичні; порозрядні; логічні; оператори відношення.  4.3.1. Арифметичні оператори Таблиця 4.3. Арифметичні оператори\n   Оператор Дія     + Додавання   - Віднімання, унарний мінус   * Множення   / Ділення   % Ділення по модулю   -- Декремент   ++ Інкремент    Дія С#-операторів +, -, * і / збігається з дією аналогічних операторів в будь-якій іншій мові програмування (і в алгебрі). Їх можна застосовувати до даних будь-якого вбудованого числового типу.\nПерш за все хочу нагадати, що після застосування оператора ділення (/) до цілого числа залишок буде відкинутий. Наприклад, результат цілочисельного ділення 10/3 дорівнюватиме 3.\nЗалишок від ділення можна отримати за допомогою оператора ділення по модулю (%). Цей оператор працює практично так само, як в інших мовах програмування: повертає залишок від ділення без остачі. Наприклад, 10%3 рівне 1. У С# оператор % можна застосувати як до цілочисельних типів, так і типам з плаваючою крапкою. Наприклад, 10,0%3,0 також рівне 1. (У мовах C/C++ операції ділення по модулю застосовні лише до цілочисельних типів.)\n4.3.2. Інкремент і декремент Оператори інкремента (++) і декремента (--) збільшують і зменшують значення операнда на одиницю, відповідно. Як буде показано нижче, ці оператори володіють спеціальними властивостями, які роблять їх цікавими для розгляду. Отже, оператор інкремента виконує складання операнда з числом 1, а оператор декремента віднімає 1 зі свого операнда. Це означає, що інструкція\nх = х + 1;\nаналогічна такій інструкції:\nх++.\nТак само інструкція\nх = х - 1;\nаналогічна такій інструкції:\nх--.\nОператори інкремента і декремента можуть стояти як перед своїм операндом, так і після нього. Наприклад, інструкцію х = х - 1; можна переписати у вигляді префіксної форми\n++х; // Префіксна форма оператора інкремента\r або у вигляді постфіксної форми:\nх++; // Постфіксна форма оператора інкремента\r У попередньому прикладі не мало значення, в якій формі був застосований оператор інкремента: префіксній або постфіксній. Але якщо оператор інкремента або декремента використовується як частина більшого виразу, то форма його використання має важливе значення.\nЯкщо такий оператор застосований в префіксній формі, то С# спочатку виконає цю операцію, аби операнд набув нового значення, яке потім буде використано останньою частиною вираження. Якщо ж оператор застосований в постфіксній формі, то С# використовує у вираженні його старе значення, а потім виконає операцію, в результаті якої операнд знайде нове значення. Розглянемо наступний фрагмент коду:\nх = 10; int a = ++х;\r Результат: a = 11;\nх = 10; int a = х++;\r Результат: a = 10;\n4.3.3. Логічні оператори. Оператори відношення Результат виконання операторів відношення і логічних операторів має тип bool.\nТаблиця 4.4. Оператори відношення і логічні оператори\n   Оператор Дія     == Рівно   != Не рівно   \u0026gt; Більше   \u0026lt; Менше   \u0026gt;= Більше або рівно   \u0026lt;= Менше або рівно   \u0026amp; І   | Або   ^ Виключаюче або   || Скорочене або   \u0026amp;\u0026amp; Скорочене і   ! Не    У С# на рівність або нерівність можна порівнювати (відповідно, за допомогою операторів == та !=) всі об\u0026rsquo;єкти. Але такі оператори порівняння, як \u0026lt;, \u0026gt;, \u0026lt;= або \u0026gt;=, можна застосовувати лише до типів, які підтримують відношення впорядкування. Це означає, що всі оператори відношення можна застосовувати до всіх числових типів. Проте значення типу bool можна порівнювати лише на рівність або нерівність, оскільки значення true і false не упорядковуються. Наприклад, в С# порівняння true \u0026gt; false не має сенсу.\nЩо стосується логічних операторів, то їх операнди повинні мати тип bool, і результат логічної операції завжди матиме тип bool. Логічні оператори \u0026amp;, |, ^ і ! виконують базові логічні операції І, АБО, взаємовиключення і НЕ.\n  Лістинг 4.11. Оператори відношення та логічні оператори.\nstatic void Main(string[] args)\r{\rint a = 10, b = 11;\rbool abool = true, bbool = false;\rif(a \u0026gt; b) Console.WriteLine(\u0026quot;a \u0026gt; b\u0026quot;); //false\rif(a \u0026lt; b) Console.WriteLine(\u0026quot;a \u0026lt; b\u0026quot;); //true\rif(a == b) Console.WriteLine(\u0026quot;a == b\u0026quot;); //false\rif(a != b) Console.WriteLine(\u0026quot;a != b\u0026quot;); //true\rif (abool || bbool) Console.WriteLine(\u0026quot;abool || bbool - true\u0026quot;); //true\rif (abool \u0026amp;\u0026amp; bbool) Console.WriteLine(\u0026quot;abool \u0026amp;\u0026amp; bbool - true\u0026quot;); //false\rif (abool ^ bbool) Console.WriteLine(\u0026quot;abool ^ bbool - true\u0026quot;); //true\rif (!abool) Console.WriteLine(\u0026quot;!abool - true\u0026quot;); //false\r}  4.3.4. Інші оператори Окрім базовового набору, у C# доступний набір і інших операторів, що використовуються під час написання програм. Опишемо їх коротко у вигляді таблиць з описами.\nТаблиця 4.5. Інші оператори\n   Дія Оператор     Доступ до членів .   Індексація **[]**   Приведення типів ()   Тернарний оператор ?:   Створення нового об’єкта new()   Інформація про тип даних is sizeof typeof   Управління виключеннями переповнення checked unchecked    Є також і інші оператори у C#. Ми розглянули лише основні, які будемо використовувати у нашому курсі.\nПри присворенні виразів аналогічно до алгебри враховується пріоритет операцій:\nТаблиця 4.6. Пріоритет операцій\n   Пріор. Оператор     1 () [] . (постфікс)++ (постфікс)–– new sizeof typeof unchecked   2 ! ~ (ім’я типу) +(унарний) –(унарний) ++(префікс) ––(префікс)   3 * / %   4 + –   5 \u0026lt;\u0026lt; \u0026gt;\u0026gt;   6 \u0026lt; \u0026gt; \u0026lt;= =\u0026gt; is   7 == !=   8 \u0026amp;   9 ^   10 |   11 \u0026amp;\u0026amp;   12 ||   13 ?:   14 = += –= *= /= %= \u0026amp;= |= ^= \u0026lt;\u0026lt;= \u0026gt;\u0026gt;=    Оператор присвоєння має додаткові можливості.\nПрисвоєння можна проводити наступним чином:\nint a, b, c; int d = c = b = c = 3.\r У результаті виконання коду усі змінні будуть ініціалізовані значенням 3.\nУ C#, так само як і у С++, є складений оператор присвоєння. Для виразу x = x + 10 складений оператор матиме вигляд: x += 10. Складений оператор означає додавання до поточного значення певного числа. Аналогічні операції можна застосовувати і до інших операторів: -=, *=, /=, %=.\n4.4. Літерали У програмах на мовах високого рівня (у тому числі C#) літералами називають послідовність символів, що входять у алфавіт мови програмування, які забезпечують явне представлення значень, які використовуються для позначення початкових значень в оголошенні членів класів, змінних і констант в методах класу. Розрізняються літерали арифметичні (різних типів), логічні, символьні (включаючи Escape-послідовності), рядкові.\n4.4.1. Арифметичні літерали Арифметичні літерали кодують значення різних (арифметичних) типів. Тип арифметичного літерала визначається наступними інтуїтивно зрозумілими зовнішніми ознаками:\n  стандартним зовнішнім виглядом\nЗначення цілочисельного типу зазвичай кодується інтуїтивно зрозумілою послідовністю символів $1, 2, 3, \u0026hellip; N$.\nЗначення чисел з дробовою частиною також передбачає стандартний вигляд (крапка-роздільник між цілою і дробовою частиною, або наукова або експоненціальна нотація - $1.2500E+052$).\nШістнадцяткове представлення цілочисельного значення кодується шістнадцятковим літералом, що складається з символів $0, \u0026hellip;, 9$, а також $\u0026lsquo;a\u0026rsquo; \u0026hellip;, \u0026lsquo;f\u0026rsquo;$, або $\u0026lsquo;A\u0026rsquo; \u0026hellip;, \u0026lsquo;F\u0026rsquo;$ з префіксом '0x'.\n  власне значенням\nТак, накприклад, 32768 ніяк не може бути значенням типу short.\n  додатковим суфіксом\nСуфікси l, L відповідають типові long; ul, UL - unsigned long; f, F - float; d, D - double, M, m - decimal. Значення типу double кодуються також без префікса з вказанням розділювача дробової частини, наприклад, $25.0$.\n  4.4.2. Логічні літерали До логічних літералів відносяться наступні послідовності символів: true і false.\n4.4.3. Символьні літерали Символьні літерали - це взяті в одинарні лапки символи, що вводяться з клавіатури, наприклад, 'X', 'p', 'Q', '7', а також цілочисельні значення в діапазоні від $0$ до $65535$, перед якими розташовується конструкція вигляду (char) - операція явного приведення до типу char.\nНаступні взяті в одинарні лапки послідовності символів є Escape-послідовностями. Ця категорія літералів використовується для створення додаткових ефектів (дзвінок), простого форматування інформації, що виводиться, і кодування символів при виводі і порівнянні (у виразах порівняння).\nТаблиця 4.7.Символьні Escape-послідовності\n   Команда Пояснення     \\a Звуковий сигнал   \\b Повернення на одну позицію назад   \\f Перехід на нову сторінку   \\n Перехід на новий рядок   \\r Повернення каретки   \\t Горизонтальна табуляція   \\v Вертикальна табуляція   \\0 Нуль   \\' Одинарна лапка   \\\u0026quot; Подвійна лапка   \\\\ Зворотна коса лінія    Рядкові літерали - це послідовність символів і символьних Escape-послідовностей, взятих у подвійні лапки.\nVerbatim string - рядковий літерал, що інтерпретується компілятором так, як він записаний. Escape-послідовності сприймаються строго як послідовності символів.\nVerbatim string представляється за допомогою символу @, який розташовується безпосередньо перед текстом, взятим в парні подвійні лапки. Представлення подвійних лапок в Verbatim string забезпечується їх дублюванням.\nПара літералів (другий - Verbatim string)\n...\u0026quot;c:\\\\My Documents\\\\sample.txt\u0026quot;...\r...@\u0026quot;c:\\My Documents\\sample.txt\u0026quot;...\r мають одне і те ж значення: c:\\My Documents\\sample.txt.\nРядкові літерали є об\u0026rsquo;єктами типу string.\n4.5. Приведення типів даних Приведення типів - один з аспектів безпеки будь-якої мови програмування.\nВикористовувані в програмі типи характеризуються власними діапазонами значень, які визначаються властивостями типів, у тому числі і розміром області пам\u0026rsquo;яті, призначеної для кодування значень відповідного типу. При цьому області значень різних типів перетинаються.\nБагато значень можна виразити більш ніж одним типом. Наприклад, значення 4 можна представити як значення типу sbyte, byte, short, ushort, int, uint, long, ulong. При цьому в програмі все повинно бути влаштовано так, щоб логіка перетворення значень одного типу до іншого була зрозумілою, а результати цих перетворень - передбачувані.\nІнколи приведення значення до іншого типу відбувається автоматично. Такі перетворення називаються неявними.\nАле у ряді випадків перетворення вимагає додаткової уваги з боку програміста, який повинен явним чином вказувати необхідність перетворення, використовуючи вирази приведення типу або звертаючись до спеціальних методів перетворення, визначеним в класі System.Convert, які забезпечують перетворення значення одного типу до значення іншого.\nПеретворення типу створює значення нового типу, еквівалентне значенню старого типу, проте при цьому не обов\u0026rsquo;язково зберігається ідентичність (або точні значення) двох об\u0026rsquo;єктів.\nРозрізняють розширююче та звужуюче перетворення.\nРозширююче перетворення - значення одного типу перетвориться до значення іншого типу, яке має такий же або більший розмір. Наприклад, значення, представлене у вигляді 32-розрядного цілого числа із знаком, може бути перетворене в 64-розрядне ціле число із знаком. Розширене перетворення вважається безпечним, оскільки вихідна інформація при такому перетворенні не спотворюється.\nМожливість розширеного перетворення представлено у таблиці нижче.\nТаблиця 4.8. Можливість розширеного перетворення типів даних\n   Тип, що перетворюється У який тип перетворюється     Byte UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double, Decimal   SByte Int16, Int32, Int64, Single, Double, Decimal   Int16 Int32, Int64, Single, Double, Decimal   UInt16 UInt32, Int32, UInt64, Int64, Single, Double, Decimal   Char UInt16, UInt32, Int32, UInt64, Int64, Single, Double, Decimal   Int32 Int64, Double, Decimal   UInt32 Int64, Double, Decimal   Int64 Decimal   UInt64 Decimal   Single Double    Звужуюче перетворення - значення одного типу перетвориться до значення іншого типу, яке має менший розмір (з 64-розрядного в 32-розрядне). Таке перетворення потенційне небезпечне втратою значення. Звужуючі перетворення можуть призводити до втрати інформації.\nЯкщо тип, до якого здійснюється перетворення, не може правильно передати значення джерела, то результат перетворення виявляється дорівнює константі PositiveInfinity або NegativeInfinity. Примітка. Перевірити інформацію! При цьому значення PositiveInfinity інтерпретується як результат ділення додатнього числа на нуль, а значення NegativeInfinity - як результат ділення відємного числа на нуль. Якщо звужуюче перетворення забезпечується методами класу System.Convert, то втрата інформації супроводиться генерацією виключення (про виключення пізніше).\nТаблиця 4.9. Можливість звужуючого перетворення типів даних\n   Тип, що перетворюється У який тип перетворюється     Byte Sbyte   SByte Byte, UInt16, UInt32, UInt64   Int16 Byte, SByte, UInt16   UInt16 Byte, SByte, Int16   Int32 Byte, SByte, Int16, UInt16, UInt32   UInt32 Byte, SByte, Int16, UInt16, Int32   Int64 Byte, SByte, Int16, UInt16, Int32, UInt32, UInt64   UInt64 Byte, SByte, Int16, UInt16, Int32, UInt32, Int64   Decimal Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64   Single Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64   Double Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt6      Лістинг 4.12. Звужуюче перетворення\npublic static void Main()\r{\rint i = 1234567;\rshort s = (short)i;\rConsole.WriteLine(\u0026quot;int - {0}\\n short - {1}\u0026quot;, i,s);\r}\r   Результат виконання:\n int - 1234567\rshort - -10617\r 4.6. Робота з памяттю у С# 4.6.1. \u0026ldquo;Стек\u0026rdquo; і \u0026ldquo;купа\u0026rdquo;  Звершити розділ   Стек (Stack) відноситься до області пам\u0026rsquo;яті, підтримуваної процесором, в якій зберігаються локальні змінні. Доступ до стека у багато разів швидший, ніж до загальної області пам\u0026rsquo;яті, тому використання стека для зберігання даних прискорює роботу вашої програми. У С# розмірні типи (наприклад, цілі числа) розташовуються в стеку: для їх значень зарезервована область в стеку, і доступ до неї здійснюється по назві змінної.\nПосилальні типи (наприклад, об\u0026rsquo;єкти) розташовуються в купі (Heap). Купа — це оперативна пам\u0026rsquo;ять вашого комп\u0026rsquo;ютера. Доступ до неї здійснюється повільніше, ніж до стека. Коли об\u0026rsquo;єкт розташовується в купі, то змінна зберігає лише адресу об\u0026rsquo;єкта. Ця адреса зберігається в стеку. За адресою програма має доступ до самого об\u0026rsquo;єкту, всі дані якого зберігаються в загальній пам\u0026rsquo;яті (купі).\n«Збиральник сміття» (Garbage Collector) знищує об\u0026rsquo;єкти, розташовані в стеку, кожен раз, коли відповідна змінна виходить за область видимості. Таким чином, якщо ви оголошуєте локальну змінну в межах функції, то об\u0026rsquo;єкт буде помічений як об\u0026rsquo;єкт для «збирання сміття». І він буде видалений з пам\u0026rsquo;яті після завершення роботи функції. Об\u0026rsquo;єкти у купі теж очищаються збиральником сміття, після того, як кінцеве посилання на них буде знищено.\n4.6.2. Типи-посилання та типи-значення Усі типи даних у C# поділяються на значимі (ValueType) та типи-посилання (ReferenceType).\nЗначимі типи:\n містять у собі об’єкти даних; не можуть бути пустими.  Типи-посилання:\n містять у собі посилання на об’єкт даних; можуть бути пустими (null).  Які типи даних відносяться до значимих, а які до типів-посилань було розглянуто у питанні 4.1.\nЗапишемо простий приклад:\nint a = 1000;\rint b = a;\rb = 2000;\r Логічно, що після виконання цього коду a = 1000, b = 2000 - це принцип роботи значимих типів - у змінну копіюється значення і не привязується до змінної з якої воно було взяте.\nТепер давайте створимо просту структуру Point.\n  Лістинг 4.13. Використання структури (значимий тип).\nstruct Point\r{\rpublic int x;\rpublic int y;\r} static void Main(string[] args)\r{\rPoint point1 = new Point();\rpoint1.x = 111;\rpoint1.y = 111;\r//Виведемо на екран змінну point1\rConsole.WriteLine(\u0026quot;point1.x = {0}; point1.y = {1}\u0026quot;, point1.x, point1.y);\r// Створимо змінну point2\rPoint point2 = point1;\r//Виведемо на екран змінну point2\rConsole.WriteLine(\u0026quot;point2.x = {0}; point2.y = {1}\u0026quot;, point2.x, point2.y);\rConsole.WriteLine(\u0026quot;\\t---- Change point 2-----\u0026quot;);\r//Змінимо значення параметрів у point2\rpoint2.x = 777;\rpoint2.y = 777;\r//Виведемо point1 та point2\rConsole.WriteLine(\u0026quot;point1.x = {0}; point1.y = {1}\u0026quot;, point1.x, point1.y);\rConsole.WriteLine(\u0026quot;point2.x = {0}; point2.y = {1}\u0026quot;, point2.x, point2.y);\r}\r   Результат виконання коду:\npoint1.x = 111; point1.y = 111\rpoint2.x = 111; point2.y = 111\r---- Change point 2-----\rpoint1.x = 111; point1.y = 111\rpoint2.x = 777; point2.y = 777\r Як бачимо після зміни значень х та у для змінної point2 значення змінної рoint1 не змінилося! Все правильно, адже структура є значимим типом і тому відбувається копіювання значень при присвоєнні.\nТепер давайте замінимо структуру Point на клас.\nПриклад 12. Використання класу (посилальний тип).  Лістинг 4.14. Використання класу (посилальний тип)\nclass Point\r{\rpublic int x;\rpublic int y;\r}\r   Результат виконання коду:\npoint1.x = 111; point1.y = 111\rpoint2.x = 111; point2.y = 111\r---- Change point 2-----\rpoint1.x = 777; point1.y = 777\rpoint2.x = 777; point2.y = 777\r Як бачимо значення point1 змінилося. Посилальні типи даних вказують лише на ділянку пам\u0026rsquo;яті, у якій знаходиться значення, а не на саме значення. При присвоєнні не відбувається копіювання значень, а копіювання посилання.\nДля узагальнення опишемо все це у таблиці:\nТаблиця 4.10. Можливість звужуючого перетворення типів даних\n   Характеристика Значимий тип Тип-посилання     Змінна містить Значення Посилання на значення   Змінна зберігається У стеку У кучі   Значення по замовчуванню 0, false '\\0', null   Оператор присвоєння Копіює значення Копіює посилання    Коментар до таблиці:\nЗмінна в разі використання типів-значень містить власне значення, а при використанні типів-посилань – не саме значення, а лише посилання на нього. Місцем зберігання змінної, визначеної як тип-значення, є стек, а визначеною як посилальний тип – «купа» (останнє необхідне для динамічного виділення і звільнення пам\u0026rsquo;яті для зберігання змінної довільним чином).\nЗначенням, яким змінна ініціалізувалася за умовчанням (необхідність виконання цієї вимоги диктується ідеологією безпеки Microsoft .NET) в разі визначення за допомогою типу-значення є 0 (для чисельного типу даних), false (для логічного типу даних), '\\0' (для символьного типу даних), а в разі визначення за допомогою типу-посилання – значення порожнього посилання null.\n \r\rЗадачі Задача 4.1 Виведіть на екран наступний текст:\n\"Саме знання нікому їсти не дасть.\"\r\\І. Я. Франко\\\r Задача 4.2 Напишіть програму, яка обчислює суму, добуток, різницю, частку та остачу від ділення двох заданих чисел.\n Задача 4.3 Напишіть програму, яка конвертує суму грн. у євро.\n Задача 4.4 Напишіть попередню програму з умовою, що суму у грн. та курс валюти задає користувач.\n Задача 4.5 Написати програму, яка обчислює квадрат введеного числа.\n Задача 4.6* Написати програму, яка замінює місцями значення двох числових змінних без створення третьої змінної.\n Задача 4.7 Обрахувати ціну покупки, якщо відомо:\n ціну за одиницю товару; кількість товару; знижка (у % від загальної суми).   Задача 4.8 Дано катети прямокутного трикутника (вводяться з клавіатури користувачем). Визначити довжину гіпотенузи.\n Задача 4.9 У C# немає функції, яка обчислює квадрат числа. Написати програму, яка обчислює квадрат введеного числа.\n \r\rКонтрольні запитання  Що таке тип даних? Дайте класифікацію типів даних .NET. Що таке змінна? Який синтаксис оголошення змінної. Що таке констаната? Який синтаксис оголошення констант? Що таке область видимості змінної? Які види операторів існують у C#? Що таке інкремент та декремент? Яка різниця між постфіксним та прфіксним записом цих операторів? Що таке літерал? Який синтаксис запису літералів для різних типів даних. Що таке привдення типів даних? 10.Яка різниця та синтаксис явного та неявного привдення типів даних? 11.Опишіть основні характеристики значимих типів даних. 12.Опишіть основні характеристики посилальних типів даних.   \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1617922800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617922800,"objectID":"1ac86a7eda2915dc45096f35c511f3b5","permalink":"/courses/csharp-basics/lecture4/","publishdate":"2021-04-09T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture4/","section":"courses","summary":"Table of Contents  4.1. Поняття типу даних. Система типів .NET. 4.2. Оголошення та ініціалізація змінних. Константи 4.3. Оператори та вирази  4.3.1. Арифметичні оператори 4.3.2. Інкремент і декремент 4.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application","CTS","Value Type","Reference Type"],"title":"Лекція 4. Типи даних та змінні у .NET","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  5.1. Оператори розгалуження  5.1.1. Оператор if-else 5.1.2. Оператор switch 5.1.3. Тернарний оператор   5.2. Використання циклів під час написання програм  5.2.1. Цикл for 5.2.2.Цикли while та do-while   Приклади розв\u0026rsquo;язання задач Задачі     Контрольні запитання Список використаних джерел Додаткові матеріали для завантаження     5.1. Оператори розгалуження У C# для реалізації розгалужень коду використовуються спеціальні оператори: if-else, switch.\n5.1.1. Оператор if-else Якщо є потреба перевірити у коді програми виконання якоїсь умови та за її результатами перейти до одного із блоків програми зазвичай використовують оператор if-else. Загальний вигляд формату використання оператора if-else зображений у лістингу 5.1.\n  Лістинг 5.1. Формат використання оператора if-else\nif (умова)\r{\r//інструкція\r}\relse\r{\r//інструкція\r}\r Вираз «умова» завжди повинен повертати результат у вигляді елемента логічного типу. Тобто, «умова» може бути або true, або false.\nЯкщо «умова» рівна true, то виконається інструкція (або код) записана у дужках після if. Якщо ж «умова» рівна false, то виконається інструкція записана у дужках після else.\n Якщо після if або else тільки одна інструкція (можна ототожнити з один рядком коду), то «фігурні» дужки {} не є обов’язковими.   Розглянемо приклад: написати програму, що визначає парність/непарність числа. Тобто, користувач вводить число, а програма показує на консоль у текстовому вигляді: «парне» або «непарне» (лістинг 5.2).\n  Лістинг 5.2. Перевірка числа на парність\nint a = int.Parse(Console.ReadLine());\rif(a % 2 == 0)\rConsole.WriteLine(\u0026quot;парне\u0026quot;);\relse\rConsole.WriteLine(\u0026quot;непарне\u0026quot;);\r Конструкції if-else можуть вкладеними одна в одну без обмежень по глибині (лістинг 5.3). Проте дуже глибокої вкладеності варто уникати, адже це ускладнює читання та розуміння коду програми.\n if є обов’язковим і повинно існувати у всіх подібних конструкціях, у той же час else – необов’язковий.     Лістинг 5.3. Приклад використання вкладених операторів if-else\nif (умова1)\r{\rif (умова2)\r{\r//інструкція\r}\r}\r Також конструкція if-else може мати структуру дерева із багатьма розгалуженнями. Така структура зазвичай записується як if-else-if (лістинг 5.4).\n  Лістинг 5.4. Формат запису if-else-if\nif (умова)\r{/*код*/}\relse if (умова)\r{/*код*/}\relse if (умова)\r{/*код*/}\relse {/*код*/}\r Вирази обчислюються зверху-вниз. Якщо один із виразів («умова») отримає істинний результат, то програмний код, пов\u0026rsquo;язаний із цією гілкою розгалуження виконається, а всі інші гілки будуть пропущені. Якщо ж не виконається жодна з умов, то буде запущено код всередині останньої інструкції else (у цьому випадку else теж не обов’язковий).\n 5.1.2. Оператор switch Наступною інструкцією для реалізації розгалуження, або точніше вибору значення є switch. Switch забезпечує багатонаправлене розгалуження і дозволяє вибрати один із варіантів із даної множини альтернатив. Ця конструкція працює наступним чином:\n Значення виразу послідовно порівнюється з константами із заданого списку. При виявленні збігу для однієї з умов порівняння виконується послідовність інструкцій, пов\u0026rsquo;язана з цією умовою.  Оператор switch приймає значення цілочисельного типу (наприклад, char, byte, int, long тощо) або тип string. Типи даних, що представляють числа з дробовою частиною не можуть бути використані даному випадку.\nSwitch складається з набору case конструкцій. Кожна конструкція case представлена у вигляді літерала такого ж типу даних як і значення, що приймає switch. Усі case конструкції у межах одного switch можуть мати тільки унікальні константи. Формат оголошення продемонстровано у лістингу 5.5.\n  Лістинг 5.5. Формат оголошення switch\nswitch (значення)\r{\rcase костанта1:\r//інструкція\rbreak;\rcase костанта2:\r//інструкція;\rbreak;\r...\rdefault:\r//інструкція\rbreak;\r}\r Case-конструкції перевіряються у порядку розміщення. Вкінці кожного case повинно бути ключове слово break, що означає вихід із switch.\nТакож у switch використовують конструкцію default, яка не є обов’язковою і виконується лише у випадку, якщо жодна із case-конструкцій так і не відпрацювала.\nДля розуміння принципів роботи switch розглянемо приклад. Написати програму, яка у залежності від введеної цифри виводить на консоль пору року: 1 — «Зима», 2 — «Весна», 3 — «Літо», 4 — «Осінь», інше число — «Введіть число із діапазону [1;4]» (лістинг 5.6).\n  Лістинг 5.6. Розв’язання задачі «Пори року» з використанням switch\nConsole.Write(\u0026quot;Введіть номер пори року [1;4]:\\t\u0026quot;);\rint res = int.Parse(Console.ReadLine());\rswitch (res)\r{\rcase 1:\rConsole.WriteLine(\u0026quot;Зима\u0026quot;);\rbreak;\rcase 2:\rConsole.WriteLine(\u0026quot;Весна\u0026quot;);\rbreak;\rcase 3:\rConsole.WriteLine(\u0026quot;Літо\u0026quot;);\rbreak;\rcase 4:\rConsole.WriteLine(\u0026quot;Зима\u0026quot;);\rbreak;\rdefault:\rConsole.WriteLine(\u0026quot;Введіть число від 1 до 4\u0026quot;);\rbreak;\r}\r   Результат виконання:\n Введіть номер пори року [1;4]: 2\rВесна\r У випадку, якщо потрібно, щоб одна і та ж інструкція виконувалася для кількох різних значень констант код switch може мати вигляд як на лістингу 5.7.\n  Лістинг 5.7. Приклад використання switch\nConsole.Write(\u0026quot;Введіть оцінку [1-12]:\\t\u0026quot;);\rint res = int.Parse(Console.ReadLine());\rswitch (res)\r{\rcase 1:\rcase 2:\rcase 3:\rConsole.WriteLine(\u0026quot;Низький рівень\u0026quot;);\rbreak;\r...\rcase 10:\rcase 11:\rcase 12:\rConsole.WriteLine(\u0026quot;Високий рівень\u0026quot;);\rbreak;\r}\r У прикладі показано виведення шкільких оцінок відповідно до 12-ти бальної системи по рівнях.\n 5.1.3. Тернарний оператор Інколи для простої заміни оператора if-else використовують тернарний оператор. Тернарний оператор отримав свою назву від кількості задіяних виразів (3) і позначається символами ?:. Загальний формат запису тернарного оператора має вигляд:\nВираз_1 ? Вираз_2 : Вираз_3\r де Вираз_1 — логічний вираз, за рузультатом обчислення якого визначається наступна дія, Вираз_2 — значення, що повертається, якщо результатом Виразу_1 є true, Вираз_3 — значення, що повертається, якщо результатом Виразу_1 є false.\nДля демонстрації роботи тернарного оператора спробуємо розвязати задачу визначення модуля цілого числа. Можна було б для також задачі скористатися оператором if-else, проте тернарний оператор спрощує синтаксис запису такого коду (лістинг 5.8).\n  Лістинг 5.8. Приклад використання тернарного оператора: визначення модуля числа\nConsole.Write(\u0026quot;Введіть ціле число:\\t\u0026quot;);\rint a = Convert.ToInt32(Console.ReadLine());\rint absval = (a \u0026gt; 0) ? a : -a;\rConsole.WriteLine(\u0026quot;ABS: {0}\u0026quot;, absval);\r  Увага! Для знаходження модуля числа у C# існує спеціальний метод Math.Abs(значення).    5.2. Використання циклів під час написання програм Для виконання повторюваних операцій у програмуванні використовуються цикли. Цикл – це спеціальна конструкція мови програмування для багаторазового виконання набору інструкцій. У C# існують 4 типи циклів: for, while, do-while, foreach.\n5.2.1. Цикл for Загальний синтаксис оголошення циклу for має вигляд як на лістингу 5.9. Блок «ініціалізація» використовується для оголошення керуючих змінних циклу. У другому блоці оголошення циклу перевіряється умова можливості продовження виконання циклу. Якщо «умова» повератає false, то виконання циклу завершується. Блок «інструкції» довляє виконувати дії над змінними програми. Найчастіше у цьому блоці відбуваються дії над керуючими змінними.\n  Лістинг 5.9. Синтаксис оголошення циклу for\nfor(ініціалізація; умова; інструкції)\r{\r//код;\r}\r Усі три блоки «ініціалізація», «умова» та «інструкції» не є обов’язковим у оголошенні циклу for, проте розділювачі потрібно записати обов’язково (лістинг 5.10).\n  Лістинг 5.10. Вічний цикл for\nfor(;;)\r{\r//код;\r}\r Розглянемо приклад задачі: знайти суму усіх чисел від 1 до 10-ти включно (лістинг 5.11).\n  Лістинг 5.11. Приклад використання циклу for\nint sum = 0;\rfor (int i = 1; i \u0026lt;= 10; ++i)\rsum += i;\r  Якщо після for тільки одна інструкція, то «фігурні» дужки {} не є обов’язковими.   Для деталізації розглянемо ще один приклад програми і розберемо його (лістинг 5.12).\n  Лістинг 5.12. Приклад використання циклу for\nint sum = 0;\rfor (int i = 0, j = 1; sum \u0026lt; 20; i++, j += 2)\r{\rsum += i + j;\r}\r Проаналізуємо, як повинна відпрацювати дана програма та які значення будуть мати змінні на кожній ітерації циклу.\n Початок: i = 0; j = 1; sum = 0. 1-ша ітерація: i = 1; j = 3; sum = 5. 2-га ітерація: i = 2; j = 5; sum = 12. 3-тя ітерація: i = 3; j = 7; sum = 22  Також у циклах можуть використовуватися ключові слова break та continue.\nКлючове слово break зупиняє виконання циклу і переходить до виконання наступного після циклу коду. Ключове слово continue переводить цикл на нову ітерацію.\nНа прикладі лістингу 5.13. розглянемо використання цих операторів. Програма працює наступним чином: цикл послідовно проходить по усіх числах та виводить їх на екран; якщо число кратне 3-м, то цикл переходить на нову ітерацію; якщо число кратне 7-ми, то цикл закінчується.\n  Лістинг 5.13. Приклад використання операторів break та continue у циклах\nfor (int i = 0; i \u0026lt; 10; ++i)\r{\rif (i%3 == 0)\rcontinue;\rConsole.Write(i + \u0026quot; \u0026quot;);\rif(i%7==0)\rbreak;\r}\r   Результат виконання:\n 1 2 4 5 7\r 5.2.2.Цикли while та do-while Цикл while у мінімально модифікованому вигляді є частиною практично усіх мов програмування. Тіло циклу виконується до тих пір, поки залишається істинною умова while. Синтаксис оголошення має вигляд:\nwhile (умова) { //інструкції }\r Цикл while може працювати з передумовою та післяумовою. Цикл з передумовою спочатку перевіряє умову, а після цього виконує або не виконує ітерацію циклу. Цикл з післяумовою спочатку виконується (одна ітерація), а потім тільки перевіряється умова. Таким чином можна зробити висновок, що цикл з післяумовою виконається мінімум 1 раз. Синтаксис огололшення циклу while з післяумовою:\ndo { //інструкції } while (умова);\r Для порівняння циклів while розглянемо лістинги 5.14 та 5.15. У першому випадку не буде виведено на консоль нічого, у другому буде виведено «5».\n  Лістинг 5.14. Приклад використання циклу while з передумовою\nint x = 5;\rwhile (x \u0026lt; 5)\r{\rConsole.Write(x + \u0026quot; \u0026quot;);\r}\r   Лістинг 5.15. Приклад використання циклу while з післяумовою\nint x = 5;\rdo\r{\rConsole.Write(x + \u0026quot; \u0026quot;);\r} while (x \u0026lt; 5);\r Робота з циклом foreach буде розглянута у розділі 6 разом із вивченням масивів.\n \r\rПриклади розв\u0026rsquo;язання задач Приклад 5.1. Написати програму, яка генерує і виводить на консоль 10 випадкових чисел із діапазону від 10 до 50.\n  Розв\u0026rsquo;язок:\nRandom r = new Random();\rfor (int i = 0; i \u0026lt; 10; ++i)\r{\rConsole.Write(r.Next(10,50) + \u0026quot;\\t\u0026quot;);\r}\r Приклад 5.2. Написати програму, яка серед 5-ти введених чисел знаходить найменше. Програма працює наступним чином: користувач вводить за запитом системи числа, а потім на консоль виводиться найменше з них.\n  Розв\u0026rsquo;язок:\nint min = int.MaxValue;\rfor (int i = 0; i \u0026lt; 5; ++i)\r{\rConsole.Write(\u0026quot;Введіть {0} число:\\t\u0026quot;, i + 1);\rint num = int.Parse(Console.ReadLine());\rmin = num \u0026lt; min ? num : min;\r}\rConsole.WriteLine(\u0026quot;Найменше число:\\t{0}\u0026quot;,min);\r Приклад 5.3. Написати програму, що моделює роботу навігації. Програма повинна пропонувати користувачу вибір дії шляхом введення символа з клавіатури. Доступними діями є:\n Hello - виводить на консоль текст «Hello, user!» Time - виводить години, хвилини та секунди на поточному ПК Exit - завершує роботу програми.    Розв\u0026rsquo;язок:\nwhile (true)\r{\rConsole.WriteLine(\u0026quot;\\nMake a choice:\u0026quot;);\rConsole.Write(\u0026quot; [H]ello\\n [T]ime\\n E[x]it\\n\\t\\t:\u0026gt;\u0026quot;);\rstring res = Console.ReadLine();\rswitch (res)\r{\rcase \u0026quot;H\u0026quot;:\rcase \u0026quot;h\u0026quot;:\rConsole.WriteLine(\u0026quot;Hello, user!\u0026quot;);\rbreak;\rcase \u0026quot;T\u0026quot;:\rcase \u0026quot;t\u0026quot;:\rConsole.WriteLine(\rDateTime.Now.ToString(\u0026quot;HH:mm:ss\u0026quot;,\rnew CultureInfo(\u0026quot;uk\u0026quot;)));\rbreak;\rcase \u0026quot;X\u0026quot;:\rcase \u0026quot;x\u0026quot;:\rreturn;\rbreak;\rdefault:\rConsole.WriteLine(\u0026quot;Wrong choice\u0026quot;);\rbreak;\r}\r}\r  \r\rЗадачі Задача 5.1. Написати програму, що знаходить добуток чисел у вказаному користувачем діапазоні.\n Задача 5.2. Дано цілі додатні числа $i$ та $k$ . Реалізувати функцію, що обчислює значення виразу:\n$$ z = i - k, при i кратному k $$ $$z = k - i, при k кратному i$$ $$z = k + i, при{ }всіх{ }інших{ }умовах$$\n Задача 5.3. Обчислити значення виразу $y=\\frac{(x + 5)^3}{\\sqrt{x + 1}}$ для усіх $x$ з діапазону $[10; 100]$ кратних $7$-ми. На консоль вивести результат у вигляді, наприклад:\n x y\r7 125.21\r14 100.41\r...\r Примітка. Вивести на консоль не більше двох знаків після розділювача дробової та цілої частини (крапки) для значень $y$.\n Задача 5.4. Обчислити значення виразу $y=\\frac{cos(x^2 + 5)^3}{\\sqrt{x - ln(x)}}$ для усіх $x$ з діапазону $[100; 200]$ кратних $10$-ти. На консоль вивести результат у вигляді, наприклад:\n x y\r100 0.8710\r110 -0.0247\r...\r Примітка. Вивести на консоль не більше чотирьох знаків після розділювача дробової та цілої частини (крапки) для значень $y$. Також зверніть увагу на виведення чисел з від\u0026rsquo;ємним та додатними значеннями.\n Задача 5.5. Написати програму, що виводить на консоль таблицю множення на вказане користувачем число. Наприклад, якщо користувач ввів число $5$, то результат виконання програми матиме вигляд:\n 5 x 1 = 5\r5 x 2 = 10\r...\r// і так далі...\r...\r5 x 10 = 50\r  Задача 5.6. Відомо, що $1 дюйм$ рівний $2.54 см$. Розробити додаток, що переводить дюйми в сантиметри і навпаки. Діалог з користувачем реалізувати через систему меню.\n Задача 5.7. Написати програму, що знаходить суму усіх чисел кратних $7$ у діапазоні від $0$ до $100$.\n Задача 5.8. Написати програму, що обчислює суму цифр введено числа.\n Задача 5.9. Написати програму, що виводить на екран цифри введеного числа у зворотному порядку. Наприклад, $248641 \u0026gt; 146842$.\n Задача 5.10. Написати програму, дозволяє вивести на консоль в порядку спадання непарні числа із діапазону $[5;90]$, кратні $3$ та не кратні $5$. одночасно.\n Задача 5.11. Розробити програму, що працює як найпростіший калькулятор, який виконує арифметичні дії +, -, *, / (скористатися оператором switch).\nПояснення. Програма повинна працювати у режимі постійного діалогу з користувачем.\n--- МЕНЮ ---\r[+] - Додати\r[-] - Відняти\r[*] - Множити\r[/] - Ділити\r[0] - Вийти з програми\rВаш вибір :\u0026gt; *\rВведіть число 1: 4\rВведіть число 2: 5\rРезльутат: 20\r// повторне виведення меню\r  Задача 5.12. Знайти найбільший спільний дільник двох натуральних чисел, використавши алгоритм Евкліда. Алгоритм Евкліда полягає в наступному: від більшого числа віднімається менше до тих пір, поки вони не стануть рівними; отримане в результаті число і буде найбільшим спільним дільником.\n Задача 5.13. Написати програму, яка виводить на екран лінію з символів. Число символів та сам символ, і яка буде лінія вертикальна, або горизонтальна - вказує користувач.\n Задача 5.14. Написати програму, яка виводить на консоль фігури, зображені нижче. Примітка. Розміри фігур вказує користувач.\nФігура 1.\n****************\r****************\r****************\r****************\r****************\r Фігура 2.\n****************\r* *\r* *\r* *\r****************\r Фігура 3.\n*****\r****\r***\r**\r*\r  Задача 5.15. Написати програму, що генерує та виводить на консоль 5 випадкових чисел, кратних 7-ми та некратних 5-ти одночасно з діапазону $[50; 150]$.\n Задача 5.16. Написати програму, що передбачає вгадування користувачем числа, загаданого комп\u0026rsquo;ютером. Після кожної спроби вгадати число комп\u0026rsquo;ютер повідомляє чи загадане значення більше (\u0026gt;) чи менше (\u0026lt;) від запропонованого користувачем. Після вгадування на екран виводиться кількість спроб.\nПрипустимо, що компютер має право загадувати число у діапазоні $[1; 10000)$.\nПримітка. Потрібне вміння генерувати випадкові числа за допомогою класу Random.\n Задача 5.17. Згенерувати 10 випадкових чисел у діапазоні $[10, 100)$. Вивести числа на консоль.\n \r\rКонтрольні запитання  \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1617663600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617663600,"objectID":"a2fd748f226f18bf7f3266991115d02b","permalink":"/courses/csharp-basics/lecture5/","publishdate":"2021-04-06T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture5/","section":"courses","summary":"Table of Contents  5.1. Оператори розгалуження  5.1.1. Оператор if-else 5.1.2. Оператор switch 5.1.3. Тернарний оператор   5.2. Використання циклів під час написання програм  5.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","for","while","if-else","do-while","break","switch","case","continue"],"title":"Лекція 5. Оператори розгалуження та цикли","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  6.1. Поняття масиву даних 6.2. Одновимірні масиви  6.2.1. Оголошення 6.2.2. Ініціалізація   6.3. Багатовимірні масиви 6.4. Масиви масивів 6.5. Цикл foreach та масиви 6.6. Сортування масивів [-] 6.7. Робота з класом Array [-] Задачі     Контрольні запитання Список використаних джерел Додаткові матеріали для завантаження     6.1. Поняття масиву даних Масив задає спосіб організації даних. Масивом називають впорядковану сукупність елементів одного типу.\nКожен елемент масиву має індекси, що визначають порядок елементів. Число індексів характеризує розмір масиву. Кожен індекс змінюється в деякому діапазоні [а,b]. У мові C#, як і в багатьох інших мовах, індекси задаються цілочисельним типом. Діапазон [а,b] називається граничною парою, а – нижньою межою, b – верхньою межею. Якщо межі задані константними виразами, то число елементів масиву відоме у момент його оголошення і йому може бути виділена пам\u0026rsquo;ять ще на етапі трансляції. Такі масиви називаються статичними. Якщо ж вирази, які задають межі, залежать від змінних, то такі масиви називаються динамічними, оскільки пам\u0026rsquo;ять їм може бути відведена лише динамічно в процесі виконання програми, коли стають відомими значення відповідних змінних. Масиву, як правило, виділяється безперервна область пам\u0026rsquo;яті.\nУ мові C++ всі масиви є статичними. У мові C# знято істотне обмеження мови C++ на статичність масивів. Масиви в мові C# є справжніми динамічними масивами. Як наслідок цього масиви відносяться до посилальних типів (Reference), пам\u0026rsquo;ять їм відводиться динамічно в \u0026ldquo;купі\u0026rdquo;.\nУ мові C++ \u0026ldquo;класичних\u0026rdquo; багатовимірних масивів немає. Тут введені одновимірні масиви і масиви масивів. Останні є загальнішою структурою даних і дозволяють задати не лише багатовимірний куб, але і порізану, ступінчасту структуру. У мові C# збережені одновимірні масиви і масиви масивів. На додаток до них в мову додані багатовимірні масиви. Динамічні багатовимірні масиви мови C# є потужною, надійною, зрозумілою і зручною структурою даних, яку сміливо можна рекомендувати до вживання не лише професіоналам, але і новачкам, що програмують на C#.\nПісля цього короткого огляду давайте перейдемо до більш систематичного вивчення деталей роботи з масивами в C#.\n 6.2. Одновимірні масиви 6.2.1. Оголошення У спрощеному вигляді оголошення одновимірного масиву виглядає таким чином:\nтип[] ім’я_змінної;\r Увага, на відміну від мови C++ квадратні дужки приписані не до імені змінної, а до типу. Вони є невід\u0026rsquo;ємною частиною визначення класу, так що запис T[] слід розуміти як клас одновимірний масив з елементами типу T.\nЩо ж до меж зміни індексів, то ця характеристика до класу не відноситься, вона є характеристикою змінних - екземплярів, кожен з яких є одновимірним масивом зі своїм числом елементів, що задаються в оголошенні змінної.\nint[] а, b, с;\r Найчастіше при оголошенні масиву використовується ім\u0026rsquo;я з ініціалізацією. І знову-таки, як і в разі простих змінних, можуть бути два варіанти ініціалізації. У першому випадку ініціалізація є явною і задається константним масивом. Ось приклад:\ndouble[] x= {5.5, 6.6, 7.7};\r Слідуючи синтаксису, елементи константного масиву слід брати у фігурні дужки. У другому випадку створення і ініціалізація масиву виконується в об\u0026rsquo;єктному стилі з викликом конструктора масиву. І це найбільш поширена практика оголошення масивів. Наведу приклад:\nint[] d= new int[5];\r Отже, якщо масив оголошується без ініціалізації, то створюється лише висяче посилання із значенням void. Якщо ініціалізація виконується конструктором, то в динамічній пам\u0026rsquo;яті створюється сам масив, елементи якого ініціалізувалися константами відповідного типу, і посилання зв\u0026rsquo;язується з цим масивом. Якщо масив ініціалізувався константним масивом, то в пам\u0026rsquo;яті створюється константний масив, з яким і зв\u0026rsquo;язується посилання.\n 6.2.2. Ініціалізація Ініціалізувати масиви, наприклад, можна наступними способами:\n Літералами відповідного типу (лістинг 6.1). Випадковими числами (лістинг 6.2). Ввести з клавіатури (лістинг 6.3).  Заповнення масиву літералами може відбуватися наступним чином:\n  Лістинг 6.1. Заповнення одновимірного масиву літералами\nint[] nums = { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };\rint[] nums;\rnums = new int[ ] { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };\rint[] nums = new int[10] { 99, 10, 100, 18, 78, 23, 63, 9, 87, 49 };\r Приклад програми на C#, яка заповнює масив випадковими числами:\n  Лістинг 6.2. Заповнення одновимірного масиву літералами\nint[] array = new int[10];\r//Параметр фіксується для відтворюваності результатів\rRandom rand = new Random(2021);\rfor (int i = 0; i \u0026lt; 10; ++i)\r{\rarray[i] = rand.Next(0, 100);\rConsole.Write(\u0026quot; {0}\u0026quot;, array[i]);\r}\r   Результат виконання:\n 54 81 42 92 65 70 42 34 0 51\r Ввести з клавіатури значення масиву можна наступним чином:\n  Лістинг 6.3. Заповнення масиву значеннями, введеними з клавіатури\n//Додаємо кодування кириличних символів\rConsole.OutputEncoding = Encoding.UTF8;\rint[] array;\rConsole.Write(\u0026quot;\\n Введіть розмір масиву \u0026gt;\\t\u0026quot;);\rint size = Convert.ToInt32(Console.ReadLine());\rarray = new int[size];\rfor (int i = 0; i \u0026lt; array.Length; ++i)\r{\rConsole.Write(\u0026quot; Введіть {0}-й елемент:\\t\u0026quot;, i + 1);\rarray[i] = Convert.ToInt32(Console.ReadLine());\r}\r   Результат виконання:\n Введіть розмір масиву \u0026gt; 4\rВведіть 1-й елемент: 7\rВведіть 2-й елемент: 45\rВведіть 3-й елемент: 8\rВведіть 4-й елемент: 11\r  6.3. Багатовимірні масиви Жодної принципової різниці між одновимірними та багатовимірними масивами немає.\nОдновимірні масиви - це окремий випадок багатовимірних. Можна говорити і по-іншому: багатовимірні масиви є природним узагальненням одновимірних. Одновимірні масиви дозволяють задавати такі математичні структури як вектори, двовимірні - матриці, тривимірні - куби даних, масиви більшої розмірності - багатовимірні куби даних. Варто відмітити, що при роботі з базами даних багатовимірні куби, так звані куби OLAP, зустрічаються часто.\nОт як виглядає оголошення багатовимірного масиву в загальному випадку:\nint[,] array;\r Приклад ініціалізації:\nint[,]matrix = {1,2},{3,4};\r Давайте розглянемо класичне завдання додавання прямокутних матриць. Нам знадобиться три динамічні масиви для представлення матриць і три методи, один з яких заповнюватиме вхідні матриці випадковими числами (FillArray), інший - виконувати додавання матриць (AddMatrix), третій - друкувати самі матриці (PrintArray).\nОсь тестовий приклад (програма містить трішки довгий код, але варто його переглянути):\n  Лістинг 6.4. Приклад додавання матриць\nstatic void Main(string[] args)\r{\r//Оголосимо розмірність наших матриць\rint rows = 3, cols = 5;\r//Оголосимо матриці\rint[,] a = new int[rows, cols];\rint[,] b = new int[rows, cols];\rint[,] result = new int[rows, cols];\r//Заповнимо матриці випадковими числами\ra = FillArray(rows, cols, 1);\rb = FillArray(rows, cols, 2);\r//Виведемо на консоль матрицю А\rConsole.WriteLine(\u0026quot;\\nArray1: \u0026quot;);\rPrintArray(a);\r//Виведемо на консоль матрицю B\rConsole.WriteLine(\u0026quot;\\nArray2: \u0026quot;);\rPrintArray(b);\r//Додамо і присвоїмо результат\rresult = AddMatrix(a, b);\rif (result != null)\r{\rConsole.WriteLine(\u0026quot;\\nResultMatrix: \u0026quot;);\rPrintArray(result);\r}\r}\rstatic int[,] AddMatrix(int[,] a, int[,] b)\r{\r//Оголосимо матрицю у яку будемо записувати результат.\rint[,] res = new int[a.GetLength(0), a.GetLength(1)];\r//Перевіримо чи однаковий розмір матриць\rif ((a.GetLength(0) != b.GetLength(0)) || (a.GetLength(1) != b.GetLength(1)))\rConsole.WriteLine(\u0026quot;Мариці неоднакового розміру.\u0026quot;);\relse\r{\rfor (int i = 0; i \u0026lt; a.GetLength(0); ++i)\r{\r//Виконуємо додавання елементів матриць\rfor (int j = 0; j \u0026lt; a.GetLength(1); ++j)\rres[i, j] = a[i, j] + b[i, j];\r}\rreturn res;\r}\rreturn null;\r}\rstatic int[,] FillArray(int rows, int cols, int seed)\r{\rint[,] array = new int[rows, cols];\r//Створює змінну класу Random для генерування значень\rRandom rand = new Random(seed);\rfor (int i = 0; i \u0026lt; rows; ++i)\r{\rfor (int j = 0; j \u0026lt; cols; ++j)\r{\rarray[i, j] = rand.Next(0, 100);\r}\r}\rreturn array;\r}\rstatic void PrintArray(int[,] array)\r{\rfor (int i = 0; i \u0026lt; array.GetLength(0); ++i)\r{\rfor (int j = 0; j \u0026lt; array.GetLength(1); ++j)\r{\r//Виводимо значення на консоль\rConsole.Write(\u0026quot; {0}\\t\u0026quot;, array[i, j]);\r}\rConsole.WriteLine();\r}\r}\r   Результат виконання:\n Array1:\r24 11 46 77 65\r43 35 94 10 64\r2 24 32 98 68\rArray2:\r77 40 16 98 10\r30 80 44 22 1\r76 2 0 51 38\rResultMatrix:\r101 51 62 175 75\r73 115 138 32 65\r78 26 32 149 106\r  6.4. Масиви масивів Ще одним видом масивів C# є масиви масивів, звані також різаними/рваними масивами (jagged arrays). Такий масив масивів можна розглядати як одновимірний масив, елементи якого є масивами, елементи яких, у свою чергу, знову можуть бути масивами, і так може тривати до деякого рівня вкладеності.\nУ яких ситуаціях може виникати необхідність в таких структурах даних? Ці масиви можуть застосовуватися для представлення дерев, в яких вузли можуть мати довільне число нащадків. Таким може бути, наприклад, генеалогічне дерево. Вершини першого рівня - Fathers, що представляють батьків, можуть задаватися одновимірним масивом, так що Fathers[i] - це i-й батько. Вершини другого рівня представляються масивом масивів - Children, так що Children[i] - це масив дітей i-го батька, а Children[i][j] - це j-а дитина i-го батька. Для представлення внуків знадобиться третій рівень, так що GrandChildren[i][j][k] представлятиме k-го внука j-ї дитини i-го батька.\nЄ деякі особливості в оголошенні і ініціалізації таких масивів. Якщо при оголошенні багатовимірних масивів для вказівки розмірності використовувалися коми, то для порізаних масивів застосовується зрозуміліша символіка - сукупності пар квадратних дужок; наприклад, int[][] задає масив, елементи якого - одновимірні масиви елементів типу int.\nСкладніше зі створенням самих масивів і їх ініціалізацією. Тут не можна викликати конструктор new int[3][5], оскільки він не задає порізаний масив. Фактично потрібно викликати конструктор для кожного масиву на нийнижчому рівні. У цьому і полягає складність оголошення таких масивів.\nРозпочнемо з формального прикладу:\nint[][] jagger = new int[3][]\r{\rnew int[] {5,7,9,11},\rnew int[] {2,8},\rnew int[] {6,12,4}\r};\r Масив jagger має всього два рівні. Можна вважати, що у нього три елементи, кожен з яких є масивом. Для кожного такого масиву необхідно викликати конструктор new, аби створити внутрішній масив. У даному прикладі елементи внутрішніх масивів набувають значення, будучи явно ініціалізовані константними масивами. Звичайно, допустимим є і таке оголошення:\nint[][] jagger1 = new int[3][]\r{\rnew int[4],\rnew int[2],\rnew int[3]\r};\r В цьому випадку елементи масиву набудуть при ініціалізації нульових значень. Реальну ініціалізацію потрібно буде виконувати програмним шляхом. Варто відмітити, що в конструкторі верхнього рівня константу 3 можна опустити і писати просто new int[][]. Також виклик цього конструктора можна взагалі опустити - він матиметься на увазі:\nint[][] jagger2 =\r{\rnew int[4],\rnew int[2],\rnew int[3]\r};\r Оголошувати вкладені масиви обов’язково.\n 6.5. Цикл foreach та масиви У лекції про цикли загдувалося, що у мові С# визначений цикл foreach, але детальний його розгляд був відкладений «на потім». Час для нього настав.\nЦикл foreach використовується для опису елементів колекції. Колекція – це група об\u0026rsquo;єктів. С# визначає декілька типів колекцій, і одним з них є масив. Формат запису циклу foreach має такий вигляд:\n foreach (тип ім'я_змінної in колекція) {\rінструкції;\r}\r Тут елементи тип та ім’я_змінної задають тип та ім\u0026rsquo;я ітераційної змінної, яка при функціонуванні циклу fоreach набуватиме значень елементів з колекції. Елемент колекція служить для вказівки опитуваної колекції (в даному випадку як колекцію ми розглядаємо масив). Таким чином, елемент тип повинен збігатися (або бути сумісним) з базовим типом масиву. Тут важливо запам\u0026rsquo;ятати, що ітераційну змінну стосовно масиву можна використовувати лише для читання. Отже, неможливо змінити вміст масиву, присвоївши ітераційній змінній нове значення.\nРозглянемо простий приклад використання циклу foreach. Приведена нижче програма створює масив для зберігання цілих чисел і присвоює його елементам початкові значення. Потім вона відображає елементи масиву, попутно обчислюючи їх суму.\n  Лістинг 6.5. Робота з циклом foreach\nConsole.OutputEncoding = Encoding.UTF8;\rint[] array = new int[10];\rint suma = 0;\rRandom r = new Random(2021);\r//Заповнюмє масив випадковими числами\rfor (int i = 0; i \u0026lt; array.Length; ++i)\rarray[i] = r.Next(10, 100);\rConsole.Write(\u0026quot;Array:\\t\u0026quot;);\rforeach (int element in array)\r{\rConsole.Write(\u0026quot;{0} \u0026quot;, element);\rsuma += element;\r}\rConsole.WriteLine(\u0026quot;\\n\\nСума елементів:\\t{0}\u0026quot;, suma);\r   Результат виконання:\n Array: 59 83 48 93 69 73 48 41 10 56\rСума елементів: 580\r  6.6. Сортування масивів [-]  Розділ у процесі наповнення    6.7. Робота з класом Array [-]  Розділ у процесі наповнення    \r\rЗадачі  Задача 6.1 Написати програму, що знаходить суму парних та суму непарних елементів масиву.Кількість елементів визначає користувач, елементи генеруються випадковим чином у діапазоні [10;100] (цілі числа).\n Задача 6.2 Дано пустий масив розмірності 5х5 елементів. Заповнити його випадковими значеннями з діапазону [10;20] і вивести на консоль.\n Задача 6.3 Написати програму, яка знаходить в масиві найменше непарне число і показує його на екран. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач.\n Задача 6.4 Написати програму, яка знаходить суму парних і суму непарних елементів масиву. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач.\n Задача 6.5 Задано масив із $n$ дійсних чисел. Обчислити різницю між максимальним та мінімальним за модулем елементами цього масиву. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач.\n Задача 6.6 Дано одновимірний масив із дійсних чисел. Відсортувати його таким чином, щоб всі додатні елементи знаходилися на початку, а всі від\u0026rsquo;ємні – в кінці, і при цьому зберігся початковий порядок елементів в обох групах.\n Задача 6.7 Написати програму, що обчислює середнє значення серед парних елементів масиву. Елементи генеруються випадковим чином у діапазоні [10; 100). Кількість елементів визначає користувач.\n Задача 6.8 Написати програму, що генерує вектор випадкових елементів з діапазону $[100;200]$ та виводить його на консоль. Усі елементи вектора повинні бути кратними 7-ми. Генерацію випалкового числа винести в окремий метод.\n Задача 6.9 Написати програму, що дозволяє маніпулювати елементами цілочисельного масиву. Суть роботи програми полягає у наступному: через діалог з користувачем потрібно реалізувати функції: додавання, видалення, вставки числа у існуючий масив.\nНа початку роботи програми масив уже повинен бути ініціалізований 5-ма випадковими значеннями з діапазону $10;500$.\n Задача 6.10 Задано одновимірний масив. Знайти два серед його елементів, модуль різниці яких має найменше значення.\n Задача 6.11 Сформувати цілочисельний масив, елементами якого є випадкові числа із діапазону $[100;300]$. Знайти суму елементів масиву, значення яких кратні $8$.\n Задача 6.12 Знайти мінімальний елемент серед тих елементів масиву $A$, які не є елементами масиву $B$.\n Задача 6.13 Визначити, скільки різних чисел міститься в заданому цілочисельному масиві.\n Задача 6.14 Написати програму, яка знаходить в масиві значення, що повторюються два і більше разів, і показує їх на екран. Елементи масиву генеруються випадковим чином. Кількість стовпців та рядків вводить користувач. Наприклад:\n 45 12 12 63\r15 12 45 78\r75 56 89 1\rРезультат: 12, 75\r  Задача 6.15 Розробити функцію, що переставляє в зворотному порядку елементи головної діагоналі квадтаної матриці.\n Задача 6.16 Переформатувати марицю (двовимірний масив) таким чином, щоб її рядки розміщувалися за зростанням їх поелементних сум.\n Задача 6.17 Відсортувати рядки двохвимірного масиву за зростанням. Кількість рядків і стовпців вводить користувач. Масив заповнюється випадковими числами із діапазону $[10; 100)$.\nНаприклад:\n 45 12 12 63\r15 12 45 78\r75 56 89 1\r Результат:\n 12 12 45 63\r12 15 45 78\r1 56 75 89\r  Задача 6.18 Згенерувати матрицю значень $n*n$ (квадратну). Знайти максимальний елемент у виділеному кольором діапазоні масиву:\n\n Так, для підзавдання 13.3 і матриці поданої нижче\n 45 12 12 63\r15 12 45 78 75 56 89 1\r53 75 78 21\r максимум становитиме 89.\n \r\rКонтрольні запитання  \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1618614000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618614000,"objectID":"818c8cd11b4b4d9073da5dcf968ebae4","permalink":"/courses/csharp-basics/lecture6/","publishdate":"2021-04-17T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture6/","section":"courses","summary":"Table of Contents  6.1. Поняття масиву даних 6.2. Одновимірні масиви  6.2.1. Оголошення 6.2.2. Ініціалізація   6.3. Багатовимірні масиви 6.4. Масиви масивів 6.5. Цикл foreach та масиви 6.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application","CTS","Value Type","Reference Type","array","collection","jagged array","sorting"],"title":"Лекція 6. Основи роботи з масивами","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  7.1. Перелічувані типи  7.1.1. Оголошення 7.1.2. Заміна значень 7.1.3. Перетворення   7.2. Робота зі структурами  7.2.1. Оголошення  7.2.2. Поля  7.2.4. Методи  7.2.5. Конструктори  7.2.6. Масив об\u0026rsquo;єктів    Задачі     Контрольні запитання Список використаних джерел Додаткові матеріали для завантаження     7.1. Перелічувані типи 7.1.1. Оголошення Коли ви створюєте програму, часто буває зручно створити множину символьних імен для базових числових значень.\nРозглянемо практичну задачу. Припустимо, що ви пишете програму у якій використовуєте інформацію про дні тижня. До цього ми визначали дні тижня по номеру дня. Наприклад:\n  Лістинг 7.1. Визначення дня тижня за номером\nint a = 4;\rswitch (a)\r{\rcase 1:\rConsole.WriteLine(\u0026quot;Понеділок\u0026quot;);\rbreak;\rcase 2:\rConsole.WriteLine(\u0026quot;Вівторок\u0026quot;);\rbreak;\rcase 3:\rConsole.WriteLine(\u0026quot;Середа\u0026quot;);\rbreak;\rcase 4:\rConsole.WriteLine(\u0026quot;Четвер\u0026quot;);\rbreak;\rcase 5:\rConsole.WriteLine(\u0026quot;Пятниця\u0026quot;);\rbreak;\rcase 6:\rConsole.WriteLine(\u0026quot;Субота\u0026quot;);\rbreak;\rcase 7:\rConsole.WriteLine(\u0026quot;Неділя\u0026quot;);\rbreak;\r}  Проте подібний варіант заставляє програміста постійно пам’ятати, якій цифрі відповідає конкретний день тижня. Краще було б іменувати ці змінні.\nУ подібних ситуаціях використовуються перелічувані типи.\nПерелічуваний тип (enum) - це визначений програмістом тип, який може приймати тільки обмежений набір значень.\nЗа своїм внутрішнім представленням перелічуваний тип є цілим чимлом. Для перелічуваних типів затверджені наступні типи: byte, sbyte, short, ushort, int, uint, long або ulong.\nЗгалом перелічувані типи є одним із варіантів User Defined Type (UDT), тобто визначених користувачем типів. Такі типи у використанні не мають відмінностей від стандарних типів даних, як string, char, double тощо.\nЗагальний вигляд запису перелічуваного типу:\n модиф_доступу enum Назва : тип\r{\rЕлемент1,\rЕлемент2,\r...,\rЕлементN,\r}  Модифікатори доступу можуть бути:\n public – доступний для усіх. private – доступний лише всередині поточного класу.  Розглянемо приклади опису перелічуваних типів:\n  Лістинг 7.2. Перелічуваний тип \u0026ldquo;Кольори\u0026rdquo;.\n public enum MyColors\r{\rRed,\rYellow,\rGreen\r}\r   Лістинг 7.3. Перелічуваний тип \u0026ldquo;Арифметичні операції\u0026rdquo;.\n public enum Operations\r{\rPlus,\rMinus,\rDivide,\rMultiply\r}\r Для днів тижня перелічуваний тип матиме вигляд:\n  Лістинг 7.4. Перелічуваний тип \u0026ldquo;Дні тижня\u0026rdquo;.\n enum Days\r{\rMon, //0\rTue, //1\rWed, //2\rThu, //3\rFri, //4\rSat, //5\rSun //6\r}   7.1.2. Заміна значень Перелічувальний тип Days визначає чотири іменовані константи, відповідні деяким числовим значенням. У С# перший елемент за замовчуванням має нульовий індекс ($0$) і далі по наростаючій ($n + 1$).\nВи можете змінити цю поведінку, як вам потрібно:\n  Лістинг 7.5. Перелічуваний тип \u0026ldquo;Дні тижня\u0026rdquo; зі зміною цілочисельних значень.\n enum Days\r{\rMon = 10,\rTue, //11\rWed, //12\rThu, //13\rFri, //14\rSat, //15\rSun //16\r}\r Номери елементів перелічувального типу не обов\u0026rsquo;язково мають бути послідовними. Якщо (з будь-якої причини) є сенс визначити Days таким чином, компілятор заперечувати не буде:\n  Лістинг 7.6. Перелічуваний тип \u0026ldquo;Дні тижня\u0026rdquo; зі зміною цілочисельних значень.\n enum Days\r{\rMon = 10,\rTue, //11\rWed = 75,\rThu = 100,\rFri, //101\rSat, //102\rSun //103\r}\r Для зберігання кожного елементу перелічувального типу за замовчуванням використовується клас System.Int32. Ви також можете змінити цю поведінку. Наприклад, якщо ви хочете, аби внутрішні елементи Days зберігалися як значення типу byte, а не як int, можна написати наступне:\n  Лістинг 7.7. Перелічуваний тип \u0026ldquo;Дні тижня\u0026rdquo; унаслідуваний від byte.\n enum Days : byte\r{\rMon = 10,\r...,\rSat,\rSun\r}  Розглянемо приклад задачі про визначення днів тижня уже з використанням типу Days:\n  Лістинг 7.8. Приклад розв\u0026rsquo;язання задачі з використанням типу Days.\n enum Days\r{\rMon = 1, Tue, //2\rWed, //3\rThu, //4\rFri, //5\rSat, //6\rSun //7\r}\rstatic void Main(string[] args)\r{\rDays day = Days.Thu;\rswitch (day)\r{\rcase Days.Mon:\rConsole.WriteLine(\u0026quot;Понеділок\u0026quot;);\rbreak;\rcase Days.Tue:\rConsole.WriteLine(\u0026quot;Вівторок\u0026quot;);\rbreak;\rcase Days.Wed:\rConsole.WriteLine(\u0026quot;Середа\u0026quot;);\rbreak;\rcase Days.Thu:\rConsole.WriteLine(\u0026quot;Четвер\u0026quot;);\rbreak;\rcase Days.Fri:\rConsole.WriteLine(\u0026quot;Пятниця\u0026quot;);\rbreak;\rcase Days.Sat:\rConsole.WriteLine(\u0026quot;Субота\u0026quot;);\rbreak;\rcase Days.Sun:\rConsole.WriteLine(\u0026quot;Неділя\u0026quot;);\rbreak;\r}\r}    Результат роботи програми:\nЧетвер\r Даний приклад є лише демонстраційним і створювати такий перелічуваний тип немає жодної потреби, адже існує уже вбудований аналогічний тип DayOfWeek.\nПерепишіть попереденю програму із використанням стандартного перелічуваного типу даних DayOfWeek.\n 7.1.3. Перетворення Перелічувані типи можуть бути успішно конвертовані у числа, а також зчитані з тектових та числових значень.\nЯкщо для enum-у оголошеному у лістингу 7.8 використати наступний код:\n  Лістинг 7.9. Перетворення типу даних Days до int.\n Days day = Days.Tue;\rConsole.WriteLine(day);\rConsole.WriteLine((int)day);\r   то результат роботи програми матиме вигляд:\n Tue\r2\r Можливий також і зворотній варіант:\n  Лістинг 7.10. Перетворення типу даних int до Days.\n Days day = (Days)5;\rConsole.WriteLine(day);\r   Результат роботи програми матиме вигляд:\n Fri\r Також для роботи з перелічуваними типами варто скоритатися класом Enum, який має ряд корисних методів та властивостей. Коротко розглянемо один із них, а саме Enum.Parse\u0026lt;\u0026gt;(). Цей метод дозволяє введений (у вигляді рядка) текст перетворити в об\u0026rsquo;єкт перелічуваного типу.\n  Лістинг 7.11. Перетворення типу даних string до Days за допомогою Enu.Parse\u0026lt;\u0026gt;().\n Console.OutputEncoding = Encoding.Unicode;\rConsole.Write(\u0026quot;Введіть значення enum:\\t\u0026quot;);\rDays day = Enum.Parse\u0026lt;Days\u0026gt;(Console.ReadLine());\rConsole.WriteLine(\u0026quot;Enum:\\t\\t\u0026quot; + day);\rConsole.WriteLine(\u0026quot;Integer:\\t\u0026quot; + (int)day);\r   Результат роботи програми матиме вигляд:\n Введіть значення enum: Sun //вводиться користувачем\rEnum: Sun\rInteger: 7\r  Детальніше про клас Enum можна ознайомитися у документації на сайті компанії Microsoft.    7.2. Робота зі структурами 7.2.1. Оголошення  У C# існує багато різних типів даних для представлення інформації. Проте всі об\u0026rsquo;єкти реального світу описати розробникам усе-таки не вдалося 😄. Наприклад, якщо потрібно описати поняття студент, квартира, веб-сайт, комп\u0026rsquo;ютер та ін. є потреба створювати користувацькі типи даних. До таких типів даних належать класи та структури, а також розглянуті вище перелічувані типи. Класи по суті є розширенням структур, вони будуть розглянуті пізніше.\nСтруктури в C# практично нічим не відрізняються від структур на будь-яких інших мовах. Відмінності спостерігаються лише на більш низькому рівні. В основному це стосується того, що для структур в C# не існує базового класу. Але в той же час структури є похідними від типу ValueType.\nДуже узагальнивши поняття структури можна визначити його, як згруповану сукупність ознак(даних) певного об\u0026rsquo;єкта, методів управління цими ознаками та доступу до них. Структури визначаються за допомогою ключового слова struct, наприклад:\n модиф_доступу struct Назва\r{\r// Поля, властивості, методи...\r}  Структури використовують велику частину того ж синтаксису, що і класи, проте вони більш обмежені в порівнянні з ними:\n  У оголошенні структури поля не можуть ініціалізувати до тих пір, поки вони будуть оголошені як постійні або статичні.\n  Структура може не оголошувати використовуваний за замовчуванням конструктор (конструктор без параметрів) або деструктор.\n  Структури копіюються при присвоєнні. При присвоєнні структури у нову змінну виконується копіювання всіх даних, а будь-яка зміна нової копії не впливає на дані у вихідній копії.\n  Структури є значимими типами, а класи - посилальними типами.\n  Структури можуть бути створені без використання оператора new.\n  Структури можуть оголошувати конструктори, що мають параметри.\n  Структура не може наслідуватися від іншої структури або класу і не може бути основою для інших класів. Всі структури наслідуються безпосередньо від System.ValueType, який наслідується від System.Object.\n  Структури можуть реалізовувати інтерфейси.\n  Структура може використовуватися як тип, що допускає значення NULL, і їй можна призначити значення NULL.\n  Структура - це набір залежних один від одного змінних. Залежність тут виключно логічна і визначається умовами задачі. Аби стало зрозуміло, розглянемо простий приклад.\n7.2.2. Поля  Припустимо, ми пишемо програму, що друкує довідки для студентів. Всі довідки мають один і той же вигляд і текст, окрім наступних полів: імя, прізвище, курс, факультет, дата народження. Це залежні дані і їх можна представити у вигляді структури, наприклад так:\n  Лістинг 7.12. Опис структури Student.\n struct Student\r{\rpublic string _firstName;\rpublic string _lastName; public DateTime _dateOfBirth;\rpublic string _faculty;\rpublic int _course;\r}\r Усі елементи у представленій вище структурі є полями. Модифікатор доступу public до полів означає, що доступ до цього поля є повним у всіх блоках програми. На рис. 7.1. зображено різницю, коли поле оголошено private, і коли public.\n\r\r\r\r\r\r\rРис. 7.1. Відмінність у доступі до поля залежно від модифікатора public/private\n\rНаша структура називається Student і має 5 полів. Після того, як структура оголошена, ми можемо з нею працювати.\nРозглянемо приклад: потрібно вивести довідку з інформацією про студента.\n  Лістинг 7.13. Приклад роботи зі структурою Student.\n struct Student\r{\rpublic string firstName;\rpublic string lastName;\rpublic DateTime dateOfBirth;\rpublic string faculty;\rpublic int course;\r}\rstatic void Main(string[] args)\r{\rConsole.OutputEncoding = Encoding.Unicode;\rStudent student = new Student();\rstudent.firstName = \u0026quot;Дмитро\u0026quot;;\rstudent.lastName = \u0026quot;Попов\u0026quot;;\rstudent.faculty = \u0026quot;гуманітарний\u0026quot;;\rstudent.course = 3;\rstudent.dateOfBirth = DateTime.Parse(\u0026quot;02/05/1990\u0026quot;);\rConsole.WriteLine(\u0026quot;\\t\\tДОВIДКА\u0026quot;);\rConsole.WriteLine(\u0026quot; пiдтвреджує, що\u0026quot;);\rConsole.WriteLine(\u0026quot; {0} {1} дiйсно навчається на {2}-му курсі.\u0026quot;,\rstudent.firstName, student.lastName, student.course);\rConsole.WriteLine(\u0026quot; Дата народження: \u0026quot; + student.dateOfBirth.ToShortDateString());\rConsole.WriteLine(\u0026quot; Факультет: \u0026quot; + student.faculty);\r}\r   Результат роботи програми матиме вигляд:\n ДОВIДКА\rпiдтвреджує, що\rДмитро Попов дiйсно навчається на 3-му курсі.\rДата народження: 2/5/1990\rФакультет: гуманітарний\r  7.2.4. Методи  Структури підримують також і методи. Виведення інформації про студента можна винести у метод структури і викликати у програмі. Для цього створимо метод Print. Також напишемо метод, який буде повертати повне ім\u0026rsquo;я студента, наприклад, Попов Дмитро.\n  Лістинг 7.14. Приклад роботи зі структурою Student. Додавання методів.\n struct Student\r{\rpublic string firstName;\rpublic string lastName;\rpublic DateTime dateOfBirth;\rpublic string faculty;\rpublic int course;\rpublic void Print()\r{\rConsole.WriteLine(\u0026quot;\\t\\tДОВIДКА\u0026quot;);\rConsole.WriteLine(\u0026quot; пiдтвреджує, що\u0026quot;);\rConsole.WriteLine(\u0026quot; {0} {1} дiйсно навчається на {2}-му курсі.\u0026quot;,\rfirstName, lastName, course);\rConsole.WriteLine(\u0026quot; Дата народження: \u0026quot; + dateOfBirth.ToShortDateString());\rConsole.WriteLine(\u0026quot; Факультет: \u0026quot; + faculty);\r}\rpublic string GetFullName()\r{\rreturn firstName + \u0026quot; \u0026quot; + lastName;\r}\r}\rstatic void Main(string[] args)\r{\rConsole.OutputEncoding = Encoding.Unicode;\rStudent student = new Student();\rstudent.firstName = \u0026quot;Дмитро\u0026quot;;\rstudent.lastName = \u0026quot;Попов\u0026quot;;\rstudent.faculty = \u0026quot;гуманітарний\u0026quot;;\rstudent.course = 3;\rstudent.dateOfBirth = DateTime.Parse(\u0026quot;02/05/1990\u0026quot;);\rstudent.Print();\rConsole.WriteLine(\u0026quot;\\n \u0026quot; + student.GetFullName() + \u0026quot;\\n\u0026quot;);\r}\r   Результат роботи програми матиме вигляд:\n ДОВIДКА\rпiдтвреджує, що\rДмитро Попов дiйсно навчається на 3-му курсі.\rДата народження: 2/5/1990\rФакультет: гуманітарний\rДмитро Попов\r  7.2.5. Конструктори  Структури підтримують також і конструктори.\nУ об\u0026rsquo;єктно-орієнтованому програмуванні конструктор класу (від англ. constructor, інколи скорочують ctor) - спеціальний блок інструкцій, що викликається при створенні об\u0026rsquo;єкту з використанням ключового слова new.\nКонструктор схожий з методом, але відрізняється від методу тим, що не має явно оголошеного типу повертаємого значення, не наслідується. Конструктори виділяються наявністю однакового імені з ім\u0026rsquo;ям класу, в якому оголошуються. Конструкторів може бути одразу кілька.\n  Лістинг 7.15. Приклад роботи зі структурою Student. Додавання конструктора.\n struct Student\r{\r// Поля\rpublic string firstName;\rpublic string lastName;\rpublic DateTime dateOfBirth;\rpublic string faculty;\rpublic int course;\r// Конструктор\rpublic Student(string _firstName, string _lastName, DateTime _dateOfBirth, string _faculty, int _course)\r{\rthis.firstName = _firstName;\rthis.lastName = _lastName;\rdateOfBirth = _dateOfBirth;\rfaculty = _faculty;\rcourse = _course;\r}\r// Методи\rpublic void Print()\r{\rConsole.WriteLine(\u0026quot;\\t\\tДОВIДКА\u0026quot;);\rConsole.WriteLine(\u0026quot; пiдтвреджує, що\u0026quot;);\rConsole.WriteLine(\u0026quot; {0} {1} дiйсно навчається на {2}-му курсі.\u0026quot;,\rfirstName, lastName, course);\rConsole.WriteLine(\u0026quot; Дата народження: \u0026quot; + dateOfBirth.ToShortDateString());\rConsole.WriteLine(\u0026quot; Факультет: \u0026quot; + faculty);\r}\rpublic string GetFullName()\r{\rreturn firstName + \u0026quot; \u0026quot; + lastName;\r}\r}\rstatic void Main(string[] args)\r{\rConsole.OutputEncoding = Encoding.Unicode;\rStudent student = new Student(\u0026quot;Дмитро\u0026quot;, \u0026quot;Попов\u0026quot;, DateTime.Parse(\u0026quot;02/05/1990\u0026quot;), \u0026quot;гуманітарний\u0026quot;, 3);\rstudent.Print();\r}\r Результат виконання аналогічних до результату з лістингу 7.13.\n 7.2.6. Масив об\u0026rsquo;єктів  Якщо порівняти приклад та 7.13, то коду приблизно однаково. Але при зростанні кількості обєктів типу Студент буде видно суттєву оптимізацію. Напишемо програму, яка виводить на екран довідки 3-х студентів.\n  Лістинг 7.16. Приклад роботи зі структурою Student.\n static void Main(string[] args)\r{\rConsole.OutputEncoding = Encoding.Unicode;\rStudent[] group = new Student[3];\rgroup[0] = new Student(\u0026quot;Дмитро\u0026quot;, \u0026quot;Попов\u0026quot;, DateTime.Parse(\u0026quot;02/05/1990\u0026quot;), \u0026quot;економічний\u0026quot;, 3);\rgroup[1] = new Student(\u0026quot;Іван\u0026quot;, \u0026quot;Петров\u0026quot;, DateTime.Parse(\u0026quot;02/05/1990\u0026quot;), \u0026quot;економічний\u0026quot;, 3);\rgroup[2] = new Student(\u0026quot;Олена\u0026quot;, \u0026quot;Чуприна\u0026quot;, DateTime.Parse(\u0026quot;02/05/1990\u0026quot;), \u0026quot;економічний\u0026quot;, 3);\rforeach (Student student in group)\rstudent.Print();\r}\r   Результат роботи програми матиме вигляд:\n ДОВIДКА\rпiдтвреджує, що\rДмитро Попов дiйсно навчається на 3-му курсі.\rДата народження: 2/5/1990\rФакультет: економічний\rДОВIДКА\rпiдтвреджує, що\rІван Петров дiйсно навчається на 3-му курсі.\rДата народження: 2/5/1990\rФакультет: економічний\rДОВIДКА\rпiдтвреджує, що\rОлена Чуприна дiйсно навчається на 3-му курсі.\rДата народження: 2/5/1990\rФакультет: економічний\r Детальніше про роботу з обєктами буде розглянуто в Темі 8. ООП.\n \r\rЗадачі Задача 7.1 Написати програму, що дозволяє маніпулювати даними про товари у магазині. Товар описати як окрему структуру (struct) з полями:\n Назва (Title) Категорія (Category) Ціна (Price) Кількість (Quantity)  Категорії товарів визначені як перелічуваний тип (enum) і мають наперед визначені значення, наприклад:\n Промислові товари (Industrial products) Побутова хімія (Household chemicals) Продукти харчування (Food)  Реалізувати функції:\n Вивести список товарів Додавати товар Редагувати товар Видалити товар Вийти з програми  Взаємодію з користувачем реалізувати через меню.\n Задача 7.2 Описати структуру Книга (Book) з даними:\n Назва Автор Рік видання Місце видання  Реалізувати метод для виведення інформації про книгу, наприклад Print(), який приймає 1 параметр showFullInfo типу bool і в залежності від його значення виводить інформацію про книгу у форматі:\n якщо showFullInfo == true, то виводиться стрічка з інформацією про усі поля книги; якщо showFullInfo == false, то виводиться стрічка з інформацією тільки про поля Назва та Автор.  Автора реалізувати як окрему структуру з полями:\n Імя Прізвище Дата народження  Створити масив з 5-ти книг та вивети його на консоль методом Print() з різними параметрами.\n Задача 7.3 На основі структур, створених у завданні 7.2 написати програму для маніпулюванням інформації про книги у каталозі.\n \r\rКонтрольні запитання  \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1618700400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618700400,"objectID":"09b53fc77fd73fe0a9119351193b7351","permalink":"/courses/csharp-basics/lecture7/","publishdate":"2021-04-18T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture7/","section":"courses","summary":"Table of Contents  7.1. Перелічувані типи  7.1.1. Оголошення 7.1.2. Заміна значень 7.1.3. Перетворення   7.2. Робота зі структурами  7.2.1. Оголошення  7.2.2. Поля  7.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application","CTS","Value Type","Reference Type","enum","struct","private","public","feild","method"],"title":"Лекція 7. Перелічувані типи та структури","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  8.1. Поняття об\u0026rsquo;єкта та класу. Основні елементи класу 8.2. Будова класу  8.2.1. Поля класу 8.2.2. Методи класу   Презентація Задачі Контрольні запитання Де почитати? Список використаних джерел Додаткові матеріали для завантаження     8.1. Поняття об\u0026rsquo;єкта та класу. Основні елементи класу Об\u0026rsquo;єктно-орієнтоване програмування і проектування побудоване на класах. Будь-яку програмну систему, побудовану в об\u0026rsquo;єктному стилі, можна розглядати як сукупність класів, можливо, об\u0026rsquo;єднаних в проекти, простори імен, рішення, як це робиться при програмуванні у Visual Studio.\nКлас - це шаблон, який визначає форму об\u0026rsquo;єкту. Він задає як дані, так і код, який оперує цими даними.\nОб\u0026rsquo;єкти - це екземпляри класу.\nКлас складається із:\n полів; властивостей; методів; подій; конструкторів; деструкторів; делегатів. \u0026hellip;  Елементи класу називаються членами класу.\nКлас оголошується за допомогою ключового слова class. Синтаксис має наступний вигляд:\n  Лістинг 8.1. Синтаксис оголошення класу.\nclass ім’я_класу\r{\r//Оголошення полів\rдоступ тип імя_змінної;\rдоступ тип імя_змінної;\r//Оголошення методів\rдоступ тип_повернення імя_метода(параметри)\r{\rтіло метода;\r}\rдоступ тип_повернення імя_метода(параметри)\r{\rтіло метода;\r}\r}\r Розглянемо приклад базового створення класу \u0026ldquo;Комплексне число\u0026rdquo;.\n  Лістинг 8.2. Оголошення класу ComplexNumber.\npublic class ComplexNumber\r{\r//Поля\rprivate double a;\rprivate double b;\r//Конструктор\rpublic ComplexNumber(double a, double b)\r{\rthis.a = a;\rthis.b = b;\r}\r//Метод\rpublic override string ToString()\r{\rreturn a + \u0026quot; + \u0026quot; + b + \u0026quot;i\u0026quot;;\r}\r}\r Доступ до полів, методів та інших членів класу може здійснюватися з різним рівнем доступу:\n private доступний лише всередині класу (типу); protected доступний лише всередині класу та класів-нащадків; internal доступний лише в межах збірки; protected internal доступний лише в межах збірки, лише всередині класу та класів-нащадків; public доступний для усіх.   8.2. Будова класу 8.2.1. Поля класу Поля класу синтаксично є звичайними змінними (об\u0026rsquo;єктами) мови. Їх опис задовольняє звичайним правилам оголошення змінних, про що детально говорилося раніше. Змістовно поля задають представлення тій самій абстракції даних, яку реалізує клас.\nПоля характеризують властивості об\u0026rsquo;єктів класу. Коли створюється новий об\u0026rsquo;єкт класу, то цей об\u0026rsquo;єкт є набором полів класу. Два об\u0026rsquo;єкти одного класу мають один і той же набір полів, але різняться значеннями, що зберігаються в цих полях.\nСинтаксис оголошення полів:\nмодифікатор_доступу тип назва;\r Наприклад, оголосимо клас Worker, який має 3 поля: розмір з/п, прізвище, вік.\n  Лістинг 8.3. Оголошення полів класу Worker.\nclass Worker\r{\rpublic int salary; //Розмір з/п\rpublic string firstname; //Ім'я\rpublic string lastname; //Прізвище\r}\r Зараз клас працівник нагадує структуру! І це не дивно, адже клас є більш розвиненою структурую.\n 8.2.2. Методи класу Змінні(поля) екземплярів і методи - дві основні складові класів. Поки наш клас Worker містить лише дані. Хоча такі класи (без методів) допустимі, більшість класів мають методи.\nМетоди - це процедури (підпрограми), які маніпулюють даними, визначеними в класі, і у багатьох випадках забезпечують доступ до цих даних. Зазвичай різні частини програми взаємодіють з класом за допомогою його методів. Будь-який метод містить одну або декілька інструкцій.\nКожен метод має ім\u0026rsquo;я, і саме це ім\u0026rsquo;я використовується для його виклику. У загальному випадку методу можна привласнити будь-яке ім\u0026rsquo;я. Але пам\u0026rsquo;ятаєте, що ім\u0026rsquo;я Main() зарезервовано для методу, з якого починається виконання програми. Крім того, як імена методів не можна використовувати ключові слова С#.\nІмена методів супроводжуються парою круглих дужок. Наприклад, якщо метод має ім\u0026rsquo;я GetVal, то в тексті буде написано GetVal(). Це допомагає відрізняти імена змінних від імен методів. Формат запису методу такий:\nдоступ тип_повернення імя_метода(параметри)\r{\rтіло метода;\r}\r   Лістинг 8.4. Оголошення класу Worker. Метод.\nclass Worker\r{\rpublic int salary; //Розмір з/п\rpublic string firstname; //Ім'я\rpublic string lastname; //Прізвище\r//Метод, виводить інформацію про працівника на консоль\rpublic void DisplayInfo()\r{\rConsole.WriteLine(\u0026quot;{0} {1}, - {2} грн.\u0026quot;, lastname, firstname, salary);\r}\r}\r Зверніть увагу ось на що. Змінні екземпляра salary, lastname і firstname використовуються всередині методу DisplayInfo() без будь-яких атрибутів, тобто їм не передує ні ім\u0026rsquo;я об\u0026rsquo;єкту, ні оператор \u0026ldquo;крапка\u0026rdquo;. Це дуже важливий момент: якщо метод задіює змінну екземпляра, яка визначена в його класі, він робить це безпосередньо, без явного посилання на об\u0026rsquo;єкт і без оператора \u0026ldquo;крапка\u0026rdquo;. І Це логічно. Адже метод завжди викликається для деякого об\u0026rsquo;єкту конкретного класу. Таким чином, немає необхідності вказувати усередині методу об\u0026rsquo;єкт удруге. Це означає, що значення salalry, lastname і firstname всередині методу DisplayInfo() неявно вказують на копії цих змінних, що належать об\u0026rsquo;єкту, який викликає метод DisplayInfo().\nІнші приклади методів:\n public int GetAge();\rprotected string GetByName(string name);\rprotected static bool IsEquals(Class obj1, Class obj2);\r Повернення значення методом.\nУ загальному випадку існує два варіанти умов для повернення з методу. Перший пов\u0026rsquo;язаний з виявленням закриваючої фігурної дужки, що позначає кінець тіла методу (як продемонстровано на прикладі методу DisplayInfo()). Другий варіант полягає у виконанні інструкції return. Можливі дві форми використання інструкції return: одна призначена для void-методів (які не повертають значень), а інша - для повернення значень.\nНегайне завершення void-методу можна організувати за допомогою наступної форми інструкції return:\n public void DisplayInfo()\r{\rif(salary \u0026lt; 0)\rreturn;\rConsole.WriteLine(\u0026quot;{0} {1}, {2}\u0026quot;, lastname, firstname, salary);\r}\r Хоча void-методи - не рідкість, більшість методів все ж повертають значення. І справді, здатність повертати значення - одна з найкорисніших якостей методу. Ми вже розглядали приклад повернення значення під час роботи з масивами. Значення, які повертаються методами, використовуються в програмуванні по різному. У одних випадках повернене значення є результатом обчислень, в інших - воно просто означає, успішно чи ні виконана певна операція, а в третіх - воно може бути кодом-стану. Методи повертають викликаючим їх процедурам, використовуючи наступну форму інструкції return:\nreturn значення;\r Додамо до нашого класу Працівник ще кілька полів і методів.\nclassDiagram\rWorker  \r\rПрезентація Це вбудований документ Microsoft Office на платформі Office.\r \r\rЗадачі  \r\rКонтрольні запитання  \r\rДе почитати? Книги:\n  Назва книги\nСторінки: 1254-1284.\n  Блоги, статті:\n  Metanit. Объектно-ориентированное программирование. Практика (RU)   Відео-контент:\n   Metanit. Объектно-ориентированное программирование. Практика\n   Metanit. Объектно-ориентированное программирование. Практика\n   \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1618700400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618700400,"objectID":"36662e99cff3b48131342407c5c97678","permalink":"/courses/csharp-basics/lecture8/","publishdate":"2021-04-18T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecture8/","section":"courses","summary":"Table of Contents  8.1. Поняття об\u0026rsquo;єкта та класу. Основні елементи класу 8.2. Будова класу  8.2.1. Поля класу 8.2.2. Методи класу   Презентація Задачі Контрольні запитання Де почитати?","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application","CTS","Value Type","Reference Type","OOP","Object","Class","Object-oriented programming","Encapsulation","Polimorphism"],"title":"Лекція 8. Вступ до об'єктно-орієнтовного програмування","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  X.1. Основи роботи з математичними функціями у C# (System.Math) X.2. Генерація випадкових чисел у C# (Random) Задачі Контрольні запитання Де почитати? Список використаних джерел Додаткові матеріали для завантаження     X.1. Основи роботи з математичними функціями у C# (System.Math)   Лістинг 8.1. Синтаксис оголошення класу.\n class ім’я_класу\r{\r//Оголошення полів\rдоступ тип імя_змінної;\rдоступ тип імя_змінної;\r//Оголошення методів\rдоступ тип_повернення імя_метода(параметри)\r{\rтіло метода;\r}\rдоступ тип_повернення імя_метода(параметри)\r{\rтіло метода;\r}\r}\r  X.2. Генерація випадкових чисел у C# (Random)  \r\rЗадачі  \r\rКонтрольні запитання  \r\rДе почитати? Книги:\n  Назва книги\nСторінки: 1254-1284.\n  Блоги, статті:\n  Metanit. Объектно-ориентированное программирование. Практика (RU)   Відео-контент:\n   Metanit. Объектно-ориентированное программирование. Практика\n   Metanit. Объектно-ориентированное программирование. Практика\n   \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1618700400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618700400,"objectID":"58a7887638aca1004aeb07a10bcb4285","permalink":"/courses/csharp-basics/lecturex/","publishdate":"2021-04-18T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecturex/","section":"courses","summary":"Table of Contents  X.1. Основи роботи з математичними функціями у C# (System.Math) X.2. Генерація випадкових чисел у C# (Random) Задачі Контрольні запитання Де почитати? Список використаних джерел Додаткові матеріали для завантаження     X.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application","CTS","Value Type","Reference Type","OOP","Object","Class","Object-oriented programming","Encapsulation","Polimorphism"],"title":"Лекція X. Додаткові матеріали","type":"docs"},{"authors":null,"categories":null,"content":" \r\rTable of Contents  Тема 4. Типи даних та змінні Тема 5. Розгалуження та цикли Тема 6. Масиви Тема 7. Перелічувані типи та структури Тема 8. Об\u0026rsquo;єктно-орієнтовне програмування Список використаних джерел Додаткові матеріали для завантаження     Тема 4. Типи даних та змінні   Лістинг Y.4.1. Рішення до задачі 4.1\n//Для виведення тексту українською мовою\rConsole.OutputEncoding = Encoding.Unicode;\rConsole.WriteLine(\u0026quot;\\\u0026quot;Саме знання нікому їсти не дасть.\\\u0026quot;\\n\\t\\t\\t\\\\І.Я.Франко\\\\\u0026quot;);\r  Тема 5. Розгалуження та цикли   Лістинг Y.5.1. Рішення до задачі 5.1\nConsole.OutputEncoding = Encoding.Unicode;\rConsole.Write(\u0026quot;Введіть нижню межу:\u0026quot;);\rint low = int.Parse(Console.ReadLine());\rConsole.Write(\u0026quot;Введіть верхню межу:\u0026quot;);\rint high = int.Parse(Console.ReadLine());\rint mult = 1;\rfor (int i = low; i \u0026lt;= high; i++)\r{\rmult *= i;\r}\rConsole.WriteLine($\u0026quot;Mult: {mult}\u0026quot;);\r Також код алгоритму можна скоротити наступним чином:\nint mult = 1;\rfor (; low \u0026lt;= high; mult *= low++) ;\rConsole.WriteLine($\u0026quot;Mult: {mult}\u0026quot;);\r    Лістинг Y.5.3. Рішення до задачі 5.3\nConsole.WriteLine($\u0026quot;x\\ty\u0026quot;);\rfor (int x = 10; x \u0026lt;= 100; x++)\r{\rif (x % 7 == 0)\r{\rdouble y = Math.Pow(x + 5, 3) / Math.Sqrt(x + 1);\rConsole.WriteLine($\u0026quot;{x}\\t{y:f2}\u0026quot;);\r}\r}\r    Лістинг Y.5.4. Рішення до задачі 5.4\nConsole.WriteLine(\u0026quot;x\\ty\u0026quot;);\rfor(int x = 100; x \u0026lt;= 200; x+=10)\r{\rdouble y = Math.Pow(Math.Cos(Math.Pow(x, 2)), 3) / Math.Sqrt(x - Math.Log(x));\rConsole.WriteLine(\u0026quot;{0}\\t{1:f4}\u0026quot;, x, y \u0026gt; 0 ? \u0026quot; \u0026quot; + Math.Round(y, 4): y);\r}\r    Лістинг Y.5.5. Рішення до задачі 5.5\nConsole.Write(\u0026quot;Enter number:\\t\u0026quot;);\rint num = int.Parse(Console.ReadLine());\rfor (int i = 1; i \u0026lt; 10; i++)\rConsole.WriteLine($\u0026quot;{num} x {i} = {num*i}\u0026quot;);\r    Лістинг Y.5.10. Рішення до задачі 5.10\nfor (int i = 90; i \u0026gt;= 5; i--)\rif(i % 3 == 0 \u0026amp;\u0026amp; i % 5 != 0 \u0026amp;\u0026amp; i % 2 == 1)\rConsole.WriteLine(i);\r    Лістинг Y.5.11. Рішення до задачі 5.11\nwhile (true)\r{\rConsole.OutputEncoding = Encoding.Unicode;\rConsole.Write(\u0026quot;\\n--- МЕНЮ ---\\n[+] - Додати\\n[-] - Відняти\\n[*] - Множити\\n\u0026quot; +\r\u0026quot;[/] - Ділити\\n[0] - Вийти з програми\\n\\nВаш вибір :\u0026gt;\\t\u0026quot;);\rstring choise = Console.ReadLine();\rConsole.Write(\u0026quot;\\nВведіть число 1:\\t\u0026quot;);\rdouble num1 = double.Parse(Console.ReadLine());\rConsole.Write(\u0026quot;Введіть число 2:\\t\u0026quot;);\rdouble num2 = double.Parse(Console.ReadLine());\rswitch (choise)\r{\rcase \u0026quot;+\u0026quot;:\rdouble sum = num1 + num2;\rConsole.WriteLine($\u0026quot;\\nРезультат: {sum}\u0026quot;);\rbreak;\rdefault:\rConsole.WriteLine(\u0026quot;Помилка! Введіть операцію або 0.\u0026quot;);\rbreak;\r}\r}\r    Лістинг Y.5.14. Рішення до задачі 5.14\nФігура 1\nConsole.OutputEncoding = Encoding.Unicode;\rConsole.Write(\u0026quot;Введіть кількість рядків: \\t\u0026quot;);\rint rows = int.Parse(Console.ReadLine());\rConsole.Write(\u0026quot;Введіть кількість стовпців: \\t\u0026quot;);\rint cols = int.Parse(Console.ReadLine());\rfor (int i = 0; i \u0026lt; rows; i++)\r{\rfor (int j = 0; j \u0026lt; cols; j++)\r{\rConsole.Write(\u0026quot;*\u0026quot;);\r}\rConsole.WriteLine();\r}\r Фігура 2\nConsole.OutputEncoding = Encoding.Unicode;\rConsole.Write(\u0026quot;Введіть кількість рядків: \\t\u0026quot;);\rint rows = int.Parse(Console.ReadLine());\rConsole.Write(\u0026quot;Введіть кількість стовпців: \\t\u0026quot;);\rint cols = int.Parse(Console.ReadLine());\rfor (int i = 0; i \u0026lt; rows; i++)\r{\rfor (int j = 0; j \u0026lt; cols; j++)\r{\rif (i == 0 || i == rows - 1 || j == 0 || j == cols - 1)\rConsole.Write(\u0026quot;*\u0026quot;);\relse\rConsole.Write(\u0026quot; \u0026quot;);\r}\rConsole.WriteLine();\r}\r Фігура 3\nConsole.OutputEncoding = Encoding.Unicode;\rConsole.Write(\u0026quot;Введіть кількість: \\t\u0026quot;);\rint count = int.Parse(Console.ReadLine());\rfor (int i = count; i \u0026gt; 0; i--)\r{\rfor (int j = 0; j \u0026lt; i; j++)\r{\rConsole.Write(\u0026quot;*\u0026quot;);\r}\rConsole.WriteLine();\r}\r    Лістинг Y.5.16. Рішення до задачі 5.16\nConsole.OutputEncoding = Encoding.Unicode;\rRandom r = new Random();\rint number = r.Next(1, 10000);\rConsole.WriteLine(\u0026quot;Привіт! Я загадав число у діапазоні [1; 10000).\u0026quot;);\r// ставимо @ перед параметром, оскільки try є ключовим словом у C#\rint @try = 0;\rwhile (true)\r{\r++@try;\rConsole.Write(\u0026quot;\\nЯке число я загадав?\\t\u0026gt;\u0026quot;);\rint userNumber = int.Parse(Console.ReadLine());\rif (userNumber \u0026gt; number)\r{\rConsole.WriteLine(\u0026quot;PC \u0026gt; Неправильно. Моє число є меншим.\u0026quot;);\rcontinue;\r}\rif (userNumber \u0026lt; number)\r{\rConsole.WriteLine(\u0026quot;PC \u0026gt; Неправильно. Моє число є більшим.\u0026quot;);\rcontinue;\r}\rif (userNumber == number)\r{\rConsole.WriteLine(\u0026quot;PC \u0026gt; Вітаю! Ти вгадав за {0} спроб\u0026quot;, @try);\r}\r}\r  Тема 6. Масиви  Тема 7. Перелічувані типи та структури  Тема 8. Об\u0026rsquo;єктно-орієнтовне програмування   \r\rСписок використаних джерел  Albahari, J., \u0026amp; Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc. Cardelli, L., \u0026amp; Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/ Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО \u0026ldquo;И.Д. Вильямс\u0026rdquo;. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.   \r\rДодаткові матеріали для завантаження  Лекція у форматі DOCX  Завантажити (у розробці) Лекція у форматі PDF  Завантажити (у розробці) Діаграми до лекції у форматі  draw.io на  github Перейти    Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.   ","date":1618700400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618700400,"objectID":"3fc74b0a3cadfe7e729631ace9c3b24c","permalink":"/courses/csharp-basics/lecturey/","publishdate":"2021-04-18T00:00:00+01:00","relpermalink":"/courses/csharp-basics/lecturey/","section":"courses","summary":"Table of Contents  Тема 4. Типи даних та змінні Тема 5. Розгалуження та цикли Тема 6. Масиви Тема 7. Перелічувані типи та структури Тема 8. Об\u0026rsquo;єктно-орієнтовне програмування Список використаних джерел Додаткові матеріали для завантаження     Тема 4.","tags":["csharp","economic cybernetics","ostroh academy","C#","visual studio",".net framework","console application","tasks","solutions"],"title":"Розв'язки до задач","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1618617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618617600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"/project/example/","publishdate":"2021-04-17T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Education","R","DataClass"],"title":"DataClass","type":"project"},{"authors":["Yurii Kleban"],"categories":["Course","Education","Tutorial","R"],"content":" Table of Contents  Overview Get Started Crowd-funded open-source software  ❤️ Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ❤️   Ecosystem Inspiration Features Themes License     Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It\u0026rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.   Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Guide and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1618617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587168000,"objectID":"0d2f65dd1a0f224f540cdf63657b7e9b","permalink":"/post/r-configuration/","publishdate":"2021-04-17T00:00:00Z","relpermalink":"/post/r-configuration/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["R","RStudio","Tutorial","Anaconda","Jupyter Notebooks"],"title":"How configure R for education and machine learning [EN]","type":"post"},{"authors":["Yurii Kleban","吳恩達"],"categories":["Demo","教程"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It\u0026rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.   Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Guide and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you\u0026rsquo;ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Charts Academic supports the popular Plotly chart format.\nSave your Plotly JSON in your page folder, for example chart.json, and then add the {{\u0026lt; chart data=\u0026quot;chart\u0026quot; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\n  (function() { let a = setInterval( function() { if ( typeof window.Plotly === 'undefined' ) { return; } clearInterval( a ); Plotly.d3.json(\"./line-chart.json\", function(chart) { Plotly.plot('chart-415976832', chart.data, chart.layout, {responsive: true}); }); }, 500 ); })();  You might also find the Plotly JSON Editor useful.\nMath Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nTo render inline or block math, wrap your LaTeX math with $...$ or $$...$$, respectively.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left |\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right |^2}$$\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the \\\\\\\\ math linebreak:\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$  renders as\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\n1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ```  renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2]  An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```  renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d  An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() }  An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ```  renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*]  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Callouts Academic supports a shortcode for callouts, also referred to as asides, hints, or alerts. By wrapping a paragraph in {{% callout note %}} ... {{% /callout %}}, it will render as an aside.\n{{% callout note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /callout %}}  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Spoilers Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.\n{{\u0026lt; spoiler text=\u0026quot;Click to view the spoiler\u0026quot; \u0026gt;}} You found me! {{\u0026lt; /spoiler \u0026gt;}}  renders as\nClick to view the spoiler You found me!\n Icons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are some examples using the icon shortcode to render icons:\n{{\u0026lt; icon name=\u0026quot;terminal\u0026quot; pack=\u0026quot;fas\u0026quot; \u0026gt;}} Terminal {{\u0026lt; icon name=\u0026quot;python\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} Python {{\u0026lt; icon name=\u0026quot;r-project\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} R  renders as\n  Terminal\n Python\n R\nDid you find this page helpful? Consider sharing it 🙌 ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Yurii Kleban"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Yurii Kleban"],"categories":[],"content":"from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb  The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post's title date: 2019-09-01 # Put any other Academic metadata here... ---  Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.  Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Education","R","DataClass"],"title":"Internal Project","type":"project"},{"authors":["Yurii Kleban","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Yurii Kleban","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":["Yurii Kleban","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]